<?xml version="1.0" ?>
<SmellBaseline>
  <Blacklist/>
  <Whitelist>
    <ID>ClassNaming:SportCardInteractor_ElementsQueryJsonAdapter.kt$SportCardInteractor_ElementsQueryJsonAdapter : JsonAdapter</ID>
    <ID>ClassNaming:SportMultiscreenInteractor_ElementsQueryJsonAdapter.kt$SportMultiscreenInteractor_ElementsQueryJsonAdapter : JsonAdapter</ID>
    <ID>ClassNaming:SportPlaybackInteractor_ElementsQueryJsonAdapter.kt$SportPlaybackInteractor_ElementsQueryJsonAdapter : JsonAdapter</ID>
    <ID>ClassNaming:VideoInteractor_ElementsQueryJsonAdapter.kt$VideoInteractor_ElementsQueryJsonAdapter : JsonAdapter</ID>
    <ID>CollapsibleIfStatements:BasePagerIndicator.kt$BasePageIndicator$if (layoutManager != null) { if (layoutManager is GridLayoutManager) { val gridLayoutManager = layoutManager as GridLayoutManager? row = gridLayoutManager!!.spanCount } }</ID>
    <ID>CollapsibleIfStatements:CalendarAdapter.kt$CalendarAdapter$if (item is DateItem) { if (item.date == date) { return@indexOfFirst true } }</ID>
    <ID>CollapsibleIfStatements:CalendarAdapter.kt$CalendarAdapter$if (item is MonthItem) { if (item.date.year == year &amp;&amp; item.date.month == month) { return@indexOfFirst true } }</ID>
    <ID>CollapsibleIfStatements:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter.CollectionViewHolder$if (currentFocus != hasFocusedItemMap[position]) { if (!recyclerView.isComputingLayout) { recyclerView.invalidateItemDecorations() } }</ID>
    <ID>CollapsibleIfStatements:PaymentMethodListPresenter.kt$PaymentMethodListPresenter$if (!canBoughtByAccount) { if (!tryToOpenLinkedCard()) { if (!tryToOpenLinkedQiwi()) { } } }</ID>
    <ID>CollapsibleIfStatements:PaymentMethodListPresenter.kt$PaymentMethodListPresenter$if (!tryToOpenLinkedCard()) { if (!tryToOpenLinkedQiwi()) { } }</ID>
    <ID>CollapsibleIfStatements:PlayerControlView.kt$PlayerControlView$if (player.currentTimeline?.isEmpty == false) { if (player.currentTimeline.getWindow(player.currentWindowIndex, window, false).isDynamic) { seekTo(player.currentWindowIndex, C.TIME_UNSET) } }</ID>
    <ID>CollapsibleIfStatements:SendCodePresenter.kt$SendCodePresenter$if (!this.currentPhone.isNullOrEmpty() &amp;&amp; !isForSport) { if (phone.onlyDigits() == currentPhone?.onlyDigits()) { viewState.showSamePhoneError() return } }</ID>
    <ID>CollapsibleIfStatements:SportTrackSelectorView.kt$SportTrackSelectorView$if (event.keyCode == KeyEvent.KEYCODE_DPAD_UP) { if (focusedChild?.isVisible == true &amp;&amp; focusedChild is ViewGroup) { (focusedChild as ViewGroup).focusedChild?.focusSearch(FOCUS_UP)?.apply { if (parent != focusedChild) { return true } } } }</ID>
    <ID>CollapsibleIfStatements:SportTrackSelectorView.kt$SportTrackSelectorView$if (event?.action == KeyEvent.ACTION_DOWN) { if (event.keyCode == KeyEvent.KEYCODE_DPAD_UP) { if (focusedChild?.isVisible == true &amp;&amp; focusedChild is ViewGroup) { (focusedChild as ViewGroup).focusedChild?.focusSearch(FOCUS_UP)?.apply { if (parent != focusedChild) { return true } } } } }</ID>
    <ID>CollapsibleIfStatements:ToolbarBackgroundBehavior.kt$ToolbarBackgroundBehavior$if (toolbar != null) { if (target is ScrollingView) { val hasScroll = target.computeVerticalScrollOffset() != 0 val color = if (hasScroll) scrolledColor else zeroScrollColor if (color != currentColor) { setToolbarColor(toolbar, color) } } }</ID>
    <ID>CollapsibleIfStatements:TvSportCollectionActivity.kt$TvSportCollectionActivity$if (event?.repeatCount != 0) { if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) { railLm?.isLongClick = true } }</ID>
    <ID>CollapsibleIfStatements:TvSportTournamentFragment.kt$TvSportTournamentFragment$if (event?.repeatCount != 0) { if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_DPAD_LEFT) { (tournamentList.layoutManager as? CollectionsCarouselLayoutManager)?.setLongClickScroll(true) } }</ID>
    <ID>ComplexCondition:UiUserSubscription.kt$offerType == OfferType.UNIVERSAL_MULTISUBSCRIPTION.value &amp;&amp; renewalCount != null &amp;&amp; renewalCount &gt; 0 &amp;&amp; renewalDuration != null &amp;&amp; renewalDuration &gt; 0</ID>
    <ID>ComplexMethod:AnalyticsCompat.kt$AnalyticsCompat$private fun trackPurchaseInner(action: PurchaseFields.Actions, element: KollectorElement?, offer: String?, price: Float?, ex: ExceptionWithErrorCode, paymentMethod: String?, quality: String?, consumptionMode: String?, transactionId: String?, fromFab: Boolean?)</ID>
    <ID>ComplexMethod:ChannelManager.kt$ChannelManager$@RequiresApi(Build.VERSION_CODES.O) fun handleMovieForWatchNext(context: Context, element: Element, playbackPosition: Int, duration: Int)</ID>
    <ID>ComplexMethod:CirclePagerIndicator.kt$CirclePageIndicator$override fun onDraw(canvas: Canvas)</ID>
    <ID>ComplexMethod:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter.CollectionViewHolder$fun bindCardVideo(uiItem: T, position: Int)</ID>
    <ID>ComplexMethod:CustomPlayerView.kt$CustomPlayerView$fun showDoubleTap(direction: Int)</ID>
    <ID>ComplexMethod:CustomPlayerView.kt$CustomPlayerView$private fun updateForCurrentTrackSelections(isNewPlayer: Boolean)</ID>
    <ID>ComplexMethod:DisplayedDatesRangeFactory.kt$DisplayedDatesRangeFactory$fun getDisplayedDatesRange( initialDate: CalendarDate, minDate: CalendarDate? = null, maxDate: CalendarDate? = null ): DatesRange</ID>
    <ID>ComplexMethod:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$override fun fromJson(reader: JsonReader): ElementResponse</ID>
    <ID>ComplexMethod:ErrorInfo.kt$fun ErrorInfo.Companion.getErrorDescription(res: Resources, code: Int)</ID>
    <ID>ComplexMethod:FteOfferFragment.kt$FteOfferFragment$private fun bindMovie(): View?</ID>
    <ID>ComplexMethod:FteOfferFragment.kt$FteOfferFragment$private fun bindMovieNoOffer(): View?</ID>
    <ID>ComplexMethod:FteOfferFragment.kt$FteOfferFragment$private fun bindSubscription(): View?</ID>
    <ID>ComplexMethod:FteOfferFragment.kt$FteOfferFragment$private fun bindSubscriptionBundle(): View?</ID>
    <ID>ComplexMethod:GameExtensions.kt$fun Game.getGameStatusText(context: Context, source: GameStatusSource, serverTime: Long): String</ID>
    <ID>ComplexMethod:GameOfTheDayViewHolder.kt$GameOfTheDayViewHolder$fun bind(gameOfTheDayItem: Game, serverTime: Long, showScore: Boolean)</ID>
    <ID>ComplexMethod:HigherOrderFunction.kt$@Deprecated("use bundleOfKtx") fun bundleOf(vararg pairs: Pair&lt;String, Any?&gt;)</ID>
    <ID>ComplexMethod:KeyboardView.kt$KeyboardView$private fun reloadKeys()</ID>
    <ID>ComplexMethod:KollectorEventsJsonAdapter.kt$KollectorEventsJsonAdapter$override fun toJson(writer: JsonWriter, value: List&lt;KollectorEvent&gt;?)</ID>
    <ID>ComplexMethod:LoginProvider.kt$LoginProvider$private fun requestLoginByDeviceId(): ApmResponse</ID>
    <ID>ComplexMethod:MainApplicationPresenter.kt$MainApplicationPresenter$private fun login()</ID>
    <ID>ComplexMethod:Media.kt$MediaInfoFactory$private fun createCustomDataJSON(elementId: String, elementType: String, coverUrl: String, aspectRatio: Double, licenseUrl: String?, licenseDrmType: String?, licenseCustomData: String?, failOverUrls: String?, liveContentType: LiveContentType?, shortTitle: String?, longTitle: String?): JSONObject</ID>
    <ID>ComplexMethod:MobileSportTournamentFragment.kt$MobileSportTournamentFragment$override fun showShowcase(tournamentItems: List&lt;SportListItem&lt;*&gt;&gt;, footer: String?)</ID>
    <ID>ComplexMethod:Model.kt$fun List&lt;TournamentElementItem&gt;.toSportListItems(header: String?, gameOfDay: Boolean = false, gameOfDayHeader: String? = null): MutableList&lt;SportListItem&lt;*&gt;&gt;</ID>
    <ID>ComplexMethod:ModelExtension.kt$fun ImageParams.makeImageUrl(basicImage: String): String</ID>
    <ID>ComplexMethod:NotificationLandingActivity.kt$NotificationLandingActivity$private fun setActions(actions: List&lt;Action&gt;)</ID>
    <ID>ComplexMethod:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter$override fun instantiateItem(viewGroup: ViewGroup, position: Int): Any</ID>
    <ID>ComplexMethod:OfferActivatedDialog.kt$OfferActivatedDialog$private fun bindView()</ID>
    <ID>ComplexMethod:PaymentMethodListPresenter.kt$PaymentMethodListPresenter$private fun loadPaymentMethods()</ID>
    <ID>ComplexMethod:PaymentMethodsFragment.kt$PaymentMethodsFragment$override fun showPaymentMethods(methods: List&lt;PaymentMethodUiModel&gt;)</ID>
    <ID>ComplexMethod:PlaybackException.kt$PlaybackException.Companion$//TODO add more ExoPlaybackExceptions fun from(ex: Throwable): PlaybackException</ID>
    <ID>ComplexMethod:PlayerControlView.kt$PlayerControlView$private fun updateLiveButton()</ID>
    <ID>ComplexMethod:PlayerControlView.kt$PlayerControlView$private fun updateProgress()</ID>
    <ID>ComplexMethod:PriceTag.kt$PriceTag.Factory$private fun resolveDescr(context: Context): CharSequence</ID>
    <ID>ComplexMethod:PriceTag.kt$PriceTag.Factory$private fun resolvePrice(context: Context): String</ID>
    <ID>ComplexMethod:PriceTag.kt$UiProductFactory$private fun resolvePriceInfo(context: Context, product: ProductResponse, availableOffers: List&lt;OfferResponse&gt;): String</ID>
    <ID>ComplexMethod:PriceTag.kt$fun formatDiscountWithRenewCountText(context: Context, beforeRenewalPrice: Int, beforeRenewalDurationMs: Long, renewalDurationMs: Long, renewalCount: Int, renewalPrice: Int, originalPrice: Int): SpannableStringBuilder</ID>
    <ID>ComplexMethod:ProductViewHolder.kt$ProductViewHolder$private fun decoratePriceTag(view: ViewGroup, hasFocus: Boolean)</ID>
    <ID>ComplexMethod:PurchaseConfirmUiModel.kt$PurchaseConfirmUiModel.Companion$fun from(context: Context, method: PaymentMethodResponse, account: BillingAccountResponse?): PurchaseConfirmUiModel</ID>
    <ID>ComplexMethod:SendCodePresenter.kt$SendCodePresenter$override fun onFirstViewAttach()</ID>
    <ID>ComplexMethod:SportCardFragment.kt$SportCardFragment$private fun addButtons(item: PlayableItem, liveContentTypes: List&lt;LiveContentType&gt;, canBuySubscription: Boolean, needActivateSubscription: Boolean)</ID>
    <ID>ComplexMethod:SportPlayerActivity.kt$SportPlayerActivity$override fun setUi(sportPlaybackUIModel: SportPlaybackUIModel?)</ID>
    <ID>ComplexMethod:TrackSelectorCompoundView.kt$TrackSelectorCompoundView$override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean</ID>
    <ID>ComplexMethod:TvSportCollectionActivity.kt$TvSportCollectionActivity$override fun showCollection(name: String?, items: List&lt;SportListItem&lt;*&gt;&gt;, reset: Boolean, footer: String?)</ID>
    <ID>ComplexMethod:TvSportTournamentAdapter.kt$TvSportTournamentAdapter$fun replaceItemsForRow(rowModel: SportRow, rootList: RecyclerView)</ID>
    <ID>ComplexMethod:UiUserSubscription.kt$private fun createRowsWithOffer(context: Context, subscription: ElementResponse, offer: OfferResponse, insteadPrice: Int?, serverDate: Long): Triple&lt;String?, String?, String?&gt;</ID>
    <ID>ComplexMethod:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$override fun fromJson(reader: JsonReader): UserInfoResponse</ID>
    <ID>ComplexMethod:VideoAspectRatioFrameLayout.kt$VideoAspectRatioFrameLayout$override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int)</ID>
    <ID>ComplexMethod:VideoCardItemDecorator.kt$VideoCardItemDecorator$override fun getItemOffsets( outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State)</ID>
    <ID>ComplexMethod:VideoCardItemDecorator.kt$VideoCardItemDecorator$override fun onDraw(c: Canvas, parent: RecyclerView, state: RecyclerView.State)</ID>
    <ID>ComplexMethod:VideoCollectionCompoundView.kt$VideoCollectionCompoundView$private fun setVideoModels(animationType: Int = TYPE_VIDEO_CARD_UI_UPDATE_WITH_NO_ANIMATION)</ID>
    <ID>ComplexMethod:VideoInfoFragment.kt$VideoInfoFragment$override fun updateFavouriteButton(isVideoBookmarked: Boolean)</ID>
    <ID>ComplexMethod:VideoInfoFragment.kt$VideoInfoFragment$override fun updateTrailerButton()</ID>
    <ID>ComplexMethod:VideoInfoFragment.kt$VideoInfoFragment$private fun getVisibilityAnimators(view: View, isVisible: Boolean, direction: Int): List&lt;Animator&gt;</ID>
    <ID>ComplexMethod:VideoInfoRecyclerView.kt$VideoInfoRecyclerView$override fun dispatchKeyEvent(event: KeyEvent?): Boolean</ID>
    <ID>ConstructorParameterNaming:CirclePagerIndicator.kt$CirclePageIndicator.SavedState$`in`: Parcel</ID>
    <ID>EmptyCatchBlock:DeviceInfoProvider.kt$DeviceInfoProvider${ }</ID>
    <ID>EmptyCatchBlock:PlayerHolder.kt$PlayerHolder${}</ID>
    <ID>EmptyCatchBlock:XiaomiHistoryManager.kt$XiaomiHistoryManager${}</ID>
    <ID>EmptyDefaultConstructor:CalendarItemsGenerator.kt$CalendarItemsGenerator$()</ID>
    <ID>EmptyDefaultConstructor:DaysBarItem.kt$DaysBarItem$()</ID>
    <ID>EmptyFunctionBlock:ActivityLifecycleAdapter.kt$ActivityLifecycleAdapter${ }</ID>
    <ID>EmptyFunctionBlock:AddPhoneFragment.kt$AddPhoneFragment${ }</ID>
    <ID>EmptyFunctionBlock:AddPhoneFragment.kt$AddPhoneFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:AddToEndSingleByTagStrategy.kt$AddToEndSingleByTagStrategy${ }</ID>
    <ID>EmptyFunctionBlock:AnalyticsAppLifecyclerListener.kt$AnalyticsHeartbeatListener${}</ID>
    <ID>EmptyFunctionBlock:AnalyticsCompat.kt$AnalyticsCompat${ }</ID>
    <ID>EmptyFunctionBlock:CheckCodeFragment.kt$CheckCodeFragment${ }</ID>
    <ID>EmptyFunctionBlock:ClearErrorTextWatcher.kt$ClearErrorTextWatcher${ }</ID>
    <ID>EmptyFunctionBlock:ConfirmPhoneFragment.kt$ConfirmPhoneFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:DebugToolsConfig.kt$DebugToolsConfig${ }</ID>
    <ID>EmptyFunctionBlock:DeviceConnectionActivity.kt$DeviceConnectionActivity${ }</ID>
    <ID>EmptyFunctionBlock:FragmentExtension.kt${ }</ID>
    <ID>EmptyFunctionBlock:FteActivity.kt$FteActivity.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:FteFragment.kt$FteFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:FteSubscriptionFragment.kt$FteSubscriptionFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:FteSubscriptionFragment.kt$FteSubscriptionFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:KeyboardView.kt$KeyboardView.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:LogoutPresenter.kt$LogoutPresenter${ }</ID>
    <ID>EmptyFunctionBlock:MaskedPhoneTextWatcher.kt$MaskedPhoneTextWatcher${}</ID>
    <ID>EmptyFunctionBlock:NonEditablePrefixTextWatcher.kt$NonEditablePrefixTextWatcher${}</ID>
    <ID>EmptyFunctionBlock:PageIndicatorView.kt$PageIndicatorView.PageListener${ }</ID>
    <ID>EmptyFunctionBlock:PhoneCodeFragment.kt$PhoneCodeFragment${ }</ID>
    <ID>EmptyFunctionBlock:PhoneMaskTextWatcher.kt$PhoneMaskTextWatcher${}</ID>
    <ID>EmptyFunctionBlock:PromoCodeFragment.kt$PromoCodeFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:PurchaseContainerRouter.kt$PurchaseContainerRouter${ }</ID>
    <ID>EmptyFunctionBlock:RefillRouter.kt$RefillRouter${ }</ID>
    <ID>EmptyFunctionBlock:RegisterPhoneCodeView.kt$RegisterPhoneCodeView${}</ID>
    <ID>EmptyFunctionBlock:SendCodeView.kt$SendCodeView${ }</ID>
    <ID>EmptyFunctionBlock:SendCodeView.kt$SendCodeView${}</ID>
    <ID>EmptyFunctionBlock:StartActivity.kt$StartActivity${ }</ID>
    <ID>EmptyFunctionBlock:SubscriptionManagementFragment.kt$SubscriptionManagementFragment${ }</ID>
    <ID>EmptyFunctionBlock:SubscriptionRepository.kt$SubscriptionRepository${ }</ID>
    <ID>EmptyFunctionBlock:SupportInfoFragment.kt$SupportInfoFragment${ }</ID>
    <ID>EmptyFunctionBlock:TvSportCardActivity.kt$TvSportCardActivity${ }</ID>
    <ID>EmptyFunctionBlock:TvSportPlayerActivity.kt$TvSportPlayerActivity${ }</ID>
    <ID>EmptyFunctionBlock:TvSportTournamentFragment.kt$TvSportTournamentFragment${ }</ID>
    <ID>EmptyFunctionBlock:VideoCardsAdapter.kt$VideoCardsAdapter.VideoCardViewHolder.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:VideoCollectionRepository.kt$VideoCollectionRepository${ }</ID>
    <ID>EmptyFunctionBlock:VideoRepository.kt$VideoRepository${ }</ID>
    <ID>EmptyFunctionBlock:ViewExtension.kt$&lt;no name provided&gt;${}</ID>
    <ID>EmptyIfBlock:PaymentMethodListPresenter.kt$PaymentMethodListPresenter${ }</ID>
    <ID>EmptyKtFile:SportGameFragment.kt$.SportGameFragment.kt</ID>
    <ID>EmptySecondaryConstructor:CirclePagerIndicator.kt$CirclePageIndicator.SavedState${}</ID>
    <ID>ExplicitItLambdaParameter:PlayerControlView.kt$PlayerControlView${ it -&gt; if (it is ViewGroup) { for (i in 0..it.childCount) { it.getChildAt(i)?.let { child -&gt; child.visibility = if (child.id == id) View.VISIBLE else View.GONE } } } }</ID>
    <ID>ExpressionBodySyntax:ActivationRule.kt$ActivationRule.CREATOR$return arrayOfNulls(size)</ID>
    <ID>ExpressionBodySyntax:ActivationRule.kt$ActivationRule.CREATOR$return values()[parcel.readInt()]</ID>
    <ID>ExpressionBodySyntax:AddPhoneActivity.kt$AddPhoneActivity$return R.layout.activity_add_phone</ID>
    <ID>ExpressionBodySyntax:AddPhoneActivity.kt$AddPhoneActivity$return true</ID>
    <ID>ExpressionBodySyntax:AddPhoneFragment.kt$AddPhoneFragment$return inflater.inflate(R.layout.add_phone_fragment, container, false)</ID>
    <ID>ExpressionBodySyntax:AddPhoneFragment.kt$AddPhoneFragment$return inflater.inflate(R.layout.fragment_add_phone, container, false)</ID>
    <ID>ExpressionBodySyntax:AddPhoneFragment.kt$AddPhoneFragment$return keyboardView.delegateKey(keyCode, event)</ID>
    <ID>ExpressionBodySyntax:AddPhoneFragment.kt$AddPhoneFragment.Companion$return newInstance(false, phone)</ID>
    <ID>ExpressionBodySyntax:AddPhoneFragment.kt$AddPhoneFragment.Companion$return newInstance(true, phone)</ID>
    <ID>ExpressionBodySyntax:AddPhoneResultDialog.kt$AddPhoneResultDialog$return inflater.inflate(R.layout.add_phone_result_dialog, container, false)</ID>
    <ID>ExpressionBodySyntax:AnalyticsModule.kt$AnalyticsModule$return AnalyticsCompat()</ID>
    <ID>ExpressionBodySyntax:AnalyticsModule.kt$AnalyticsModule$return KollectorAnalytics(context, client, config, moshi, deviceInfo)</ID>
    <ID>ExpressionBodySyntax:AppModule.kt$AppModule$return ToolsConfig.createConfig(context)</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return audioTracks.indexOfFirst { it.channels == AudioTrackChannel.FIVE_POINT_ONE.value } &gt;= 0</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return audioTracks.indexOfFirst { it.language != ContentLanguage.RUS.value } &gt;= 0</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return audioTracks.indexOfFirst { it.mimeType == MimeType.AUDIO_EAC3.value } &gt;= 0</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return audioTracks.indexOfFirst { it.mimeType == MimeType.AUDIO_EAC3_ATMOS.value } &gt;= 0</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return filter { it.licenseId.isNotBlank() &amp;&amp; (liveContentType == null || it.liveContentType == liveContentType) }.maxBy { it.width }</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return filter { it.licenseId.isNotBlank() }.maxBy { it.width }</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return firstOrNull { it.language == AudioTrackModel.LANGUAGE_RUS } ?: firstOrNull()</ID>
    <ID>ExpressionBodySyntax:AssetModel.kt$return subtitles.isNotEmpty()</ID>
    <ID>ExpressionBodySyntax:BaseScreenApiReLoginInterceptor.kt$BaseScreenApiReLoginInterceptor$return statusResponse?.isAuthErrorStatus() ?: false</ID>
    <ID>ExpressionBodySyntax:BillingAccountFragment.kt$BillingAccountFragment$return inflater.inflate(R.layout.fragment_billing_account, container, false)</ID>
    <ID>ExpressionBodySyntax:BundleSubscriptionFragment.kt$BundleSubscriptionFragment$return inflater.inflate(R.layout.fragment_bundle_subscription, container, false)</ID>
    <ID>ExpressionBodySyntax:CalendarAdapter.kt$CalendarAdapter$return calendarItems.size</ID>
    <ID>ExpressionBodySyntax:CalendarAdapter.kt$CalendarAdapter$return calendarItems[position]</ID>
    <ID>ExpressionBodySyntax:CalendarAdapterDataManager.kt$CalendarAdapterDataManager$return calendarAdapter.findDatePosition(date)</ID>
    <ID>ExpressionBodySyntax:CalendarAdapterDataManager.kt$CalendarAdapterDataManager$return calendarAdapter.getDatesRange(dateFrom = dateFrom, dateTo = dateTo)</ID>
    <ID>ExpressionBodySyntax:CalendarDate.kt$CalendarDate$return "$dayOfMonth/${month.inc()}/$year"</ID>
    <ID>ExpressionBodySyntax:CalendarDate.kt$CalendarDate$return this &gt;= dateFrom &amp;&amp; this &lt;= dateTo</ID>
    <ID>ExpressionBodySyntax:CalendarView.kt$CalendarView.DefaultDateInfoProvider$return dateSelectionFilter?.invoke(date) ?: true</ID>
    <ID>ExpressionBodySyntax:CalendarView.kt$CalendarView.DefaultDateInfoProvider$return minMaxDatesRange.isDateOutOfRange(date)</ID>
    <ID>ExpressionBodySyntax:CardsCarouselAdapter.kt$CardsCarouselAdapter$return position.toLong()</ID>
    <ID>ExpressionBodySyntax:CategoryFragment.kt$CategoryFragment$return inflater.inflate(R.layout.fragment_category, container, false)</ID>
    <ID>ExpressionBodySyntax:CenterSmoothScroller.kt$CenterSmoothScroller$return boxStart + (boxEnd - boxStart) / 2 - (viewStart + (viewEnd - viewStart) / 2)</ID>
    <ID>ExpressionBodySyntax:CenterSmoothScroller.kt$CenterSmoothScroller$return getMsPerInch() / displayMetrics.densityDpi</ID>
    <ID>ExpressionBodySyntax:CheckCodeFragment.kt$CheckCodeFragment$return inflater.inflate(R.layout.fragment_check_code, container, false)</ID>
    <ID>ExpressionBodySyntax:CheckCodeFragment.kt$CheckCodeFragment$return keyboardView.delegateKey(keyCode, event)</ID>
    <ID>ExpressionBodySyntax:CheckCodeFragment.kt$CheckCodeFragment.Companion$return CheckCodeFragment().apply { arguments = bundleOf(KEY_PHONE to phone, KEY_FOR_SPORT to isForSport) }</ID>
    <ID>ExpressionBodySyntax:CirclePagerIndicator.kt$CirclePageIndicator.SavedState.Companion.&lt;no name provided&gt;$return SavedState(`in`)</ID>
    <ID>ExpressionBodySyntax:CirclePagerIndicator.kt$CirclePageIndicator.SavedState.Companion.&lt;no name provided&gt;$return arrayOfNulls(size)</ID>
    <ID>ExpressionBodySyntax:CollectionCoverTransformation.kt$CollectionCoverTransformation$return "CollectionCoverTransformation"</ID>
    <ID>ExpressionBodySyntax:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter$return focusedMap[rail]</ID>
    <ID>ExpressionBodySyntax:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter$return getFocusedColumn(selectedPosition)</ID>
    <ID>ExpressionBodySyntax:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter$return position.toLong()</ID>
    <ID>ExpressionBodySyntax:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter.Companion$return rootList.layoutManager?.findViewByPosition(rail)?.findViewById(R.id.cardsView)</ID>
    <ID>ExpressionBodySyntax:CollectionsCarouselLayoutManager.kt$CollectionsCarouselLayoutManager$return false</ID>
    <ID>ExpressionBodySyntax:CollectionsCarouselLayoutManager.kt$CollectionsCarouselLayoutManager$return rootList.layoutManager?.findViewByPosition(pos)?.findViewById(R.id.cardsView)</ID>
    <ID>ExpressionBodySyntax:CommandJobService.kt$CommandJobService$return false</ID>
    <ID>ExpressionBodySyntax:CommandServiceManager.kt$CommandServiceManager$return addCommand(command, receiver, receiver)</ID>
    <ID>ExpressionBodySyntax:CommonErrorDialogFragment.kt$CommonErrorDialogFragment$return LayoutInflater.from(context).inflate(R.layout.dialog_common_error, container, false)</ID>
    <ID>ExpressionBodySyntax:CommonErrorDialogFragment.kt$CommonErrorDialogFragment$return arguments?.getInt(KEY_REQUEST_CODE)?.takeIf { it &gt; 0 }</ID>
    <ID>ExpressionBodySyntax:CommonErrorDialogFragment.kt$CommonErrorDialogFragment$return arguments?.getString(KEY_CUSTOM_DESCRIPTION)?.takeIf { it.isNotBlank() }</ID>
    <ID>ExpressionBodySyntax:CommonErrorDialogFragment.kt$CommonErrorDialogFragment$return arguments?.getString(KEY_CUSTOM_TITLE)?.takeIf { it.isNotBlank() }</ID>
    <ID>ExpressionBodySyntax:CommonErrorDialogFragment.kt$CommonErrorDialogFragment$return arguments?.getString(KEY_ERROR_CODE)?.takeIf { it.isNotBlank() }</ID>
    <ID>ExpressionBodySyntax:ConfigModel.kt$return callCenterPhone["ru"]?.replace(" ", "")</ID>
    <ID>ExpressionBodySyntax:ConfirmPhoneFragment.kt$ConfirmPhoneFragment$return inflater.inflate(R.layout.confirm_phone_fragment, container, false)</ID>
    <ID>ExpressionBodySyntax:ConfirmationDialog.kt$ConfirmationDialog$return arguments?.getStringOrNull(KEY_CANCEL_STRING)</ID>
    <ID>ExpressionBodySyntax:ConfirmationDialog.kt$ConfirmationDialog$return arguments?.getStringOrNull(KEY_CONFIRM_STRING)</ID>
    <ID>ExpressionBodySyntax:ConfirmationDialog.kt$ConfirmationDialog$return arguments?.getStringOrNull(KEY_MESSAGE_STRING)</ID>
    <ID>ExpressionBodySyntax:ConfirmationDialog.kt$ConfirmationDialog$return arguments?.getStringOrNull(KEY_TITLE_STRING)</ID>
    <ID>ExpressionBodySyntax:ConfirmationDialog.kt$ConfirmationDialog$return inflater.inflate(R.layout.dialog_confirmation, container, false)</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpValue, resources.displayMetrics)</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spValue, resources.displayMetrics)</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return getSystemService(Context.ALARM_SERVICE) as AlarmManager</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return getSystemService(Context.JOB_SCHEDULER_SERVICE) as JobScheduler</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return getSystemService(IntentService.NOTIFICATION_SERVICE) as NotificationManager</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return withDefaultLocale("ru", "RU")</ID>
    <ID>ExpressionBodySyntax:ContextExtension.kt$return x &gt;= point.x &amp;&amp; y &gt;= point.y</ID>
    <ID>ExpressionBodySyntax:ContextExtensions.kt$return packageInfo()?.versionCode ?: 0</ID>
    <ID>ExpressionBodySyntax:CustomControlDispatcher.kt$CustomControlDispatcher$return super.dispatchSetPlayWhenReady(player, false)</ID>
    <ID>ExpressionBodySyntax:CustomControlDispatcher.kt$CustomControlDispatcher$return super.dispatchSetPlayWhenReady(player, true)</ID>
    <ID>ExpressionBodySyntax:CustomLoadControl.kt$CustomLoadControl$return 0</ID>
    <ID>ExpressionBodySyntax:CustomLoadControl.kt$CustomLoadControl$return allocator</ID>
    <ID>ExpressionBodySyntax:CustomLoadControl.kt$CustomLoadControl$return false</ID>
    <ID>ExpressionBodySyntax:CustomPlayerView.kt$CustomPlayerView$return useController &amp;&amp; controller?.dispatchMediaKeyEvent(event) == true</ID>
    <ID>ExpressionBodySyntax:CustomPlayerView.kt$CustomPlayerView.&lt;no name provided&gt;$return false</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return list?.joinToString(",").orEmpty()</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(AssetListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(AssetListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(BasicCoverElementHolderResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(BasicCoverElementHolderResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(BillingAccountListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(BillingAccountListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(CountryListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(CountryListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(CoverElementHolderResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(CoverElementHolderResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(CreditCardResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(CreditCardResponse::class.java).toJson(creditCard)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(DeviceItemsResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(DeviceItemsResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(ElementRelationListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(ElementRelationListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(GameStatus::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(GameStatus::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(GenreListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(GenreListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(LicenseListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(LicenseListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(LiveContentType::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(LiveContentType::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(OfferListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(OfferListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(OfferResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(OfferResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(PaymentMethodListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(PaymentMethodListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(PersonListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(PersonListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(ProductListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(ProductListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(QiwiWalletModel::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(QiwiWalletModel::class.java).toJson(qiwiWallet)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(StudioListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(StudioListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(TrailerListResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(TrailerListResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(UserPreferencesModel::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(UserPreferencesModel::class.java).toJson(preferences)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(UserPreferencesResponse::class.java).fromJson(json)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return moshi.adapter(UserPreferencesResponse::class.java).toJson(response)</ID>
    <ID>ExpressionBodySyntax:DataConverter.kt$DataConverter$return str.split(",")</ID>
    <ID>ExpressionBodySyntax:DatabaseModule.kt$DatabaseModule$return MainDatabase.getOrCreateDatabase(context)</ID>
    <ID>ExpressionBodySyntax:DateExtension.kt$return abs(time - anotherTime) &lt; MILLISECONDS_IN_DAY</ID>
    <ID>ExpressionBodySyntax:DateExtension.kt$return abs(time - anotherTime) &lt; MILLISECONDS_IN_HOUR</ID>
    <ID>ExpressionBodySyntax:DateExtension.kt$return abs(time - anotherTime) &lt; MILLISECONDS_IN_MINUTE</ID>
    <ID>ExpressionBodySyntax:DebugToolsConfig.kt$DebugToolsConfig$return DevMenuActivity.newInstance(context)</ID>
    <ID>ExpressionBodySyntax:DeviceConnectionInteractor.kt$DeviceConnectionInteractor$return screenApi.getPin(clientType).map { PinModel(it.pinInfo.pin) }</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return Build.HOST</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return Build.VERSION.SDK_INT</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return DEVICE_CLIENT_ID</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return DEVICE_ID</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return SystemUtils.sHttpUserAgent</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return deviceExtras</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return macAddress</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return moshi.adapter(DeviceExtrasModel::class.java).toJson(deviceExtras)</ID>
    <ID>ExpressionBodySyntax:DeviceInfoProvider.kt$DeviceInfoProvider$return radioVersion ?: UNKNOWN_RESPONSE</ID>
    <ID>ExpressionBodySyntax:DigitsInputCompoundView.kt$DigitsInputCompoundView$return cellPosIdMap[pos]?.let { findViewById&lt;TextView&gt;(it)?.text?.toString() }</ID>
    <ID>ExpressionBodySyntax:ElementDao.kt$ElementDao$return ElementTable.RelationColumns.values().find { it.value == field } != null</ID>
    <ID>ExpressionBodySyntax:ElementResponse.kt$return activationRules?.contains(ActivationRule.EPL_2019_RU_PHONE) ?: false</ID>
    <ID>ExpressionBodySyntax:ElementResponse.kt$return hasEpl2019RuPhoneActivationRule() &amp;&amp; (subscriptionActivateDate == null || subscriptionActivateDate == 0L)</ID>
    <ID>ExpressionBodySyntax:EnterDeviceCodeFragment.kt$EnterDeviceCodeFragment$return inflater.inflate(R.layout.fragment_enter_device_code, container, false)</ID>
    <ID>ExpressionBodySyntax:EnterDeviceCodeFragment.kt$EnterDeviceCodeFragment$return keyboardView.delegateKey(keyCode, event)</ID>
    <ID>ExpressionBodySyntax:EnterDeviceCodeInteractor.kt$EnterDeviceCodeInteractor$return screenApi.mergeProfile(clientType, code, AuthTokenType.PIN.value)</ID>
    <ID>ExpressionBodySyntax:EnumExtension.kt$return enumValues&lt;T&gt;().find { it.name == name }</ID>
    <ID>ExpressionBodySyntax:EnumExtension.kt$return enumValues&lt;T&gt;().find { it.name == name } ?: defalut</ID>
    <ID>ExpressionBodySyntax:EpisodeModel.kt$return licenses.find { it.id.isNotBlank() }</ID>
    <ID>ExpressionBodySyntax:EpisodeModel.kt$return res.getString(R.string.episode_duration).format(TimeUnit.MILLISECONDS.toMinutes(duration))</ID>
    <ID>ExpressionBodySyntax:EpisodeModel.kt$return res.getString(R.string.episode_title).format(number, title)</ID>
    <ID>ExpressionBodySyntax:FailedReason.kt$FailedReason.CREATOR$return arrayOfNulls(size)</ID>
    <ID>ExpressionBodySyntax:FailedReason.kt$FailedReason.CREATOR$return values()[parcel.readInt()]</ID>
    <ID>ExpressionBodySyntax:FragmentExtension.kt$return arguments?.getInt(KEY_FULL_SCREEN_DIALOG_THEME, R.style.FullScreenDialogStyle_BlackTransparent) ?: R.style.FullScreenDialogStyle_BlackTransparent</ID>
    <ID>ExpressionBodySyntax:FragmentExtension.kt$return buildUrl(presenter.getAnalyticScreen(), presenter.selectedCategory?.id)</ID>
    <ID>ExpressionBodySyntax:FragmentExtension.kt$return javaClass.canonicalName.orEmpty()</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return Config.sStaticImagesServerUrl + resources.getString(R.string.fte_1_image)</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return Config.sStaticImagesServerUrl + resources.getString(R.string.fte_2_image)</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return ElementUtils.findOffer(fteSubs) != null</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return ElementUtils.getSubscriptionCoverUrlBig(deeplinkInfo?.element)</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return ElementUtils.isGift(ElementUtils.getFirstProduct(deeplinkInfo?.element, ConsumptionMode.SUBSCRIPTION))</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return ElementUtils.isSubscriptionPurchased(deeplinkInfo?.element)</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return deeplinkInfo?.element?.let { TxtUtils.formatPrepositionalMovieTypeString(ru.more.play.fte.R.string.fte_moviecard_more, it) }</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return deeplinkInfo?.element?.name</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity$return deeplinkInfo?.element?.releaseType == ElementReleaseType.ANNOUNCE</ID>
    <ID>ExpressionBodySyntax:FteActivity.kt$FteActivity.FtePagerAdapter$return COUNT_OF_PAGES</ID>
    <ID>ExpressionBodySyntax:FteFragment.kt$FteFragment$return inflater.inflate(R.layout.fragment_fte_1, container, false)</ID>
    <ID>ExpressionBodySyntax:FteFragment.kt$FteFragment.Companion$return FteFragment()</ID>
    <ID>ExpressionBodySyntax:FteOfferFragment.kt$FteOfferFragment$return inflater.inflate(R.layout.fragment_fte_3, container, false)</ID>
    <ID>ExpressionBodySyntax:FteSubscriptionFragment.kt$FteSubscriptionFragment$return inflater.inflate(R.layout.fragment_fte_subscription, container, false)</ID>
    <ID>ExpressionBodySyntax:FteSubscriptionFragment.kt$FteSubscriptionFragment.Companion$return FteSubscriptionFragment()</ID>
    <ID>ExpressionBodySyntax:FteSubscriptionFragment.kt$FteSubscriptionFragment.FteSubscriptionInfoAdapter$return SUBSCRIPTION_BONUSES.size</ID>
    <ID>ExpressionBodySyntax:FteView.kt$FteView$return image?.intrinsicHeight ?: IMG_DEFAULT_PIXEL_DIM</ID>
    <ID>ExpressionBodySyntax:FteView.kt$FteView$return image?.intrinsicWidth ?: IMG_DEFAULT_PIXEL_DIM</ID>
    <ID>ExpressionBodySyntax:FullOverlapScrollingBehavior.kt$FullOverlapScrollingBehavior$return SaveState(super.onSaveInstanceState(parent, child), appBarTop)</ID>
    <ID>ExpressionBodySyntax:FullOverlapScrollingBehavior.kt$FullOverlapScrollingBehavior$return dependency is AppBarLayout</ID>
    <ID>ExpressionBodySyntax:GPUFilterTransformation.kt$GPUFilterTransformation$return filter</ID>
    <ID>ExpressionBodySyntax:GPUFilterTransformation.kt$GPUFilterTransformation$return javaClass.simpleName</ID>
    <ID>ExpressionBodySyntax:Game.kt$Game$return allLiveContentTypes.contains(LiveContentType.FULL_GAME)</ID>
    <ID>ExpressionBodySyntax:Game.kt$Game$return allLiveContentTypes.contains(LiveContentType.LIVE_GAME)</ID>
    <ID>ExpressionBodySyntax:Game.kt$Game$return allLiveContentTypes.contains(LiveContentType.PREVIEW_SHORT)</ID>
    <ID>ExpressionBodySyntax:Game.kt$Game$return gameStatus != GameStatus.NOT_STARTED &amp;&amp; gameStatus != GameStatus.CANCELED &amp;&amp; gameStatus != GameStatus.POSTPONED</ID>
    <ID>ExpressionBodySyntax:Game.kt$Game$return hasFullGame() &amp;&amp; catchupEndDate != null &amp;&amp; catchupEndDate &gt; serverTime</ID>
    <ID>ExpressionBodySyntax:Game.kt$Game$return programs?.firstOrNull { it.liveContentType == liveContentType }</ID>
    <ID>ExpressionBodySyntax:GameCollectionAdapter.kt$OneColumnGameCollectionAdapter$return OneSmallGameViewHolder(parent.layoutInflater().inflateAs(R.layout.layout_one_small_game_list_item, parent))</ID>
    <ID>ExpressionBodySyntax:GameCollectionAdapter.kt$TwoColumnGameCollectionAdapter$return TwoSmallGameViewHolder(parent.layoutInflater().inflateAs(R.layout.layout_two_small_games_list_item, parent))</ID>
    <ID>ExpressionBodySyntax:GameExtensions.kt$return getLiveContentTypesString(res, listOf(LiveContentType.LIVE_GAME), "")</ID>
    <ID>ExpressionBodySyntax:GameExtensions.kt$return getLiveContentTypesString(res, listOf(LiveContentType.LIVE_GAME, LiveContentType.FULL_GAME), res.getString(R.string.and_separator))</ID>
    <ID>ExpressionBodySyntax:InformationUiModel.kt$return InformationUiModel(ITEM_TYPE_GENRE, genre.id, genre.name, genre.alias)</ID>
    <ID>ExpressionBodySyntax:InformationUiModel.kt$return InformationUiModel(ITEM_TYPE_PERSON, person.id, person.name)</ID>
    <ID>ExpressionBodySyntax:InitModule.kt$InitModule$return SharedPrefsPreferences(PreferenceManager.getDefaultSharedPreferences(context))</ID>
    <ID>ExpressionBodySyntax:InitModule.kt$InitModule$return prefs.getConfig() ?: ConfigModel.defaultConfig</ID>
    <ID>ExpressionBodySyntax:IntExtension.kt$return toInt().daysAsString(context, monthAsDays, hoursAsDay)</ID>
    <ID>ExpressionBodySyntax:KeyboardModel.kt$return keys.find { it.id == keyId }</ID>
    <ID>ExpressionBodySyntax:KeyboardModule.kt$KeyboardModule$return KeyboardProvider(assetManager, moshi)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_AUXILIARY)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_DIGITS)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_DONE)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_EDITABLE_DIGITS)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_ENG_LOWERCASE)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_ENG_UPPERCASE)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_RUS_LOWERCASE)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(KEYBOARD_JSON_RUS_UPPERCASE)</ID>
    <ID>ExpressionBodySyntax:KeyboardProvider.kt$KeyboardProvider$return readKeyboard(reload)</ID>
    <ID>ExpressionBodySyntax:KollectorEventModels.kt$KollectorEventField$return "type = $type, value = $value"</ID>
    <ID>ExpressionBodySyntax:KollectorEventsJsonAdapter.kt$KollectorEventsJsonAdapter$return null</ID>
    <ID>ExpressionBodySyntax:KollectorLoggerManager.kt$KollectorLoggerManager$return moshi.adapter(KollectorEvent::class.java).fromJson(objJson)</ID>
    <ID>ExpressionBodySyntax:KollectorLoggerManager.kt$KollectorLoggerManager$return moshi.adapter(KollectorEvent::class.java).toJson(obj)</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return buildUrl(COLLECTION, alias)</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return buildUrl(GENRE, id?.toLowerCase())</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return buildUrl(SUBSCRIPTION, alias)</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return buildUrl(SUBSCRIPTIONS, alias)</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return buildUrl(type?.toLowerCase(), alias, "tree", id)</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return if (query.isNullOrEmpty()) SEARCH else buildUrl("$SEARCH?q=$query")</ID>
    <ID>ExpressionBodySyntax:KollectorUrls.kt$KollectorUrls$return parts.joinToString(separator = "/") { it ?: "null" }</ID>
    <ID>ExpressionBodySyntax:LauncherActivity.kt$LauncherActivity$return fragment is VideoInfoFragment || fragment is SeasonListFragment</ID>
    <ID>ExpressionBodySyntax:LauncherActivity.kt$LauncherActivity$return supportFragmentManager.findFragmentById(R.id.fragmentContainerView)</ID>
    <ID>ExpressionBodySyntax:LicenseModel.kt$return productType == ConsumptionMode.RENT.value</ID>
    <ID>ExpressionBodySyntax:LinkedQiwiFragment.kt$LinkedQiwiFragment$return inflater.inflate(R.layout.fragment_linked_qiwi, container, false)</ID>
    <ID>ExpressionBodySyntax:LiveContentType.kt$LiveContentType.CREATOR$return arrayOfNulls(size)</ID>
    <ID>ExpressionBodySyntax:LiveContentType.kt$LiveContentType.CREATOR$return values()[parcel.readInt()]</ID>
    <ID>ExpressionBodySyntax:LoginProvider.kt$LoginProvider$return serviceInfo?.notifications?.items ?: emptyList()</ID>
    <ID>ExpressionBodySyntax:LogoutFragment.kt$LogoutFragment$return inflater.inflate(R.layout.fragment_logout, container, false)</ID>
    <ID>ExpressionBodySyntax:MainActivity.kt$MainActivity$return supportFragmentManager.findFragmentById(R.id.fragmentContainerView)</ID>
    <ID>ExpressionBodySyntax:MainApplication.kt$MainApplication$return InitModule()</ID>
    <ID>ExpressionBodySyntax:MainApplication.kt$MainApplication$return if (::appComponent.isInitialized) appComponent.provideConfig() else ConfigModel.defaultConfig</ID>
    <ID>ExpressionBodySyntax:MainApplicationPresenter.kt$MainApplicationPresenter$return !(prefs.getPersistenceToken().isNullOrEmpty() || prefs.getSessionToken().isNullOrEmpty())</ID>
    <ID>ExpressionBodySyntax:MainMenuNavigationHolder.kt$MainMenuNavigationHolder$return listOf(MenuNavigationModel("sport", "Sport"))</ID>
    <ID>ExpressionBodySyntax:MainSettingItemFragment.kt$MainSettingItemFragment$return inflater.inflate(R.layout.fragment_main_setting_item, container, false)</ID>
    <ID>ExpressionBodySyntax:MaskedPhoneTextWatcher.kt$return this.replace("\\D+".toRegex(), "")</ID>
    <ID>ExpressionBodySyntax:Media.kt$return !customData.has(MediaInfoFactory.LICENSE_URL_TAG) || customData.getString(MediaInfoFactory.LICENSE_URL_TAG).isNullOrEmpty()</ID>
    <ID>ExpressionBodySyntax:Media.kt$return if(customData.has(MediaInfoFactory.LIVE_CONTENT_TYPE_TAG)) LiveContentType.valueOf(customData.getString(MediaInfoFactory.LIVE_CONTENT_TYPE_TAG)) else null</ID>
    <ID>ExpressionBodySyntax:Media.kt$return if(customData.has(MediaInfoFactory.LONG_TITLE_TAG)) customData.getString(MediaInfoFactory.LONG_TITLE_TAG) else null</ID>
    <ID>ExpressionBodySyntax:Media.kt$return if(customData.has(MediaInfoFactory.SHORT_TITLE_TAG)) customData.getString(MediaInfoFactory.SHORT_TITLE_TAG) else null</ID>
    <ID>ExpressionBodySyntax:MenuNavigationModel.kt$return MenuNavigationModel(item.element.id ?: "", item.element.name.orEmpty())</ID>
    <ID>ExpressionBodySyntax:MobileMainApplication.kt$MobileMainApplication$return activity is StartActivity</ID>
    <ID>ExpressionBodySyntax:MobileSportTournamentFragment.kt$MobileSportTournamentFragment$return inflater.inflate(R.layout.fragment_sport_tournament, container, false)</ID>
    <ID>ExpressionBodySyntax:ModelExtension.kt$return "$balance ${getCurrencyName(res)}"</ID>
    <ID>ExpressionBodySyntax:ModelExtension.kt$return PlaybackAudioTrackModel(id, name, language.capitalize())</ID>
    <ID>ExpressionBodySyntax:ModelExtension.kt$return PlaybackTextTrackModel(id, url, forced, language, name, language.capitalize())</ID>
    <ID>ExpressionBodySyntax:ModelExtension.kt$return find { it.type == type.value }</ID>
    <ID>ExpressionBodySyntax:ModelExtension.kt$return findMethod(PaymentMethodType.CHRONOPAY_LINKED_CARD)</ID>
    <ID>ExpressionBodySyntax:ModelExtension.kt$return findMethod(PaymentMethodType.PLAY)</ID>
    <ID>ExpressionBodySyntax:ModelExtensions.kt$return KollectorElement(id, type, alias)</ID>
    <ID>ExpressionBodySyntax:ModelExtensions.kt$return KollectorElement(id, type, null)</ID>
    <ID>ExpressionBodySyntax:MoviePromoCodeActivatedDialogFragment.kt$MoviePromoCodeActivatedDialogFragment$return inflater.inflate(R.layout.dialog_promocode_activated, container, false)</ID>
    <ID>ExpressionBodySyntax:MultipartSeriesModel.kt$return episodes.find { it.id == currentEpisodeId }</ID>
    <ID>ExpressionBodySyntax:MultipartSeriesModel.kt$return getCurrentEpisode() ?: episodes.firstOrNull { it.isPurchased }</ID>
    <ID>ExpressionBodySyntax:MyMoviesFragment.kt$MyMoviesFragment$return inflater.inflate(R.layout.fragment_my_okko, container, false)</ID>
    <ID>ExpressionBodySyntax:MyMoviesLastWatchingFragment.kt$MyMoviesLastWatchingFragment$return inflater.inflate(R.layout.fragment_last_watching, container, false)</ID>
    <ID>ExpressionBodySyntax:NavigationItemModel.kt$return NavigationItemModel(menuNavigation.id, SpannableString(menuNavigation.title ?: ""))</ID>
    <ID>ExpressionBodySyntax:NavigationItemsAdapter.kt$NavigationItemsAdapter.NavigationDiffUtilCallback$return oldItems[oldItemPosition] == newItems[newItemPosition]</ID>
    <ID>ExpressionBodySyntax:NavigationItemsAdapter.kt$NavigationItemsAdapter.NavigationDiffUtilCallback$return oldItems[oldItemPosition].item.id == newItems[newItemPosition].item.id</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return ApmApiClientFactory(logInterceptors)</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return LoginApiClientFactory(ScreenApiStatusInterceptor(prefs, moshi, false), logInterceptors)</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return LoginApiClientFactory(ScreenApiStatusInterceptor(prefs, moshi, false, listener), logInterceptors)</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return LoginProvider(clientType, prefs, database, deviceInfo, loginApi, apmApi, AnalyticsLoginListener(analytics, prefs))</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return LoginProvider(clientType, prefs, database, deviceInfo, loginApi, apmApi, AnalyticsLoginListener(analytics, prefs), false)</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return MoshiConverterFactory.create(moshi, AnalyticsJsonConverterListener(analytics))</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return ScreenApiClientFactory(logInterceptors, errorHandlerInterceptor, AnalyticsInterceptor(analytics))</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return ScreenApiReLoginInterceptor(prefs, moshi, loginable)</ID>
    <ID>ExpressionBodySyntax:NetworkModule.kt$NetworkModule$return UserLoggerSwitcher(logger)</ID>
    <ID>ExpressionBodySyntax:NotificationInteractor.kt$NotificationInteractor$return screenApi.consumeNotification(clientType, id)</ID>
    <ID>ExpressionBodySyntax:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter$return currentNotification?.pages?.size ?: 0</ID>
    <ID>ExpressionBodySyntax:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter$return view === obj</ID>
    <ID>ExpressionBodySyntax:NullableDatesRange.kt$NullableDatesRange$return (dateFrom != null &amp;&amp; date &lt; dateFrom) || (dateTo != null &amp;&amp; date &gt; dateTo)</ID>
    <ID>ExpressionBodySyntax:OfferActivatedDialog.kt$OfferActivatedDialog$return inflater.inflate(R.layout.activated_movie_code_fragment, container, false)</ID>
    <ID>ExpressionBodySyntax:OfferModel.kt$return TimeUnit.MILLISECONDS.toDays(duration)</ID>
    <ID>ExpressionBodySyntax:PageIndicatorView.kt$PageIndicatorView$return (height - paddingTop - paddingBottom) / 2 - indicatorHeight / 2</ID>
    <ID>ExpressionBodySyntax:PageIndicatorView.kt$PageIndicatorView$return if (pageIndex &lt; indicators.size &amp;&amp; pageIndex &gt;= 0) indicators[pageIndex] else null</ID>
    <ID>ExpressionBodySyntax:ParcelExtension.kt$return readByte() == 1.toByte()</ID>
    <ID>ExpressionBodySyntax:PaymentMethodListFragment.kt$PaymentMethodListFragment$return inflater.inflate(R.layout.fragment_payment_method_list, container, false)</ID>
    <ID>ExpressionBodySyntax:PaymentMethodsFragment.kt$PaymentMethodsFragment$return inflater.inflate(R.layout.fragment_payment_methods, container, false)</ID>
    <ID>ExpressionBodySyntax:PhoneAddedDialogFragment.kt$PhoneAddedDialogFragment$return inflater.inflate(R.layout.dialog_phone_added, container, false)</ID>
    <ID>ExpressionBodySyntax:PhoneCodeFragment.kt$PhoneCodeFragment$return inflater.inflate(R.layout.fragment_phone_code, container, false)</ID>
    <ID>ExpressionBodySyntax:PhoneCodePresenter.kt$PhoneCodePresenter$return code.length == CODE_LENGTH</ID>
    <ID>ExpressionBodySyntax:PhoneErrorFragment.kt$PhoneErrorFragment$return inflater.inflate(R.layout.fragment_phone_error, container, false)</ID>
    <ID>ExpressionBodySyntax:PhoneFormatter.kt$PhoneFormatter$return "+${ruFormat(phone, " ")}"</ID>
    <ID>ExpressionBodySyntax:PhoneFormatter.kt$PhoneFormatter$return ruFormat(phone, "-")</ID>
    <ID>ExpressionBodySyntax:PhoneFragment.kt$PhoneFragment$return inflater.inflate(R.layout.fragment_phone, container, false)</ID>
    <ID>ExpressionBodySyntax:PhoneMaskTextWatcher.kt$PhoneMaskTextWatcher$return TextUtils.isEmpty(editText.text) || editText.text.toString() == MOBILE_PATTERN_DEFAULT</ID>
    <ID>ExpressionBodySyntax:PhoneModule.kt$PhoneModule$return PhoneParserUtils(assetManager, moshi)</ID>
    <ID>ExpressionBodySyntax:PhoneParserUtils.kt$PhoneParserUtils$return PHONE_NUMBER_DEFAULT</ID>
    <ID>ExpressionBodySyntax:PhoneParserUtils.kt$PhoneParserUtils$return PHONE_NUMBER_DEFAULT_REMOVE.plus(phoneNumber)</ID>
    <ID>ExpressionBodySyntax:PhoneParserUtils.kt$PhoneParserUtils$return phoneNumber.length &gt; PHONE_NUMBER_MIN_SIZE</ID>
    <ID>ExpressionBodySyntax:PhoneParserUtils.kt$PhoneParserUtils$return phoneNumber.removePrefix(PHONE_NUMBER_DEFAULT_REMOVE)</ID>
    <ID>ExpressionBodySyntax:PhonePurchasingFragment.kt$PhonePurchasingFragment$return inflater.inflate(R.layout.fragment_phone_purchasing, container, false)</ID>
    <ID>ExpressionBodySyntax:PlayPauseControlDispatcher.kt$PlayPauseControlDispatcher$return super.dispatchSetPlayWhenReady(player, false)</ID>
    <ID>ExpressionBodySyntax:PlayPauseControlDispatcher.kt$PlayPauseControlDispatcher$return super.dispatchSetPlayWhenReady(player, true)</ID>
    <ID>ExpressionBodySyntax:PlaybackErrorCode.kt$PlaybackErrorCode.Companion$return enumValueOfOrDefault(value, ERROR_UNKNOWN)</ID>
    <ID>ExpressionBodySyntax:PlaybackExtension.kt$return position &gt;= duration - PlayerConfig.LIVE_POSITION_RANGE</ID>
    <ID>ExpressionBodySyntax:PlayerControlView.kt$PlayerControlView$return dispatchMediaKeyEvent(event) || super.dispatchKeyEvent(event)</ID>
    <ID>ExpressionBodySyntax:PlayerControlView.kt$PlayerControlView.Companion$return a.getInt(R.styleable.PlayerControlView_repeat_toggle_modes, repeatToggleModes)</ID>
    <ID>ExpressionBodySyntax:PlayerFragment.kt$PlayerFragment$return inflater.inflate(R.layout.fragment_player, container, false)</ID>
    <ID>ExpressionBodySyntax:PlayerHolder.kt$PlayerHolder$return PlaybackModel.from(url, PlayableResponse.from(payload))</ID>
    <ID>ExpressionBodySyntax:PlayerHolder.kt$PlayerHolder$return createPlayerAndPrepare(context, getPlayback(url, payload), options)</ID>
    <ID>ExpressionBodySyntax:PlayerHolder.kt$PlayerHolder$return player</ID>
    <ID>ExpressionBodySyntax:PlayerHolder.kt$PlayerHolder$return player ?: throw PlayerNotFoundException()</ID>
    <ID>ExpressionBodySyntax:PlayerHolder.kt$PlayerHolder$return trackSelector</ID>
    <ID>ExpressionBodySyntax:PlayerManagerHolder.kt$PlayerManagerHolder$return manager ?: throw PlayerManagerNotFoundException()</ID>
    <ID>ExpressionBodySyntax:PlayerManagerHolder.kt$PlayerManagerHolder$return trailerManager ?: throw PlayerManagerNotFoundException()</ID>
    <ID>ExpressionBodySyntax:PlayerModule.kt$PlayerModule$return DeviceInfoProvider(context, moshi)</ID>
    <ID>ExpressionBodySyntax:ProductExtension.kt$return this?.price?.value ?: 0</ID>
    <ID>ExpressionBodySyntax:ProductListAdapter.kt$ProductListAdapter$return ProductViewHolder(parent.layoutInflater().inflateAs(R.layout.layout_product_list_item, parent), listener)</ID>
    <ID>ExpressionBodySyntax:ProductListFragment.kt$ProductListFragment$return inflater.inflate(R.layout.fragment_product_list, container, false)</ID>
    <ID>ExpressionBodySyntax:ProductListFragment.kt$ProductListFragment.Companion$return ProductListFragment().apply { arguments = args }</ID>
    <ID>ExpressionBodySyntax:ProductListInteractor.kt$ProductListInteractor$return api.preparePurchase(clientType, elementId, elementType)</ID>
    <ID>ExpressionBodySyntax:ProductModel.kt$return QualityConstants.getQualityTitle(res, getMaxQuality())</ID>
    <ID>ExpressionBodySyntax:ProductModel.kt$return count { it.type == ConsumptionMode.DTO.value }</ID>
    <ID>ExpressionBodySyntax:ProductModel.kt$return paymentMethods.any { it.type == PaymentMethodType.CHRONOPAY_LINKED_CARD.value }</ID>
    <ID>ExpressionBodySyntax:ProductModel.kt$return paymentMethods.any { it.type == PaymentMethodType.LINKED_QIWI_WALLET.value }</ID>
    <ID>ExpressionBodySyntax:ProductModel.kt$return price == 0</ID>
    <ID>ExpressionBodySyntax:ProductModel.kt$return qualities.any { it == QualityConstants.QUALITY_HDR }</ID>
    <ID>ExpressionBodySyntax:ProgressDialogFragment.kt$ProgressDialogFragment$return inflater.inflate(R.layout.dialog_progress, container, false)</ID>
    <ID>ExpressionBodySyntax:PromoCodeFragment.kt$PromoCodeFragment$return inflater.inflate(R.layout.fragment_promo_code, container, false)</ID>
    <ID>ExpressionBodySyntax:PromoCodeFragment.kt$PromoCodeFragment$return keyboardView.delegateKey(keyCode, event)</ID>
    <ID>ExpressionBodySyntax:PurchaseActivity.kt$PurchaseActivity$return supportFragmentManager.findFragmentByTag(TAG_PRODUCT_LIST) as? ProductListFragment</ID>
    <ID>ExpressionBodySyntax:PurchaseConfirmationFragment.kt$PurchaseConfirmationFragment$return inflater.inflate(R.layout.fragment_purchase_confirmation, container, false)</ID>
    <ID>ExpressionBodySyntax:PurchaseContainerFragment.kt$PurchaseContainerFragment$return childFragmentManager.findFragmentById(R.id.containerView)</ID>
    <ID>ExpressionBodySyntax:PurchaseContainerFragment.kt$PurchaseContainerFragment$return inflater.inflate(R.layout.fragment_purchase_container, container, false)</ID>
    <ID>ExpressionBodySyntax:PurchaseErrorFragment.kt$PurchaseErrorFragment$return inflater.inflate(R.layout.fragment_purchase_error, container, false)</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return PRICE_FORMATTED_TEMPLATE.format(Locale.US, price.toFloat())</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return elementHolder.element?.products?.items?.map { getCreditCard(it.paymentMethods) }?.find { it != null }</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return elementHolder.userInfo?.billingAccounts?.items?.map { BillingAccountModel.from(it) }.orEmpty()</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return getPaymentInfo(null, null, null, amount)</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return getPaymentInfo(video.id, video.type, product.priceCategory, product.price.toFloat())</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return paymentMethods?.items?.find { it.creditCard != null }?.creditCard</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return preparePurchase(video.id, video.type)</ID>
    <ID>ExpressionBodySyntax:PurchaseInteractor.kt$PurchaseInteractor$return topupByLinkedQiwi(product.price)</ID>
    <ID>ExpressionBodySyntax:RecommendationJobService.kt$RecommendationJobService$return false</ID>
    <ID>ExpressionBodySyntax:RecyclerViewExtension.kt$return getChildViewHolder(view).adapterPosition</ID>
    <ID>ExpressionBodySyntax:RecyclerViewExtension.kt$return getPositionForView(view) == getAdapterLastPosition()</ID>
    <ID>ExpressionBodySyntax:RefillAmountFragment.kt$RefillAmountFragment$return inflater.inflate(R.layout.fragment_refill_amount, container, false)</ID>
    <ID>ExpressionBodySyntax:RefillAmountFragment.kt$RefillAmountFragment$return keyboardView.delegateKey(keyCode, event)</ID>
    <ID>ExpressionBodySyntax:RegisterPhoneCodeActivity.kt$RegisterPhoneCodeActivity.Companion$return data?.getParcelableExtra(KEY_EXTRA_NOTIFICATION) as? NotificationResponse</ID>
    <ID>ExpressionBodySyntax:RegistrationCheckCodeFragment.kt$RegistrationCheckCodeFragment$return inflater.inflate(R.layout.fragment_register_check_code, container, false)</ID>
    <ID>ExpressionBodySyntax:RegistrationCheckCodeFragment.kt$RegistrationCheckCodeFragment.Companion$return RegistrationCheckCodeFragment().apply { arguments = bundleOf(KEY_PHONE to phone) }</ID>
    <ID>ExpressionBodySyntax:ReservationListAdapter.kt$ReservationListAdapter$return ElementUtils.getCoverUrlSmall(element)</ID>
    <ID>ExpressionBodySyntax:RoutingModule.kt$RoutingModule$return VideoInfoRouter(deviceInfo, config)</ID>
    <ID>ExpressionBodySyntax:RoutingModule.kt$RoutingModule$return VideoInfoRouter(deviceInfo, configHolder)</ID>
    <ID>ExpressionBodySyntax:RusEngKeyboardView.kt$RusEngKeyboardView$return digitsKeyboardView.delegateKey(keyCode, event)</ID>
    <ID>ExpressionBodySyntax:ScreenApiResponse.kt$return (jsonValue as? Map&lt;*, *&gt;)?.get(field.value) as? Map&lt;*, *&gt;</ID>
    <ID>ExpressionBodySyntax:SearchFragment.kt$SearchFragment$return inflater.inflate(R.layout.fragment_search, container, false)</ID>
    <ID>ExpressionBodySyntax:SeasonListFragment.kt$SeasonListFragment$return inflater.inflate(R.layout.fragment_season_list, container, false)</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return episodes.find { it.id == currentEpisodeId }</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return firstOrNull { it.id == seasonId }</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return getById(seasonId) ?: firstOrNull { it.isPurchased }</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return getCurrentEpisode() ?: episodes.firstOrNull { it.isPurchased }</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return res.getString(R.string.season_episode_count).format(episodes.size)</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return res.getString(R.string.season_episode_title).format(number, episode.number, title)</ID>
    <ID>ExpressionBodySyntax:SeasonModel.kt$return res.getString(R.string.season_season_title).format(number)</ID>
    <ID>ExpressionBodySyntax:SeasonsListAdapter.kt$SeasonsListAdapter$return items.size</ID>
    <ID>ExpressionBodySyntax:SeasonsSeriesFragment.kt$SeasonsSeriesFragment$return inflater.inflate(R.layout.fragment_series, container, false)</ID>
    <ID>ExpressionBodySyntax:SectionedRecyclerViewAdapter.kt$SectionedRecyclerViewAdapter$return sectionsList.get(position) != null</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return ConfigManager.getInstance().configUrl</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return SharedPrefs.getAccessKey()</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return SharedPrefs.getPersistToken()</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return SharedPrefs.getSessionId()</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return SharedPrefs.getUserId()</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return SharedPrefs.isShowScoreAllowed()</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPersistence.kt$SharedPrefsPersistence$return createConfigModel()</ID>
    <ID>ExpressionBodySyntax:SharedPrefsPreferences.kt$SharedPrefsPreferences$return prefs.getString(PREF_CONFIG_URL, null)</ID>
    <ID>ExpressionBodySyntax:SmoothGridLayoutManager.kt$SmoothGridLayoutManager.TopSnappedSmoothScroller$return SCROLL_SPEED_FACTOR / displayMetrics.densityDpi</ID>
    <ID>ExpressionBodySyntax:SmoothGridLayoutManager.kt$SmoothGridLayoutManager.TopSnappedSmoothScroller$return androidx.recyclerview.widget.LinearSmoothScroller.SNAP_TO_START</ID>
    <ID>ExpressionBodySyntax:SmoothGridLayoutManager.kt$SmoothGridLayoutManager.TopSnappedSmoothScroller$return this@SmoothGridLayoutManager.computeScrollVectorForPosition(targetPosition)</ID>
    <ID>ExpressionBodySyntax:SportActivationCodeFragment.kt$SportActivationCodeFragment$return inflater.inflate(R.layout.fragment_sport_activation_code, container, false)</ID>
    <ID>ExpressionBodySyntax:SportActivationInteractor.kt$SportActivationInteractor$return tvApi.setUserPreferences(clientType, JSONObject(mapOf(PREFERENCE_EPL_NOTIFY to true)).toString())</ID>
    <ID>ExpressionBodySyntax:SportActivationPhoneFragment.kt$SportActivationPhoneFragment$return inflater.inflate(R.layout.fragment_sport_activation_phone, container, false)</ID>
    <ID>ExpressionBodySyntax:SportActivationPhoneInteractor.kt$SportActivationPhoneInteractor$return nonAuthScreenApi.sendSmsCode(clientType, phone.toRequestPhone(), true).map { phone }</ID>
    <ID>ExpressionBodySyntax:SportActivationPhoneInteractor.kt$SportActivationPhoneInteractor$return stateObs</ID>
    <ID>ExpressionBodySyntax:SportActivationPhonePresenter.kt$SportActivationPhonePresenter$return phone?.replace("[^0-9]".toRegex(), "") ?: ""</ID>
    <ID>ExpressionBodySyntax:SportCalendarFragment.kt$SportCalendarFragment$return inflater.inflate(R.layout.fragment_sport_calendar, container, false)</ID>
    <ID>ExpressionBodySyntax:SportCollectionFragment.kt$SportCollectionFragment$return inflater.inflate(R.layout.fragment_sport_collection, container, false)</ID>
    <ID>ExpressionBodySyntax:SportTournamentInteractor.kt$SportTournamentInteractor$return element?.expireDate != null &amp;&amp; element.expireDate!! &gt; serverTime</ID>
    <ID>ExpressionBodySyntax:SportTournamentPresenter.kt$SportTournamentPresenter$return if (config.eplStartSeason &gt; prefs.getServerTime()) " " + resources.getString(R.string.sport_start_season) else ""</ID>
    <ID>ExpressionBodySyntax:SportTrackSelectorView.kt$SportTrackSelectorView$return if (audio.title.isEmpty()) audio.shortTitle else audio.title</ID>
    <ID>ExpressionBodySyntax:StartActivity.kt$StartActivity$return supportFragmentManager.findFragmentById(R.id.fragmentContainerView)</ID>
    <ID>ExpressionBodySyntax:StartSmoothScroller.kt$StartSmoothScroller$return getMsPerInch() / displayMetrics.densityDpi</ID>
    <ID>ExpressionBodySyntax:StatusResponse.kt$StatusResponse$return status != ScreenApiErrorCodes.SCREEN_RESPONSE_OK</ID>
    <ID>ExpressionBodySyntax:StringExtension.kt$return asSequence().filter { it.isNotBlank() }.joinToString(" \u00b7 ")</ID>
    <ID>ExpressionBodySyntax:StringExtension.kt$return replace("[^0-9]".toRegex(), "")</ID>
    <ID>ExpressionBodySyntax:StubFragment.kt$StubFragment$return inflater.inflate(R.layout.fragment_stub, container, false)</ID>
    <ID>ExpressionBodySyntax:SubscriptionFragment.kt$SubscriptionFragment$return inflater.inflate(R.layout.fragment_subscription, container, false)</ID>
    <ID>ExpressionBodySyntax:SubscriptionInteractor.kt$SubscriptionInteractor$return subscriptionRepository.readAllSubscriptions()</ID>
    <ID>ExpressionBodySyntax:SubscriptionInteractor.kt$SubscriptionInteractor$return subscriptionRepository.readSubscriptionById(subscriptionId)</ID>
    <ID>ExpressionBodySyntax:SubscriptionListFragment.kt$SubscriptionListFragment$return inflater.inflate(R.layout.fragment_subscription_list, container, false)</ID>
    <ID>ExpressionBodySyntax:SubscriptionManagementFragment.kt$SubscriptionManagementFragment$return inflater.inflate(R.layout.fragment_subscription_management, container, false)</ID>
    <ID>ExpressionBodySyntax:SubscriptionModel.kt$return TimeUnit.MILLISECONDS.toDays(duration)</ID>
    <ID>ExpressionBodySyntax:SubscriptionModel.kt$return VideoCollectionModel(id, alias, name, children.total, children.items)</ID>
    <ID>ExpressionBodySyntax:SubscriptionModel.kt$return VideoModel(id, alias, ElementType.SUBSCRIPTION.value, name, name, 0, image, image, basicCover, basicPortrait, "", false, 0f, 0f, countDescription, 0, 0, false, isPurchased(), false, 0, 0, 0, "", false, false, false, false, false, false, false, false, false, false, emptyList(), false, emptyList(), emptyList(), emptyList(), VideoCollectionModel(), emptyList(), emptyList(), emptyList(), emptyList())</ID>
    <ID>ExpressionBodySyntax:SubscriptionModel.kt$return children.items.joinToString(", ") { it.title }</ID>
    <ID>ExpressionBodySyntax:SubscriptionModel.kt$return expireDate != null &amp;&amp; expireDate &gt; 0</ID>
    <ID>ExpressionBodySyntax:SupportInfoFragment.kt$SupportInfoFragment$return inflater.inflate(R.layout.fragment_support_info, container, false)</ID>
    <ID>ExpressionBodySyntax:ToolbarBackgroundBehavior.kt$ToolbarBackgroundBehavior$return SavedState(super.onSaveInstanceState(parent, abl), currentColor)</ID>
    <ID>ExpressionBodySyntax:TrailerModel.kt$return TrailerModel(item.url, item.media.quality, item.media.mimeType)</ID>
    <ID>ExpressionBodySyntax:TrailerModel.kt$return map { it.quality }</ID>
    <ID>ExpressionBodySyntax:TrailerPlayerFragment.kt$TrailerPlayerFragment$return inflater.inflate(R.layout.fragment_trailer_player, container, false)</ID>
    <ID>ExpressionBodySyntax:TransformationFactory.kt$TransformationFactory$return RoundedCornersTransformation(resources.getInteger(R.integer.default_corner_radius), 0)</ID>
    <ID>ExpressionBodySyntax:TvMainApplication.kt$TvMainApplication$return activity is StartActivity</ID>
    <ID>ExpressionBodySyntax:TvSportCardAdapter.kt$TvSportCardAdapter$return items[position].id</ID>
    <ID>ExpressionBodySyntax:TvSportPlayerActivity.kt$TvSportPlayerActivity.Companion$return Intent(context, TvSportPlayerActivity::class.java).apply { putExtras(extras) }</ID>
    <ID>ExpressionBodySyntax:TvSportTournamentAdapter.kt$TvSportTournamentAdapter$return items?.size?.minus(1) ?: 0</ID>
    <ID>ExpressionBodySyntax:TvSportTournamentAdapter.kt$TvSportTournamentAdapter.SportCollectionViewHolder$return TvSportCardAdapter(itemView.context, item.items)</ID>
    <ID>ExpressionBodySyntax:TvSportTournamentFragment.kt$TvSportTournamentFragment$return inflater.inflate(R.layout.fragment_tv_sport_tournament, container, false)</ID>
    <ID>ExpressionBodySyntax:TvSportTournamentPresenter.kt$TvSportTournamentPresenter$return onAir?.items?.toSportListItems(onAir.name)</ID>
    <ID>ExpressionBodySyntax:UiScreenInfoResponse.kt$UiScreenInfoResponse$return attributes?.get(ATTRIBUTE_IS_LOGGER_ENABLE)?.toBoolean() ?: false</ID>
    <ID>ExpressionBodySyntax:UserInteractor.kt$UserInteractor$return Single.just(emptyList())</ID>
    <ID>ExpressionBodySyntax:UserInteractor.kt$UserInteractor$return screenApi.setUserPreferences(clientType, JSONObject(mapOf(*pref)).toString())</ID>
    <ID>ExpressionBodySyntax:UserLogTree.kt$UserLogTree$return false</ID>
    <ID>ExpressionBodySyntax:UserLogTree.kt$UserLogTree$return message.contains(ConfigModel.defaultConfig.userLoggerUrl)</ID>
    <ID>ExpressionBodySyntax:UserLogTree.kt$UserLogTree$return tag == KollectorLoggerManager.NAME || tag == UserHttpLogger.TAG</ID>
    <ID>ExpressionBodySyntax:UserModel.kt$return "*${number.substring(number.length - 4, number.length)}"</ID>
    <ID>ExpressionBodySyntax:UserModel.kt$return BillingAccountModel(item.id, item.description ?: "", item.balance.value, item.balance.currencyCode)</ID>
    <ID>ExpressionBodySyntax:UserModel.kt$return item?.let { QiwiWalletModel(item.id, item.phone) }</ID>
    <ID>ExpressionBodySyntax:UserModel.kt$return this?.billingAccounts?.items?.takeIf { it.isNotEmpty() }?.get(0)?.balance?.value ?: 0</ID>
    <ID>ExpressionBodySyntax:UserResponseExtension.kt$return this?.paymentMethods?.items?.find { it.creditCard != null }?.creditCard</ID>
    <ID>ExpressionBodySyntax:VideoCardItemDecorator.kt$VideoCardItemDecorator$return forceDecorateAsBig?.invoke() == true || hasFocused(parent)</ID>
    <ID>ExpressionBodySyntax:VideoCardItemDecorator.kt$VideoCardItemDecorator$return parent.layoutManager?.hasFocus() == true</ID>
    <ID>ExpressionBodySyntax:VideoCollectionFragment.kt$VideoCollectionFragment$return inflater.inflate(R.layout.fragment_video_collection, container, false)</ID>
    <ID>ExpressionBodySyntax:VideoCollectionListFragment.kt$VideoCollectionListFragment$return inflater.inflate(R.layout.fragment_home, container, false)</ID>
    <ID>ExpressionBodySyntax:VideoCollectionModel.kt$VideoCollectionModel$return items.isEmpty()</ID>
    <ID>ExpressionBodySyntax:VideoCollectionModel.kt$VideoCollectionModel$return items.isNotEmpty()</ID>
    <ID>ExpressionBodySyntax:VideoCollectionsAdapter.kt$VideoCollectionsAdapter.VideoCollectionsViewHolder$return VideoCardsAdapter((item as VideoCollectionUiModel).item.items)</ID>
    <ID>ExpressionBodySyntax:VideoCollectionsInteractor.kt$VideoCollectionsInteractor$return Single.fromCallable { collectionRepository.getVideoCollection(collectionId) }</ID>
    <ID>ExpressionBodySyntax:VideoCollectionsInteractor.kt$VideoCollectionsInteractor$return getHomeVideoCollectionList(true).ignoreElement()</ID>
    <ID>ExpressionBodySyntax:VideoInfoFragment.kt$VideoInfoFragment$return inflater.inflate(R.layout.fragment_video_info, container, false)</ID>
    <ID>ExpressionBodySyntax:VideoInfoNavigationAdapter.kt$VideoInfoNavigationAdapter.NavigationDiffUtilCallback$return oldItems[oldItemPosition] == newItems[newItemPosition]</ID>
    <ID>ExpressionBodySyntax:VideoInfoNavigationAdapter.kt$VideoInfoNavigationAdapter.NavigationDiffUtilCallback$return oldItems[oldItemPosition].item.id == newItems[newItemPosition].item.id</ID>
    <ID>ExpressionBodySyntax:VideoInfoPresenter.kt$VideoInfoPresenter$return navigationItems.map { getNavigationViewItem(it) }</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return getRemoteVideoById(video.id, video.type)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readEpisodeById(id)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readProductsByVideoId(videoId)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readProductsByVideoIds(videoIds)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readSeasonById(id)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readSeasonsByVideoId(videoId)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readSeriesById(id)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readSeriesById(videoId)</ID>
    <ID>ExpressionBodySyntax:VideoInteractor.kt$VideoInteractor$return videoRepository.readVideoById(videoId)</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return (rating * 2f).roundToInt() / 2f</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return QualityConstants.getQualityTitle(res, getMaxQuality())</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return TimeUnit.MILLISECONDS.toMinutes(duration)</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return actors.asSequence().map { it.name }.filter { it.isNotBlank() }.joinToString(", ")</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return countries.asSequence().filter { it.isNotBlank() }.joinToString(", ")</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return directors.asSequence().map { it.name }.filter { it.isNotBlank() }.joinToString(", ")</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return genres.asSequence().map { it.name }.filter { it.isNotBlank() }.joinToString(", ")</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return getLicense()?.productType == ConsumptionMode.RENT.value</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return licenses.find { it.id.isNotBlank() }</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return licenses.find { it.subscriptionId.isNotBlank() }</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return studios.asSequence().filter { it.name.isNotBlank() }.map { it.name }.joinToString(", ")</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return type == ElementType.MULTIPART_MOVIE.value</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return type == ElementType.SERIAL.value</ID>
    <ID>ExpressionBodySyntax:VideoModel.kt$return type in listOf(ElementType.MULTIPART_MOVIE.value, ElementType.SERIAL.value, ElementType.SEASON.value)</ID>
    <ID>ExpressionBodySyntax:VideoResponse.kt$return items.filter { it.liveContentType == type }</ID>
    <ID>ExpressionBodySyntax:ViewExtension.kt$return inflate(layout, parent, attachRoot) as T</ID>
    <ID>ExpressionBodySyntax:ViewExtensions.kt$return childView.isChildOf(this)</ID>
    <ID>ExpressionBodySyntax:ViewExtensions.kt$return descendantFocusability == ViewGroup.FOCUS_BLOCK_DESCENDANTS</ID>
    <ID>ExpressionBodySyntax:ViewExtensions.kt$return this.context.getCompatColor(colorRes)</ID>
    <ID>ExpressionBodySyntax:VignetteFilterTransformation.kt$VignetteFilterTransformation$return "VignetteFilterTransformation(center=$center,color=$color,start=$start,end=$end)"</ID>
    <ID>ExpressionBodySyntax:WatchNextService.kt$WatchNextService.Companion$return context.intentFor&lt;WatchNextService&gt;(KEY_TYPE to TYPE_REMOVE_ITEMS)</ID>
    <ID>ExpressionBodySyntax:WebCreditCardFragment.kt$WebCreditCardFragment$return inflater.inflate(R.layout.fragment_prepayment_web, container, false)</ID>
    <ID>ExpressionBodySyntax:XiaomiHistoryManager.kt$XiaomiHistoryManager.Companion$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_MOVIE?uid=$movieId&amp;type=$movieType"</ID>
    <ID>ExpressionBodySyntax:XiaomiHistoryManager.kt$XiaomiHistoryManager.Companion$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_SUBSCRIPTION?uid=$subscriptionId"</ID>
    <ID>ExpressionBodySyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_COLLECTION?uid=${genre.id}&amp;type=$INTENT_APP_HOST_COLLECTION&amp;name=${genre.name}"</ID>
    <ID>ExpressionBodySyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_MOVIE"</ID>
    <ID>ExpressionBodySyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_PERSON?uid=${person.id}&amp;name=${person.name}"</ID>
    <ID>ExpressionBodySyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_SEARCH"</ID>
    <ID>ExpressionBodySyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$return "$INTENT_APP_SCHEME://$INTENT_APP_HOST_SUBSCRIPTION?uid=$subscriptionId}"</ID>
    <ID>ExpressionBodySyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$return "$INTENT_PLUGIN_SCHEME://$INTENT_PLUGIN_HOST?$INTENT_PLUGIN_PARAMETER_UID=$videoId&amp;$INTENT_PLUGIN_PARAMETER_TYPE=$videoType"</ID>
    <ID>ForbiddenVoid:FteActivity.kt$FteActivity.MultiSubscriptionApplyTask$Void</ID>
    <ID>ForbiddenVoid:RecommendationJobService.kt$RecommendationJobService.LoadJobTask$Void</ID>
    <ID>ForbiddenVoid:RecommendationJobService.kt$RecommendationJobService.UpdateJobTask$Void</ID>
    <ID>FunctionNaming:MobileSportTournamentFragment.kt$MobileSportTournamentFragment$fun(liveContentType: LiveContentType)</ID>
    <ID>FunctionNaming:SportCardFragment.kt$SportCardFragment$fun(fromStart: Boolean)</ID>
    <ID>FunctionOnlyReturningConstant:DeviceInfoProvider.kt$DeviceInfoProvider$private fun isSupport3d()</ID>
    <ID>FunctionOnlyReturningConstant:DeviceInfoProvider.kt$DeviceInfoProvider$private fun isSupportMultiAudio()</ID>
    <ID>FunctionOnlyReturningConstant:DeviceInfoProvider.kt$DeviceInfoProvider$private fun isSupportMultiResolutionAsset()</ID>
    <ID>FunctionOnlyReturningConstant:DeviceInfoProvider.kt$DeviceInfoProvider$private fun isSupportSubtitles()</ID>
    <ID>FunctionOnlyReturningConstant:UserLogTree.kt$UserLogTree$private fun canSkipPriority(priority: Int): Boolean</ID>
    <ID>LabeledExpression:CalendarAdapter.kt$CalendarAdapter$return@indexOfFirst false</ID>
    <ID>LabeledExpression:CalendarAdapter.kt$CalendarAdapter$return@indexOfFirst true</ID>
    <ID>LabeledExpression:CalendarAdapter.kt$CalendarAdapter$return@mapNotNull item.date</ID>
    <ID>LabeledExpression:CalendarAdapter.kt$CalendarAdapter$return@mapNotNull null</ID>
    <ID>LabeledExpression:CalendarAdapter.kt$CalendarAdapter$return@setOnLongClickListener true</ID>
    <ID>LabeledExpression:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter.CollectionViewHolder$this@CollectionViewHolder</ID>
    <ID>LabeledExpression:DeviceInfoProvider.kt$DeviceInfoProvider$return@lazy try { (context.applicationContext.getSystemService(Context.USER_SERVICE) as? UserManager)?.let { manager -&gt; val multiUserId = manager.getSerialNumberForUser(android.os.Process.myUserHandle()) String.format(Locale.US, DEVICE_ID_WITH_USER_ID_FORMAT, deviceIdInstallationId, multiUserId) } deviceIdInstallationId } catch (ignore: Exception) { deviceIdInstallationId }</ID>
    <ID>LabeledExpression:DeviceInfoProvider.kt$DeviceInfoProvider$return@lazy try { val packageName = context.packageName val packageInfo = context.packageManager.getPackageInfo(packageName, 0) AppVersionModel(packageInfo.versionName, packageInfo.versionCode, packageName) } catch (e: Exception) { AppVersionModel() }</ID>
    <ID>LabeledExpression:DigitsInputCompoundView.kt$DigitsInputCompoundView$return@forEach</ID>
    <ID>LabeledExpression:FragmentExtension.kt$return@setOnKeyListener false</ID>
    <ID>LabeledExpression:FragmentExtension.kt$return@setOnKeyListener true</ID>
    <ID>LabeledExpression:KeyboardView.kt$KeyboardView$return@OnKeyListener delegateKey(keyCode, event)</ID>
    <ID>LabeledExpression:KeyboardView.kt$KeyboardView$return@OnKeyListener false</ID>
    <ID>LabeledExpression:KeyboardView.kt$KeyboardView$return@setOnTouchListener res</ID>
    <ID>LabeledExpression:KollectorEventModels.kt$KollectorEvent$return@also</ID>
    <ID>LabeledExpression:LoggerManager.kt$LoggerManager$return@asyncRun</ID>
    <ID>LabeledExpression:LoggerManager.kt$LoggerManager$return@launch</ID>
    <ID>LabeledExpression:MainApplicationPresenter.kt$MainApplicationPresenter$return@create</ID>
    <ID>LabeledExpression:PlayerControlView.kt$PlayerControlView$return@Runnable</ID>
    <ID>LabeledExpression:ProductListFragment.kt$ProductListFragment$return@Runnable</ID>
    <ID>LabeledExpression:PurchasePresenter.kt$PurchasePresenter$return@flatMap Single.just(it)</ID>
    <ID>LabeledExpression:PurchasePresenter.kt$PurchasePresenter$return@flatMap purchase</ID>
    <ID>LabeledExpression:PurchasePresenter.kt$PurchasePresenter$return@subscribe</ID>
    <ID>LabeledExpression:SportActivationCodeFragment.kt$SportActivationCodeFragment$return@setOnEditorActionListener false</ID>
    <ID>LabeledExpression:SportActivationCodeFragment.kt$SportActivationCodeFragment$return@setOnEditorActionListener true</ID>
    <ID>LabeledExpression:SportActivationPhoneFragment.kt$SportActivationPhoneFragment$return@setOnEditorActionListener false</ID>
    <ID>LabeledExpression:SportActivationPhoneFragment.kt$SportActivationPhoneFragment$return@setOnEditorActionListener true</ID>
    <ID>LabeledExpression:SportState.kt$SportState$return@lazy false</ID>
    <ID>LabeledExpression:SportState.kt$SportState$return@lazy true</ID>
    <ID>LabeledExpression:TvSportTournamentFragment.kt$TvSportTournamentFragment$return@post</ID>
    <ID>LabeledExpression:UiUserSubscription.kt$UiUserSubscription.Companion$return@let null</ID>
    <ID>LabeledExpression:UserLoggerManager.kt$UserLoggerManager$return@lazy Handler(handlerThread.looper)</ID>
    <ID>LabeledExpression:WebCreditCardFragment.kt$WebCreditCardFragment$return@post</ID>
    <ID>LargeClass:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter : JsonAdapter</ID>
    <ID>LongMethod:ChannelManager.kt$ChannelManager$@RequiresApi(Build.VERSION_CODES.O) fun handleMovieForWatchNext(context: Context, element: Element, playbackPosition: Int, duration: Int)</ID>
    <ID>LongMethod:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$override fun fromJson(reader: JsonReader): ConfigModel</ID>
    <ID>LongMethod:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$override fun fromJson(reader: JsonReader): DeviceExtrasModel</ID>
    <ID>LongMethod:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$override fun fromJson(reader: JsonReader): ElementResponse</ID>
    <ID>LongMethod:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$override fun toJson(writer: JsonWriter, value: ElementResponse?)</ID>
    <ID>LongMethod:ErrorInfo.kt$private fun ErrorInfo.Companion.getErrorDescription(context: Context, code: Int)</ID>
    <ID>LongMethod:ErrorInfo.kt$private fun ErrorInfo.Companion.getErrorTitle(context: Context, code: Int)</ID>
    <ID>LongMethod:GameExtensions.kt$fun Game.getGameStatusText(context: Context, source: GameStatusSource, serverTime: Long): String</ID>
    <ID>LongMethod:HigherOrderFunction.kt$@Deprecated("use bundleOfKtx") fun bundleOf(vararg pairs: Pair&lt;String, Any?&gt;)</ID>
    <ID>LongMethod:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$override fun fromJson(reader: JsonReader): ItemElementResponse</ID>
    <ID>LongMethod:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$override fun toJson(writer: JsonWriter, value: ItemElementResponse?)</ID>
    <ID>LongMethod:KollectorEventsJsonAdapter.kt$KollectorEventsJsonAdapter$override fun toJson(writer: JsonWriter, value: List&lt;KollectorEvent&gt;?)</ID>
    <ID>LongMethod:OfferActivatedDialog.kt$OfferActivatedDialog$private fun bindView()</ID>
    <ID>LongMethod:PlayerControlView.kt$PlayerControlView$private fun updateProgress()</ID>
    <ID>LongMethod:SportPlayerActivity.kt$SportPlayerActivity$override fun setUi(sportPlaybackUIModel: SportPlaybackUIModel?)</ID>
    <ID>LongMethod:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$override fun fromJson(reader: JsonReader): SubscriptionResponse</ID>
    <ID>LongMethod:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$override fun fromJson(reader: JsonReader): UserInfoResponse</ID>
    <ID>LongMethod:VideoCollectionsAdapter.kt$VideoCollectionsAdapter.CollectionViewHolder$@SuppressLint("SetTextI18n") fun bind(uiItem: VideoCollectionUiModel, position: Int)</ID>
    <ID>LongMethod:VideoInfoFragment.kt$VideoInfoFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:VideoModel.kt$fun VideoModel.Companion.from(item: ElementResponse, serverTime: Long): VideoModel</ID>
    <ID>LongParameterList:Analytics.kt$Analytics$( action: PlaybackFields.Actions, element: KollectorElement? = null, positionMs: Long? = null, drmType: String? = null, exception: Throwable? = null, seekPosition: Long? = null, isTrailer: Boolean? = null, consumptionMode: String? = null, quality: String? = null, fromFab: Boolean? = null, liveContentType: String? = null, url: String? = null, userSubscriptionId: String? = null, userSubscriptionStart: String? = null, userSubscriptionEnd: String? = null)</ID>
    <ID>LongParameterList:Analytics.kt$Analytics$( action: PurchaseFields.Actions, element: KollectorElement?, offer: String? = null, price: Float? = null, error: String? = null, paymentMethod: String? = null, quality: String? = null, consumptionMode: String? = null, transactionId: String? = null, fromFab: Boolean? = null)</ID>
    <ID>LongParameterList:Analytics.kt$Analytics$( action: PurchaseFields.Actions, elementUid: String? = null, elementType: String? = null, elementAlias: String? = null, offer: String? = null, price: Float? = null, error: String? = null, paymentMethod: String? = null, quality: String? = null, consumptionMode: String? = null, transactionId: String? = null, fromFab: Boolean? = null)</ID>
    <ID>LongParameterList:Analytics.kt$Analytics$(type: ErrorFields.Domains, code: String, requestInfo: String, action: String? = null, elementUid: String? = null, elementType: String? = null, elementAlias: String? = null, message: String? = null, stackTrace: String? = null, callId: String? = null)</ID>
    <ID>LongParameterList:AnalyticsCompat.kt$AnalyticsCompat$(action: PurchaseFields.Actions, element: KollectorElement?, offer: String?, price: Float?, ex: ExceptionWithErrorCode, paymentMethod: String?, quality: String?, consumptionMode: String?, transactionId: String?, fromFab: Boolean?)</ID>
    <ID>LongParameterList:Media.kt$MediaInfoFactory$(elementId: String, elementType: String, coverUrl: String, aspectRatio: Double, licenseUrl: String?, licenseDrmType: String?, licenseCustomData: String?, failOverUrls: String?, liveContentType: LiveContentType?, shortTitle: String?, longTitle: String?)</ID>
    <ID>MagicNumber:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$3</ID>
    <ID>MagicNumber:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$4</ID>
    <ID>MagicNumber:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$5</ID>
    <ID>MagicNumber:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$6</ID>
    <ID>MagicNumber:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$7</ID>
    <ID>MagicNumber:AudioTrackResponseJsonAdapter.kt$AudioTrackResponseJsonAdapter$3</ID>
    <ID>MagicNumber:AudioTrackResponseJsonAdapter.kt$AudioTrackResponseJsonAdapter$4</ID>
    <ID>MagicNumber:BillingAccountResponseJsonAdapter.kt$BillingAccountResponseJsonAdapter$3</ID>
    <ID>MagicNumber:CirclePagerIndicator.kt$CirclePageIndicator$3</ID>
    <ID>MagicNumber:CollectionElementResponseJsonAdapter.kt$CollectionElementResponseJsonAdapter$3</ID>
    <ID>MagicNumber:CollectionElementResponseJsonAdapter.kt$CollectionElementResponseJsonAdapter$4</ID>
    <ID>MagicNumber:CommandServiceManager.kt$CommandServiceManager$512</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$10</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$11</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$12</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$13</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$14</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$15</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$16</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$17</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$18</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$19</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$20</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$3</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$4</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$5</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$6</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$7</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$8</ID>
    <ID>MagicNumber:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$9</ID>
    <ID>MagicNumber:CoverElementResponseJsonAdapter.kt$CoverElementResponseJsonAdapter$3</ID>
    <ID>MagicNumber:CustomLoadControl.kt$CustomLoadControl$1000L</ID>
    <ID>MagicNumber:CustomPlayerView.kt$CustomPlayerView$23</ID>
    <ID>MagicNumber:CustomPlayerView.kt$CustomPlayerView.&lt;no name provided&gt;$1000</ID>
    <ID>MagicNumber:CustomPlayerView.kt$CustomPlayerView.Companion$23</ID>
    <ID>MagicNumber:CustomPlayerView.kt$CustomPlayerView.Companion$3f</ID>
    <ID>MagicNumber:CustomPlayerView.kt$CustomPlayerView.ComponentListener$270</ID>
    <ID>MagicNumber:CustomPlayerView.kt$CustomPlayerView.ComponentListener$90</ID>
    <ID>MagicNumber:DateExtension.kt$1000</ID>
    <ID>MagicNumber:DateExtension.kt$24</ID>
    <ID>MagicNumber:DateExtension.kt$60</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$10</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$11</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$12</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$13</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$14</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$15</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$3</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$4</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$5</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$6</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$7</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$8</ID>
    <ID>MagicNumber:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$9</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$10</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$11</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$12</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$13</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$14</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$15</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$16</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$17</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$18</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$19</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$20</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$21</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$22</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$23</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$24</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$25</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$26</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$27</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$28</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$29</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$30</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$31</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$32</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$33</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$34</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$35</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$36</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$37</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$38</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$39</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$40</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$41</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$42</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$43</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$44</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$45</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$46</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$47</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$48</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$49</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$50</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$51</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$52</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$53</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$54</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$55</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$56</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$57</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$58</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$59</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$60</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$61</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$62</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$63</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$64</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$65</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$66</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$67</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$68</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$69</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$70</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$71</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$72</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$73</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$74</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$75</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$76</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$77</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$78</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$79</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$80</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$81</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$82</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$83</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$84</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$85</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$86</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$87</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$88</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$89</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$9</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$90</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$91</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$92</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$93</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$94</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$95</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$96</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$97</ID>
    <ID>MagicNumber:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$98</ID>
    <ID>MagicNumber:GifImageView.kt$GifImageView$1000</ID>
    <ID>MagicNumber:HigherOrderFunction.kt$18</ID>
    <ID>MagicNumber:HigherOrderFunction.kt$21</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$10</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$11</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$12</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$13</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$14</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$15</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$16</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$17</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$18</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$19</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$20</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$21</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$22</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$23</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$24</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$25</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$26</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$27</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$28</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$29</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$30</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$31</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$32</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$33</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$34</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$35</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$36</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$37</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$38</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$39</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$40</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$41</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$9</ID>
    <ID>MagicNumber:KeyModelJsonAdapter.kt$KeyModelJsonAdapter$3</ID>
    <ID>MagicNumber:KollectorAnalytics.kt$KollectorAnalytics$1000</ID>
    <ID>MagicNumber:KollectorLoggerManager.kt$KollectorLoggerManager$40</ID>
    <ID>MagicNumber:LicenseResponseJsonAdapter.kt$LicenseResponseJsonAdapter$3</ID>
    <ID>MagicNumber:LicenseResponseJsonAdapter.kt$LicenseResponseJsonAdapter$4</ID>
    <ID>MagicNumber:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$3</ID>
    <ID>MagicNumber:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$4</ID>
    <ID>MagicNumber:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ModelExtension.kt$100</ID>
    <ID>MagicNumber:NotificationLandingActivity.kt$NotificationLandingActivity$0.96f</ID>
    <ID>MagicNumber:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter$0.52f</ID>
    <ID>MagicNumber:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter.&lt;no name provided&gt;$0.05f</ID>
    <ID>MagicNumber:NotificationResponseJsonAdapter.kt$NotificationResponseJsonAdapter$3</ID>
    <ID>MagicNumber:NotificationResponseJsonAdapter.kt$NotificationResponseJsonAdapter$4</ID>
    <ID>MagicNumber:NumberExtension.kt$3600</ID>
    <ID>MagicNumber:NumberExtension.kt$60</ID>
    <ID>MagicNumber:OfferActivatedDialog.kt$OfferActivatedDialog$30</ID>
    <ID>MagicNumber:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$3</ID>
    <ID>MagicNumber:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$4</ID>
    <ID>MagicNumber:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$5</ID>
    <ID>MagicNumber:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$6</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$10</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$11</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$12</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$3</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$4</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$5</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$6</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$7</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$8</ID>
    <ID>MagicNumber:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$9</ID>
    <ID>MagicNumber:OnAirTaskModel.kt$OnAirTaskModel$1000L</ID>
    <ID>MagicNumber:OrientationExtension.kt$270</ID>
    <ID>MagicNumber:OrientationExtension.kt$360</ID>
    <ID>MagicNumber:OrientationExtension.kt$90</ID>
    <ID>MagicNumber:PageIndicatorView.kt$PageIndicatorView$0.5f</ID>
    <ID>MagicNumber:PageIndicatorView.kt$PageIndicatorView.PageListener$150</ID>
    <ID>MagicNumber:PaymentMethodResponseJsonAdapter.kt$PaymentMethodResponseJsonAdapter$3</ID>
    <ID>MagicNumber:PhoneFormatter.kt$PhoneFormatter$11</ID>
    <ID>MagicNumber:PhoneFormatter.kt$PhoneFormatter$14</ID>
    <ID>MagicNumber:PhoneFormatter.kt$PhoneFormatter$6</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_DECODER_ERROR$104</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_DECODER_QUERY_FAILED$101</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_DRM_SESSION$108</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_INVALID_REGION$903</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_MIME_TYPE_NOT_SUPPORTED$100</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_NOT_ACTIVATED$904</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_NO_REQUIRED_DECODER$103</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_SECURE_DECODER_REQUIRED$102</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_SOURCE$105</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_TOO_MANY_DEVICES$514</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_UNEXPECTED$106</ID>
    <ID>MagicNumber:PlaybackErrorCode.kt$PlaybackErrorCode.ERROR_UNSUPPORTED_DRM$107</ID>
    <ID>MagicNumber:PlayerControlView.kt$PlayerControlView$0.1f</ID>
    <ID>MagicNumber:PlayerControlView.kt$PlayerControlView$0.3f</ID>
    <ID>MagicNumber:PlayerControlView.kt$PlayerControlView$1000</ID>
    <ID>MagicNumber:PlayerControlView.kt$PlayerControlView$200</ID>
    <ID>MagicNumber:PlayerControlView.kt$PlayerControlView$5</ID>
    <ID>MagicNumber:PlayerControlView.kt$PlayerControlView$5f</ID>
    <ID>MagicNumber:PriceTag.kt$30</ID>
    <ID>MagicNumber:PriceTag.kt$UiProductFactory$30</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$9</ID>
    <ID>MagicNumber:PurchaseConfirmUiModel.kt$PurchaseConfirmUiModel.Companion$4</ID>
    <ID>MagicNumber:QualityConstants.kt$QualityConstants$1280</ID>
    <ID>MagicNumber:QualityConstants.kt$QualityConstants$1920</ID>
    <ID>MagicNumber:QualityConstants.kt$QualityConstants$720</ID>
    <ID>MagicNumber:QualitySelectorView.kt$QualitySelectorView$0.4f</ID>
    <ID>MagicNumber:RecommendationJobService.kt$RecommendationJobService$10000</ID>
    <ID>MagicNumber:ReservationListAdapter.kt$ReservationListAdapter$0.5f</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$10</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$11</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$12</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$3</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$4</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$5</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$6</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$7</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$8</ID>
    <ID>MagicNumber:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$9</ID>
    <ID>MagicNumber:SportCalendarFragment.kt$SportCalendarFragment$15</ID>
    <ID>MagicNumber:SportCalendarFragment.kt$SportCalendarFragment$2018</ID>
    <ID>MagicNumber:SportCollectionListHolderResponseJsonAdapter.kt$SportCollectionListHolderResponseJsonAdapter$3</ID>
    <ID>MagicNumber:SportCollectionListHolderResponseJsonAdapter.kt$SportCollectionListHolderResponseJsonAdapter$4</ID>
    <ID>MagicNumber:SportCollectionListHolderResponseJsonAdapter.kt$SportCollectionListHolderResponseJsonAdapter$5</ID>
    <ID>MagicNumber:SportCollectionPresenter.kt$SportCollectionPresenter$5</ID>
    <ID>MagicNumber:SportTournamentPresenter.kt$SportTournamentPresenter$5</ID>
    <ID>MagicNumber:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$3</ID>
    <ID>MagicNumber:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$4</ID>
    <ID>MagicNumber:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$5</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$10</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$11</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$12</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$13</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$14</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$15</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$16</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$17</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$18</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$19</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$20</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$21</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$22</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$23</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$3</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$4</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$5</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$6</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$7</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$8</ID>
    <ID>MagicNumber:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$9</ID>
    <ID>MagicNumber:SubtitleResponseJsonAdapter.kt$SubtitleResponseJsonAdapter$3</ID>
    <ID>MagicNumber:TopSideCropType.kt$TopSideCropType$0.5f</ID>
    <ID>MagicNumber:TrackSelectorView.kt$TrackSelectorView$0.4f</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$.2f</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$.3f</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$0.3f</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$0.75f</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$255f</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$26</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$44</ID>
    <ID>MagicNumber:TransformationFactory.kt$TransformationFactory$8</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$10</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$3</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$4</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$5</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$6</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$7</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$8</ID>
    <ID>MagicNumber:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$9</ID>
    <ID>MagicNumber:UserModel.kt$4</ID>
    <ID>MagicNumber:VideoCardItemDecorator.kt$VideoCardItemDecorator$4</ID>
    <ID>MagicNumber:VideoCardItemDecorator.kt$VideoCardItemDecorator$6f</ID>
    <ID>MagicNumber:VideoCollectionsInteractor.kt$VideoCollectionsInteractor$20</ID>
    <ID>MagicNumber:VignetteFilterTransformation.kt$VignetteFilterTransformation$0.5f</ID>
    <ID>MagicNumber:WatchedListener.kt$WatchedListener$100F</ID>
    <ID>MagicNumber:XiaomiHistoryManager.kt$XiaomiHistoryManager$16</ID>
    <ID>MagicNumber:XiaomiHistoryManager.kt$XiaomiHistoryManager$18</ID>
    <ID>MandatoryBracesIfStatements:BasePagerIndicator.kt$BasePageIndicator$if (column &lt;= 0) throw IllegalArgumentException("column must be not null")</ID>
    <ID>MandatoryBracesIfStatements:BasePagerIndicator.kt$BasePageIndicator$if (indicatorRecyclerView == null || indicatorRecyclerView!!.adapter == null) return 0</ID>
    <ID>MandatoryBracesIfStatements:BasePagerIndicator.kt$BasePageIndicator$if (itemCount % eachPageCount == 0) itemCount / eachPageCount else itemCount / eachPageCount + 1</ID>
    <ID>MandatoryBracesIfStatements:BaseScreenApiReLoginInterceptor.kt$BaseScreenApiReLoginInterceptor$if (!statusResponse.isErrorStatus()) response else throw ScreenApiStatusException(statusResponse)</ID>
    <ID>MandatoryBracesIfStatements:BaseUiHandler.kt$BaseUiHandler$if (e.errorCode.code == PlaybackErrorCode.ERROR_TOO_MANY_DEVICES.code) ExceptionWithErrorCode.ERROR_DOMAIN_DRM else ExceptionWithErrorCode.ERROR_DOMAIN_PLAYER_EXO</ID>
    <ID>MandatoryBracesIfStatements:CustomPlayerView.kt$CustomPlayerView.&lt;no name provided&gt;$if (detector?.previousSpan ?: 0f &gt; (detector?.currentSpan ?: 0f)) VideoAspectRatioFrameLayout.RESIZE_MODE_FIT else VideoAspectRatioFrameLayout.RESIZE_MODE_FIT_WITH_CROPPING</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (!deeplinkScreen) subsRequestId = CatalogueManager.getInstance().getSubscriptions(mRequestResultReceiver)</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (BuildConfig.DEBUG &amp;&amp; deeplinkInfo != null) // Check deeplink exist for Vova Toast.makeText(this, "Диплинк FTE получен!", Toast.LENGTH_LONG).show()</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (ElementUtils.isPurchased(deeplinkInfo?.element)) IntentFactory.createIntentSubscriptionsList() else IntentFactory.createIntentPurchase(deeplinkInfo?.element, ElementUtils.getFirstProduct(deeplinkInfo?.element, ConsumptionMode.SUBSCRIPTION))</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (deeplinkInfo?.element?.releaseType == ElementReleaseType.ANNOUNCE) getString(ru.more.play.fte.R.string.fte_preorder) else deeplinkInfo?.element?.let { TxtUtils.formatMovieTypeString(ru.more.play.fte.R.string.fte_moviecard_watch, it) } ?: ""</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (fteSubs != null &amp;&amp; isHaveOffer() &amp;&amp; viewPager.currentItem &lt; adapter.count || deeplinkScreen) viewPager.currentItem = viewPager.currentItem + 1 else { setFteShownAndFinish() }</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (isBundle) deeplinkInfo?.element?.contentCountDescription else ElementUtils.getFirstProduct(deeplinkInfo?.element, ConsumptionMode.SUBSCRIPTION)?.subscription?.target?.contentCountDescription</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (isFree()) ElementUtils.getPriceValue(bestProduct?.originalPrice).toInt() else ElementUtils.getPriceValue(bestProduct?.price).toInt()</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (isFree()) getString(R.string.fte_offer_subscription_details_free, Date(System.currentTimeMillis() + offerDuration).formatToDdMmmmYyyy(), originalPrice.toString()) else getString(R.string.fte_offer_subscription_details)</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (isPurchased()) IntentFactory.createIntentPlayMovie(this, deeplinkInfo?.element, null, false) else IntentFactory.createIntentPurchase(deeplinkInfo?.element, ElementUtils.getFirstProduct(deeplinkInfo?.element, ConsumptionMode.SUBSCRIPTION)).apply { putExtra(PurchaseActivity.EXTRA_FROM_OFFER, true) }</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity$if (viewPager.currentItem &gt; 0) viewPager.currentItem = viewPager.currentItem - 1 else super.onBackPressed()</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity.FtePagerAdapter$if (!deeplinkScreen) updateSecondFragment()</ID>
    <ID>MandatoryBracesIfStatements:FteActivity.kt$FteActivity.MultiSubscriptionApplyTask$if (adapter != null) updateSecondFragment()</ID>
    <ID>MandatoryBracesIfStatements:FteFragment.kt$FteFragment$if (!SystemUtils.sIsTablet) calculateTitleUnderFteView()</ID>
    <ID>MandatoryBracesIfStatements:FteSubscriptionFragment.kt$FteSubscriptionFragment$if (!SystemUtils.sIsTablet) calculateTitleUnderFteView()</ID>
    <ID>MandatoryBracesIfStatements:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.sport_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.sport_game_full_game_expired)</ID>
    <ID>MandatoryBracesIfStatements:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.sport_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.sport_game_over, formatKickOffDate(res, true, serverTime))</ID>
    <ID>MandatoryBracesIfStatements:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.tv_sport_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.sport_game_full_game_expired)</ID>
    <ID>MandatoryBracesIfStatements:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.tv_sport_list_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.tv_sport_list_game_full_game_expired)</ID>
    <ID>MandatoryBracesIfStatements:GameOfTheDayViewHolder.kt$GameOfTheDayViewHolder$if (isTablet) ImageParams.GAME_OF_THE_DAY_PRESET_TABLET else ImageParams.GAME_OF_THE_DAY_PRESET</ID>
    <ID>MandatoryBracesIfStatements:IntExtension.kt$if (!monthAsDays) context.getString(R.string.month) else context.resources.getQuantityString(R.plurals.time_day_left, this, this)</ID>
    <ID>MandatoryBracesIfStatements:KeyboardView.kt$KeyboardView.&lt;no name provided&gt;$if (triggeredPosForKeyboard == 0) reloadKeysWithDone(DEFAULT_FOCUSED_NUMBER) else reloadKeysWithDone(s[triggeredPosForKeyboard - 1].toString())</ID>
    <ID>MandatoryBracesIfStatements:MaskedPhoneTextWatcher.kt$MaskedPhoneTextWatcher$if (isDelete) maskRu.insertFrontDropLast(editable) else maskRu.insertFrontFull(editable)</ID>
    <ID>MandatoryBracesIfStatements:MaskedPhoneTextWatcher.kt$MaskedPhoneTextWatcher$if (maskOther.toUnformattedString().length &gt;= MIN_NON_RUS_LENGTH) unlockEnterListener?.invoke() else blockEnterListener?.invoke()</ID>
    <ID>MandatoryBracesIfStatements:MaskedPhoneTextWatcher.kt$MaskedPhoneTextWatcher$if (maskRu.toUnformattedString().isNotEmpty()) editText.setText("$PLUS_PREFIX$maskRu") else fillOtherPhoneType(editable)</ID>
    <ID>MandatoryBracesIfStatements:Media.kt$Media.Factory$if (url.isNotBlank()) Media(elementId = item.id, elementType = item.type.value, liveContentType = liveContentType, url = url, failOverUrls = failOverUrls, licenseUrl = licenseUrl, title = item.name, shortTitle = shortTitle, longTitle = longTitle, subtitle = liveContentType?.getTitle(TheApplication.getAppContext().resources), coverUrl = ImageParams(width = 600).makeImageUrl(item.cover)) else null</ID>
    <ID>MandatoryBracesIfStatements:PriceTag.kt$if (!hasOfferType) false else offer.purchasedSubscriptionId == subscr.id</ID>
    <ID>MandatoryBracesIfStatements:PriceTag.kt$if (haveFree) context.getString(R.string.product_list_free).toLowerCase(Locale.getDefault()) else context.getString(R.string.rub_postfix, beforeRenewalPrice)</ID>
    <ID>MandatoryBracesIfStatements:ProperFocusableConstraintLayout.kt$ProperFocusableConstraintLayout$if (parent != null) super.clearFocus()</ID>
    <ID>MandatoryBracesIfStatements:TvSportPlayerPresenter.kt$TvSportPlayerPresenter$if (this != null) appendToTrackEvent(id, subscriptionStartDate.toString(), subscriptionEndDate.toString()) else appendToTrackEvent(null, null, null)</ID>
    <ID>MandatoryBracesIfStatements:UserLoggerSingletonWrapper.kt$UserLoggerSingletonWrapper$if (userLoggerWrapper == null) userLoggerWrapper = UserLoggerManager(context, client, prefs, deviceInfo, config)</ID>
    <ID>MaxLineLength:AcitivityExtension.kt$fun IFragmentContainerView.showProductSeasonListWithDefaultSeason(item: VideoModel, season: SeasonModel, target: Fragment? = null, requestCode: Int = 0)</ID>
    <ID>MaxLineLength:AddPhoneActivity.kt$AddPhoneActivity : BaseActivityFragmentListenerFragmentListenerFragmentListener</ID>
    <ID>MaxLineLength:AddPhoneActivity.kt$AddPhoneActivity$supportFragmentManager.beginTransaction().replace(R.id.fragment, fragment, it.javaClass.simpleName ).addToBackStack(null).commitAllowingStateLoss()</ID>
    <ID>MaxLineLength:Analytics.kt$Analytics$fun trackNotification(action: NotificationFields.ACTIONS, type: NotificationFields.TYPES?, notificationId: String?, element: KollectorElement? = null)</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$PlaybackFields.Actions.BUFFERING_COMPLETE -&gt; analytics.trackEventBufferingComplete(toElement(element), asset, liveContentType, posInt, trailer, fab)</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$PlaybackFields.Actions.BUFFERING_START -&gt; analytics.trackEventBufferingStart(toElement(element), asset, liveContentType, posInt, trailer, fab)</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$override</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$private</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$trackPurchase(action, KollectorElement(elementUid, elementType, elementAlias), offer, price, error, paymentMethod, quality, consumptionMode, transactionId, fromFab)</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$trackPurchaseInner(action, element, offer, price, ExceptionWithErrorCode().apply { errorDescription = error }, paymentMethod, quality, consumptionMode, transactionId, fromFab)</ID>
    <ID>MaxLineLength:AnalyticsCompat.kt$AnalyticsCompat$trackPurchaseInner(action, element, product?.offerId, product?.price, ExceptionWithErrorCode(ex), paymentMethod, product?.quality, null, transactionId, false)</ID>
    <ID>MaxLineLength:AnimatorFactory.kt$AnimatorFactory$fun createAlphaAnimatorSet(targets: List&lt;View&gt;, from: Float, to: Float, duration: Long, interpolator: TimeInterpolator = AccelerateDecelerateInterpolator())</ID>
    <ID>MaxLineLength:AnimatorFactory.kt$AnimatorFactory$fun createMovementAnimationSet(targets: List&lt;View&gt;, from: PointF, to: PointF, duration: Long, interpolator: TimeInterpolator = DecelerateInterpolator())</ID>
    <ID>MaxLineLength:AssetListResponseJsonAdapter.kt$AssetListResponseJsonAdapter$0 -&gt; items = listOfAssetResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:AssetListResponseJsonAdapter.kt$AssetListResponseJsonAdapter$moshi.adapter&lt;List&lt;AssetResponse&gt;&gt;(Types.newParameterizedType(List::class.java, AssetResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$moshi.adapter&lt;List&lt;String&gt;?&gt;(Types.newParameterizedType(List::class.java, String::class.java), kotlin.collections.emptySet(), "failoverUrls")</ID>
    <ID>MaxLineLength:AudioTrackListResponseJsonAdapter.kt$AudioTrackListResponseJsonAdapter$0 -&gt; items = listOfAudioTrackResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:AudioTrackListResponseJsonAdapter.kt$AudioTrackListResponseJsonAdapter$moshi.adapter&lt;List&lt;AudioTrackResponse&gt;&gt;(Types.newParameterizedType(List::class.java, AudioTrackResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:AudioTrackResponseJsonAdapter.kt$AudioTrackResponseJsonAdapter$0 -&gt; contentLanguage = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'contentLanguage' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:AuthInfoResponseJsonAdapter.kt$AuthInfoResponseJsonAdapter$0 -&gt; sessionToken = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'sessionToken' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:AuthInfoResponseJsonAdapter.kt$AuthInfoResponseJsonAdapter$2 -&gt; persistentToken = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'persistentToken' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:BalanceResponseJsonAdapter.kt$BalanceResponseJsonAdapter$1 -&gt; currencyCode = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'currencyCode' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:BaseScreenApiReLoginInterceptor.kt$BaseScreenApiReLoginInterceptor$statusResponseListener: ScreenApiStatusResponseListener? = null</ID>
    <ID>MaxLineLength:BasicCoverElementHolderResponseJsonAdapter.kt$BasicCoverElementHolderResponseJsonAdapter$0 -&gt; items = listOfBasicCoverElementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:BasicCoverElementHolderResponseJsonAdapter.kt$BasicCoverElementHolderResponseJsonAdapter$moshi.adapter&lt;List&lt;BasicCoverElementResponse&gt;&gt;(Types.newParameterizedType(List::class.java, BasicCoverElementResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:BillingAccountListResponseJsonAdapter.kt$BillingAccountListResponseJsonAdapter$0 -&gt; items = listOfBillingAccountResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:BillingAccountListResponseJsonAdapter.kt$BillingAccountListResponseJsonAdapter$moshi.adapter&lt;List&lt;BillingAccountResponse&gt;&gt;(Types.newParameterizedType(List::class.java, BillingAccountResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:BillingAccountResponseJsonAdapter.kt$BillingAccountResponseJsonAdapter$1 -&gt; balance = balanceResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'balance' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:BundleSubscriptionFragment.kt$BundleSubscriptionFragment$recyclerView.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(context, androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL, false)</ID>
    <ID>MaxLineLength:CardCompoundView.kt$CardCompoundView$arr.getDimension(R.styleable.VideoCardCompoundView_titleSize, resources.getDimension(R.dimen.textsize_default_video_card_title)).takeIf { it &gt; 0 }</ID>
    <ID>MaxLineLength:CardCompoundView.kt$CardCompoundView$arr.getDimensionPixelSize(R.styleable.VideoCardCompoundView_poster16x9Width, getDefaultPosterViewWidth()).takeIf { it &gt; 0 }</ID>
    <ID>MaxLineLength:CategoriesResponseJsonAdapter.kt$CategoriesResponseJsonAdapter$0 -&gt; element = collectionElementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CategoryFragment.kt$CategoryFragment.&lt;no name provided&gt;$override</ID>
    <ID>MaxLineLength:CenterGridLayoutManager.kt$CenterGridLayoutManager$open</ID>
    <ID>MaxLineLength:CenterGridLayoutManager.kt$CenterGridLayoutManager$override</ID>
    <ID>MaxLineLength:CenterLinearLayoutManager.kt$CenterLinearLayoutManager$open</ID>
    <ID>MaxLineLength:CirclePagerIndicator.kt$CirclePageIndicator : BasePageIndicator</ID>
    <ID>MaxLineLength:CollectionListHolderResponseJsonAdapter.kt$CollectionListHolderResponseJsonAdapter$1 -&gt; collectionItems = collectionListResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'collectionItems' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CollectionListResponseJsonAdapter.kt$CollectionListResponseJsonAdapter$0 -&gt; items = listOfCollectionResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CollectionListResponseJsonAdapter.kt$CollectionListResponseJsonAdapter$moshi.adapter&lt;List&lt;CollectionResponse&gt;&gt;(Types.newParameterizedType(List::class.java, CollectionResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:CollectionResponseJsonAdapter.kt$CollectionResponseJsonAdapter$0 -&gt; element = elementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CommonErrorDialogFragment.kt$CommonErrorDialogFragment.Companion$fun newInstance(requestCode: Int = 0, customTitle: String = "", customDescription: String = "", errorCode: String = "")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$0 -&gt; screenApiServerUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'screenApiServerUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$1 -&gt; apmApiServerUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'apmApiServerUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$10 -&gt; purchaseSuccessUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'purchaseSuccessUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$11 -&gt; purchaseErrorUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'purchaseErrorUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$12 -&gt; playerPositionSaveTimeout = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'playerPositionSaveTimeout' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$13 -&gt; kinopoiskMinRate = floatAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'kinopoiskMinRate' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$14 -&gt; subscriptionTotalCount = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'subscriptionTotalCount' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$15 -&gt; userLoggerUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'userLoggerUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$16 -&gt; kollectorUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'kollectorUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$17 -&gt; addMoneyMinValue = intAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'addMoneyMinValue' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$18 -&gt; addMoneyMaxValue = intAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'addMoneyMaxValue' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$2 -&gt; widevineLicenseUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'widevineLicenseUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$20 -&gt; eplStartSeason = longAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'eplStartSeason' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$3 -&gt; playreadyLicenseUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'playreadyLicenseUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$4 -&gt; preTrailerSourceUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'preTrailerSourceUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$5 -&gt; preMediaSourceUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'preMediaSourceUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$6 -&gt; preSportSourceUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'preSportSourceUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$7 -&gt; staticImagesSourceUrl = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'staticImagesSourceUrl' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$8 -&gt; callCenterPhone = mapOfStringStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'callCenterPhone' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$9 -&gt; callCenterEmail = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'callCenterEmail' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$JsonReader.Options.of("screenApiServerUrl", "apmApiServerUrl", "widevineLicenseUrl", "playreadyLicenseUrl", "preTrailerSourceUrl", "preMediaSourceUrl", "preSportSourceUrl", "staticImagesSourceUrl", "callCenterPhone", "callCenterEmail", "purchaseSuccessUrl", "purchaseErrorUrl", "playerPositionSaveTimeout", "kinopoiskMinRate", "subscriptionTotalCount", "userLoggerUrl", "kollectorUrl", "addMoneyMinValue", "addMoneyMaxValue", "webUrl", "eplStartSeason")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$moshi.adapter&lt;Map&lt;String, String&gt;&gt;(Types.newParameterizedType(Map::class.java, String::class.java, String::class.java), kotlin.collections.emptySet(), "callCenterPhone")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$playreadyLicenseUrl = playreadyLicenseUrl ?: throw JsonDataException("Required property 'playreadyLicenseUrl' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$preTrailerSourceUrl = preTrailerSourceUrl ?: throw JsonDataException("Required property 'preTrailerSourceUrl' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$screenApiServerUrl = screenApiServerUrl ?: throw JsonDataException("Required property 'screenApiServerUrl' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$widevineLicenseUrl = widevineLicenseUrl ?: throw JsonDataException("Required property 'widevineLicenseUrl' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:ContextExtension.kt$inline</ID>
    <ID>MaxLineLength:CountryHolderResponseJsonAdapter.kt$CountryHolderResponseJsonAdapter$0 -&gt; element = countryResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CountryListResponseJsonAdapter.kt$CountryListResponseJsonAdapter$0 -&gt; items = listOfCountryHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CountryListResponseJsonAdapter.kt$CountryListResponseJsonAdapter$moshi.adapter&lt;List&lt;CountryHolderResponse&gt;&gt;(Types.newParameterizedType(List::class.java, CountryHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:CoverElementHolderResponseJsonAdapter.kt$CoverElementHolderResponseJsonAdapter$0 -&gt; items = listOfCoverElementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:CoverElementHolderResponseJsonAdapter.kt$CoverElementHolderResponseJsonAdapter$moshi.adapter&lt;List&lt;CoverElementResponse&gt;&gt;(Types.newParameterizedType(List::class.java, CoverElementResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:CrosslinedTextView.kt$CrosslinedTextView : CustomTextView</ID>
    <ID>MaxLineLength:CustomPlayerView.kt$CustomPlayerView : FrameLayout</ID>
    <ID>MaxLineLength:DeviceConnectionActivity.kt$DeviceConnectionActivity$connectContactsTextView.text = resources.getString(R.string.device_connection_contacts).format(config.getRusCallCenterPhone()?.let { PhoneFormatter.format(it) })</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$10 -&gt; supportDolbyAtmos = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportDolbyAtmos' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$11 -&gt; supportMultiAudio = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportMultiAudio' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$12 -&gt; supportSubtitles = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportSubtitles' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$13 -&gt; supportFeaturedSubscriptions = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportFeaturedSubscriptions' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$14 -&gt; supportMultiSubscriptions = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportMultiSubscriptions' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$15 -&gt; notSupportMultiresolution = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'notSupportMultiresolution' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$2 -&gt; supportedDrm = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportedDrm' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$3 -&gt; drmSoftware = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'drmSoftware' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$5 -&gt; supportFullHd = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportFullHd' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$6 -&gt; supportUltraHd = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportUltraHd' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$9 -&gt; supportDolby = booleanAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'supportDolby' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$JsonReader.Options.of("appVersion", "sdkVersion", "supportedDrm", "drmSoftware", "supportHd", "supportFullHd", "supportUltraHd", "supportHdr", "support3d", "supportDolby", "supportDolbyAtmos", "supportMultiAudio", "supportSubtitles", "supportFeaturedSubscriptions", "supportMultiSubscriptions", "notSupportMultiresolution")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$notSupportMultiresolution = notSupportMultiresolution ?: throw JsonDataException("Required property 'notSupportMultiresolution' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$supportFeaturedSubscriptions = supportFeaturedSubscriptions ?: throw JsonDataException("Required property 'supportFeaturedSubscriptions' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$supportMultiSubscriptions = supportMultiSubscriptions ?: throw JsonDataException("Required property 'supportMultiSubscriptions' missing at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceItemsResponseJsonAdapter.kt$DeviceItemsResponseJsonAdapter$0 -&gt; items = listOfDeviceItemResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:DeviceItemsResponseJsonAdapter.kt$DeviceItemsResponseJsonAdapter$moshi.adapter&lt;List&lt;DeviceItemResponse&gt;&gt;(Types.newParameterizedType(List::class.java, DeviceItemResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:DrmExtension.kt$internal</ID>
    <ID>MaxLineLength:ElementDao.kt$ElementDao$"WHERE ${ElementRelationTable.NAME}.${ElementRelationTable.Columns.ROOT_ID}=:id AND ${ElementRelationTable.NAME}.${ElementRelationTable.Columns.ROOT_TYPE}=:type "</ID>
    <ID>MaxLineLength:ElementDao.kt$ElementDao$@Query("DELETE FROM ${ElementRelationTable.NAME} WHERE ${ElementRelationTable.Columns.ROOT_ID}=:id AND ${ElementRelationTable.Columns.ROOT_TYPE}=:type AND ${ElementRelationTable.Columns.RELATION_NAME}=:relation")</ID>
    <ID>MaxLineLength:ElementDao.kt$ElementDao$private</ID>
    <ID>MaxLineLength:ElementListResponseJsonAdapter.kt$ElementListResponseJsonAdapter$0 -&gt; elements = elementsListResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'elements' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ElementRelationListResponseJsonAdapter.kt$ElementRelationListResponseJsonAdapter$moshi.adapter&lt;List&lt;ElementRelationResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, ElementRelationResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:ElementRelationResponseJsonAdapter.kt$ElementRelationResponseJsonAdapter$0 -&gt; element = elementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$JsonReader.Options.of("id", "type", "name", "title", "description", "promoText", "alias", "assets", "trailers", "covers", "collectionItems", "needActivate", "subscriptionActivateDate", "basicCovers", "products", "expireDate", "parent", "subscriptionBundle", "duration", "subscriptionStartDate", "subscriptionEndDate", "autoRenewEnabled", "contentCountDescription", "subscriptionBoughtWithOffer", "seqNo", "originalName", "worldReleaseDate", "ageAccessType", "okkoRating", "inNovelty", "children", "kinopoiskRating", "bookmarkDate", "playbackTimeMark", "lastStartingDate", "lastWatchedChildId", "hasHdr", "hasHd", "hasFullHd", "hasUltraHd", "has3d", "hasDolby", "hasDolbyAtmos", "hasSound51", "inSubscription", "genres", "countries", "similar", "actors", "directors", "studios", "sportSection", "externalEventId", "externalEventDigitalId", "updateInSeconds", "onAir", "homeGoals", "awayGoals", "kickOffDate", "gameMinute", "gameStatus", "catchupStartDate", "catchupEndDate", "tourNumber", "gameOfTheDay", "gameOfTheTour", "homeTeam", "awayTeam", "liveStartDate", "liveEndDate", "commentaryBy", "stadium", "referee", "shortName", "nickName", "standingsPosition", "gamesPlayed", "gamesWon", "gamesDrawn", "gamesLost", "goalsFor", "goalsAgainst", "goalsDifference", "points", "tours", "games", "teams", "programs", "activationRules", "allLiveContentTypes", "subscriptionBillingStartDate", "seasonSubscriptionEndDate", "renewable", "fullSeasonPriceText", "licenses", "liveContentType", "subscriptionBoughtWithOfferInfo", "subscriptionLastBillingAmount", "renewalSubscription")</ID>
    <ID>MaxLineLength:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$moshi.adapter&lt;ArrayList&lt;LiveContentType&gt;?&gt;(Types.newParameterizedType(ArrayList::class.java, LiveContentType::class.java), kotlin.collections.emptySet(), "allLiveContentTypes")</ID>
    <ID>MaxLineLength:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$moshi.adapter&lt;HashSet&lt;ActivationRule&gt;?&gt;(Types.newParameterizedType(HashSet::class.java, ActivationRule::class.java), kotlin.collections.emptySet(), "activationRules")</ID>
    <ID>MaxLineLength:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$subscriptionBillingStartDate = if (subscriptionBillingStartDateSet) subscriptionBillingStartDate else result.subscriptionBillingStartDate</ID>
    <ID>MaxLineLength:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$subscriptionBoughtWithOfferInfo = if (subscriptionBoughtWithOfferInfoSet) subscriptionBoughtWithOfferInfo else result.subscriptionBoughtWithOfferInfo</ID>
    <ID>MaxLineLength:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$subscriptionLastBillingAmount = if (subscriptionLastBillingAmountSet) subscriptionLastBillingAmount else result.subscriptionLastBillingAmount</ID>
    <ID>MaxLineLength:ElementsListResponseJsonAdapter.kt$ElementsListResponseJsonAdapter$moshi.adapter&lt;List&lt;ElementResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, ElementResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:EndlessRecyclerScrollListener.kt$EndlessRecyclerScrollListener$abstract</ID>
    <ID>MaxLineLength:FocusFixedConstraint.kt$FocusFixedConstraint : ConstraintLayout</ID>
    <ID>MaxLineLength:FocusStrategyLinearLayoutManager.kt$FocusStrategyLinearLayoutManager$open</ID>
    <ID>MaxLineLength:FocusedStrategyImageButton.kt$FocusedStrategyImageButton : AppCompatImageButton</ID>
    <ID>MaxLineLength:FragmentExtension.kt$fun FragmentManager.replace(containerId: Int, fragment: Fragment, withBackStack: Boolean = false, animation: TransitionAnimationModel? = null, sharedElement: View? = null)</ID>
    <ID>MaxLineLength:FragmentExtension.kt$fun IFragmentContainerView.showBillingAccount(billingAccount: BillingAccountModel, target: Fragment? = null, requestCode: Int = 0, ignoreBackStack: Boolean = false)</ID>
    <ID>MaxLineLength:FragmentExtension.kt$return arguments?.getInt(KEY_FULL_SCREEN_DIALOG_THEME, R.style.FullScreenDialogStyle_BlackTransparent) ?: R.style.FullScreenDialogStyle_BlackTransparent</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$(adapter.dynamicFragment as FteSubscriptionView)</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$?:</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$ElementUtils.isGift(bestProduct)</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$IntentFactory.createIntentPurchase(deeplinkInfo?.element, ElementUtils.getFirstProduct(deeplinkInfo?.element, ConsumptionMode.SUBSCRIPTION))</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$bestProduct != null -&gt; getString(if (isFree()) ru.more.play.fte.R.string.fte_offer_try_free else ru.more.play.fte.R.string.fte_subscription_buy)</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$else -&gt; (getString(R.string.fte_subscription_watch_for, bestProduct?.subscription?.target?.name?.decapitalize(), originalPrice.toString()))</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$offerDescription.append(getString(ru.more.play.fte.R.string.fte_offer_subscription_duration, resources.getQuantityString(ru.more.play.fte.R.plurals.time_day_during_full, daysFromMs(offerDuration).toInt(), daysFromMs(offerDuration).toInt())))</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity$startActivity</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity.FtePagerAdapter$var dynamicFragment: Fragment = if (!deeplinkScreen) FteSubscriptionFragment.newInstance() else FteOfferFragment.newInstance(deeplinkInfo?.isLanding)</ID>
    <ID>MaxLineLength:FteActivity.kt$FteActivity.MultiSubscriptionApplyTask$val fteList = DataManager.getSubscriptionCollectionItemsForList(ElementCollectionInfo(SpecialCollectionId.COLLECTION_ID_SUBSCRIPTIONS))?.filter { it.fteSubscription == true }</ID>
    <ID>MaxLineLength:FteFragment.kt$FteFragment$setMargins(leftMargin, marginTop.roundToInt() - (UiUtils.getFloatValue(resources, R.dimen.fte_1_title_padding_bottom) * resources.displayMetrics.density).roundToInt(), rightMargin, bottomMargin)</ID>
    <ID>MaxLineLength:FteOfferFragment.kt$FteOfferFragment$movieDescriptionView.text = getString(if (delegate.isAnnounce()) R.string.fte_preorder_movie_description else R.string.fte_buy_movie_description)</ID>
    <ID>MaxLineLength:FteOfferFragment.kt$FteOfferFragment$text = getString(if (isPurchased) R.string.fte_goto_subscriptions else if (isFree) R.string.fte_offer_try_free else R.string.fte_subscription_buy)</ID>
    <ID>MaxLineLength:FteSubscriptionFragment.kt$FteSubscriptionFragment$setMargins(leftMargin, marginTop.roundToInt() - (UiUtils.getFloatValue(resources, R.dimen.fte_2_title_padding_bottom) * resources.displayMetrics.density).roundToInt(), rightMargin, bottomMargin)</ID>
    <ID>MaxLineLength:FullOverlapScrollingBehavior.kt$FullOverlapScrollingBehavior$override</ID>
    <ID>MaxLineLength:GameExtensions.kt$CARD_TITLE, TV_LIST_TITLE, TV_CARD_TITLE -&gt; getHalfGameMinute(res, res.getString(if (gameStatus == GameStatus.FIRST_HALF) R.string.sport_game_first_half else R.string.sport_game_second_half), gameMinute)</ID>
    <ID>MaxLineLength:GameExtensions.kt$LIST_TITLE -&gt; getHalfGameMinute(res, res.getString(if (gameStatus == GameStatus.FIRST_HALF) R.string.sport_game_first_half_short else R.string.sport_game_second_half_short), gameMinute)</ID>
    <ID>MaxLineLength:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.sport_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.sport_game_full_game_expired)</ID>
    <ID>MaxLineLength:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.sport_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.sport_game_over, formatKickOffDate(res, true, serverTime))</ID>
    <ID>MaxLineLength:GameExtensions.kt$if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.tv_sport_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.sport_game_full_game_expired)</ID>
    <ID>MaxLineLength:GameExtensions.kt$private</ID>
    <ID>MaxLineLength:GameExtensions.kt$val record = if (hasFullGameAndNotExpired(serverTime)) res.getString(R.string.tv_sport_list_game_full_game_expire, Date(catchupEndDate!!).formatTimeLeft(serverTime, res)) else res.getString(R.string.tv_sport_list_game_full_game_expired)</ID>
    <ID>MaxLineLength:GameOfTheDayViewHolder.kt$GameOfTheDayViewHolder : ViewHolder</ID>
    <ID>MaxLineLength:GameViewHolder.kt$GameViewHolder$labelsContainer.fillWithGameLabels(LABEL_STYLE_TV_LARGE, game, resources.getDimensionPixelSize(R.dimen.sport_game_list_label_margin), isShowScoreAllowed)</ID>
    <ID>MaxLineLength:GameViewHolder.kt$GameViewHolder$val ipUrl = if (game.cover.isNotEmpty()) ImageParams(width = width, height = height, quality = 80).makeImageUrl(game.cover) else null</ID>
    <ID>MaxLineLength:GenreListResponseJsonAdapter.kt$GenreListResponseJsonAdapter$0 -&gt; items = listOfGenreHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:GenreListResponseJsonAdapter.kt$GenreListResponseJsonAdapter$moshi.adapter&lt;List&lt;GenreHolderResponse&gt;&gt;(Types.newParameterizedType(List::class.java, GenreHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:HomeResponseJsonAdapter.kt$HomeResponseJsonAdapter$0 -&gt; element = elementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:IPurchaseRouter.kt$IPurchaseRouter$fun toBillingAccount(activity: Activity, billingAccount: BillingAccountModel, target: Fragment? = null, requestCode: Int = 0, ignoreBackStack: Boolean = false)</ID>
    <ID>MaxLineLength:ISeriesRouter.kt$ISeriesRouter$fun toProductSeasonList(activity: Activity, item: VideoModel, season: SeasonModel, target: androidx.fragment.app.Fragment? = null, requestCode: Int = 0)</ID>
    <ID>MaxLineLength:ItemElementHolderResponseJsonAdapter.kt$ItemElementHolderResponseJsonAdapter$0 -&gt; element = elementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ItemElementHolderWithUserInfoResponseJsonAdapter.kt$ItemElementHolderWithUserInfoResponseJsonAdapter$0 -&gt; userInfo = userInfoResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'userInfo' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ItemElementHolderWithUserInfoResponseJsonAdapter.kt$ItemElementHolderWithUserInfoResponseJsonAdapter$1 -&gt; element = itemElementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$JsonReader.Options.of("id", "type", "name", "alias", "title", "duration", "seqNo", "originalName", "worldReleaseDate", "ageAccessType", "okkoRating", "inNovelty", "description", "bookmarkDate", "expireDate", "playbackTimeMark", "lastStartingDate", "covers", "basicCovers", "assets", "inSubscription", "licenses", "genres", "countries", "similar", "actors", "directors", "studios", "children", "products", "trailers", "kinopoiskRating", "lastWatchedChildId", "subscriptionBundle", "hasHdr", "hasHd", "hasFullHd", "hasUltraHd", "has3d", "hasDolby", "hasDolbyAtmos", "hasSound51")</ID>
    <ID>MaxLineLength:ItemListElementResponseJsonAdapter.kt$ItemListElementResponseJsonAdapter$moshi.adapter&lt;List&lt;ItemElementHolderResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, ItemElementHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:ItemListHolderResponseJsonAdapter.kt$ItemListHolderResponseJsonAdapter$0 -&gt; items = listOfItemElementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ItemListHolderResponseJsonAdapter.kt$ItemListHolderResponseJsonAdapter$moshi.adapter&lt;List&lt;ItemElementResponse&gt;&gt;(Types.newParameterizedType(List::class.java, ItemElementResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:KeyboardModelJsonAdapter.kt$KeyboardModelJsonAdapter$1 -&gt; layout = listOfListOfStringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'layout' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:KeyboardModelJsonAdapter.kt$KeyboardModelJsonAdapter$moshi.adapter&lt;List&lt;List&lt;String&gt;&gt;&gt;(Types.newParameterizedType(List::class.java, Types.newParameterizedType(List::class.java, String::class.java)), kotlin.collections.emptySet(), "layout")</ID>
    <ID>MaxLineLength:KeyboardView.kt$KeyboardView$arr.getDimensionPixelSize(R.styleable.ButtonKeyView_keyMargin, resources.getDimensionPixelSize(R.dimen.size_small)).takeIf { it &gt; 0 }</ID>
    <ID>MaxLineLength:KeyboardView.kt$KeyboardView$arr.getDimensionPixelSize(R.styleable.ButtonKeyView_keySize, resources.getDimensionPixelSize(R.dimen.size_large)).takeIf { it &gt; 0 }</ID>
    <ID>MaxLineLength:KeyboardView.kt$KeyboardView$arr.getDimensionPixelSize(R.styleable.ButtonKeyView_keyTextSize, resources.getDimensionPixelSize(R.dimen.textsize_small)).takeIf { it &gt; 0 }</ID>
    <ID>MaxLineLength:KeyboardView.kt$KeyboardView$keyboard = keyboard?.reload?.let { KeyboardProvider(context.assets, Moshi.Builder().add(MoshiCommonConverter()).build()).readKeyboardForReload(it) }</ID>
    <ID>MaxLineLength:KollectorAnalytics.kt$KollectorAnalytics$element?.awayGoals</ID>
    <ID>MaxLineLength:KollectorAnalytics.kt$KollectorAnalytics$override</ID>
    <ID>MaxLineLength:LauncherActivity.kt$LauncherActivity$(isBackStackFragment(supportFragmentManager.fragments.getOrNull(supportFragmentManager.fragments.lastIndex - 1)) &amp;&amp; currentFragment is PurchaseContainerFragment)</ID>
    <ID>MaxLineLength:LicenseListResponseJsonAdapter.kt$LicenseListResponseJsonAdapter$0 -&gt; items = listOfLicenseResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:LicenseListResponseJsonAdapter.kt$LicenseListResponseJsonAdapter$moshi.adapter&lt;List&lt;LicenseResponse&gt;&gt;(Types.newParameterizedType(List::class.java, LicenseResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:LicenseResponseJsonAdapter.kt$LicenseResponseJsonAdapter$moshi.adapter&lt;Map&lt;String, String&gt;?&gt;(Types.newParameterizedType(Map::class.java, String::class.java, String::class.java), kotlin.collections.emptySet(), "licenseServerUrls")</ID>
    <ID>MaxLineLength:LocationResponseJsonAdapter.kt$LocationResponseJsonAdapter$0 -&gt; countryCode = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'countryCode' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:MainApplication.kt$MainApplication$abstract</ID>
    <ID>MaxLineLength:MainMenuResponseJsonAdapter.kt$MainMenuResponseJsonAdapter$0 -&gt; mainMenu = collectionListHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'mainMenu' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:Media.kt$Media.Factory$licenseUrl = item.licences?.firstOrNull { license -&gt; license.id == asset.licenseId }?.licenseServerUrls?.get(DrmUtils.CENC_WIDEVINE_NAME)</ID>
    <ID>MaxLineLength:Media.kt$MediaInfoFactory$@JvmStatic fun fromPlayableItem(item: PlayableItem, liveContentType: LiveContentType?, homeTeam: Team?, awayTeam: Team?): MediaInfo?</ID>
    <ID>MaxLineLength:Media.kt$MediaInfoFactory$private</ID>
    <ID>MaxLineLength:Media.kt$return if(customData.has(MediaInfoFactory.LIVE_CONTENT_TYPE_TAG)) LiveContentType.valueOf(customData.getString(MediaInfoFactory.LIVE_CONTENT_TYPE_TAG)) else null</ID>
    <ID>MaxLineLength:MobileSportTournamentFragment.kt$MobileSportTournamentFragment$override</ID>
    <ID>MaxLineLength:MobileSportTournamentPresenter.kt$MobileSportTournamentPresenter$interactor: SportTournamentInteractor</ID>
    <ID>MaxLineLength:Model.kt$fun List&lt;TournamentElementItem&gt;.toSportListItems(header: String?, gameOfDay: Boolean = false, gameOfDayHeader: String? = null): MutableList&lt;SportListItem&lt;*&gt;&gt;</ID>
    <ID>MaxLineLength:MyMoviesResponseJsonAdapter.kt$MyMoviesResponseJsonAdapter$0 -&gt; myMovies = elementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'myMovies' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:NameValueView.kt$NameValueView$layoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, context.resources.getDimensionPixelSize(R.dimen.name_value_view_height))</ID>
    <ID>MaxLineLength:NetworkModule.kt$NetworkModule$@Provides @AppScope fun provideLoginApiClient(prefs: PersistencePreferences, logInterceptors: List&lt;HttpLoggingInterceptor&gt;, moshi: Moshi, listener: ScreenApiStatusResponseListener): LoginApiClientFactory</ID>
    <ID>MaxLineLength:NetworkModule.kt$NetworkModule$@Provides @AppScope fun provideScreenApiErrorHandlerInterceptor(context: Context, prefs: PersistencePreferences, moshi: Moshi, loginable: Loginable, listener: ScreenApiStatusResponseListener): ErrorHandlerInterceptor</ID>
    <ID>MaxLineLength:NotificationItemsHolderJsonAdapter.kt$NotificationItemsHolderJsonAdapter$0 -&gt; items = listOfNotificationResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:NotificationItemsHolderJsonAdapter.kt$NotificationItemsHolderJsonAdapter$moshi.adapter&lt;List&lt;NotificationResponse&gt;&gt;(Types.newParameterizedType(List::class.java, NotificationResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter$val buttonsTop = screenHeight * (1f - (guidelineBtn.layoutParams as ConstraintLayout.LayoutParams).guidePercent) + actionsLayout.measuredHeightAndState</ID>
    <ID>MaxLineLength:NotificationLandingActivity.kt$NotificationLandingActivity.NotificationPagerAdapter.&lt;no name provided&gt;$topMargin = (screenHeight - height) / 2 + resources.getDimensionPixelOffset(R.dimen.landing_page_indicator_margin_top)</ID>
    <ID>MaxLineLength:NotificationResponseJsonAdapter.kt$NotificationResponseJsonAdapter$moshi.adapter&lt;List&lt;ActionResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, ActionResponse::class.java), kotlin.collections.emptySet(), "actions")</ID>
    <ID>MaxLineLength:OfferActivatedDialog.kt$OfferActivatedDialog$append(getString(R.string.message_movie_subscription, element?.name, product?.subscription?.target?.contentCountDescription, resources.getQuantityString(R.plurals.time_day_during_full, subsDuration.toInt(), subsDuration)))</ID>
    <ID>MaxLineLength:OfferActivatedDialog.kt$OfferActivatedDialog$var subsDuration = if (product?.subscription?.target?.duration == null) 30 else TimeUtils.getDays(product?.subscription?.target?.duration!!)</ID>
    <ID>MaxLineLength:OfferActivationListResponseJsonAdapter.kt$OfferActivationListResponseJsonAdapter$moshi.adapter&lt;List&lt;OfferActivationResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, OfferActivationResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:OfferListResponseJsonAdapter.kt$OfferListResponseJsonAdapter$moshi.adapter&lt;List&lt;OfferResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, OfferResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$JsonReader.Options.of("id", "activationActions", "purchasedSubscriptionId", "type", "duration", "subscriptions", "discountPercentage", "purchasesNum", "renewalDurationDays", "renewalCount", "renewalPrice", "discountRenewalPricePercentage", "needCard")</ID>
    <ID>MaxLineLength:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$moshi.adapter&lt;Set&lt;ActivationAction&gt;?&gt;(Types.newParameterizedType(Set::class.java, ActivationAction::class.java), kotlin.collections.emptySet(), "activationActions")</ID>
    <ID>MaxLineLength:PageIndicatorView.kt$PageIndicatorView.PageListener$private inner</ID>
    <ID>MaxLineLength:PatchWallInteractor.kt$PatchWallInteractor$BiFunction</ID>
    <ID>MaxLineLength:PatchWallInteractor.kt$PatchWallInteractor$XiaomiPatchWallUtils.updateTransactionalSubscriptions(context, remoteSubscriptions, localSubscriptions)</ID>
    <ID>MaxLineLength:PaymentMethodListResponseJsonAdapter.kt$PaymentMethodListResponseJsonAdapter$0 -&gt; items = listOfPaymentMethodResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:PaymentMethodListResponseJsonAdapter.kt$PaymentMethodListResponseJsonAdapter$moshi.adapter&lt;List&lt;PaymentMethodResponse&gt;&gt;(Types.newParameterizedType(List::class.java, PaymentMethodResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:PaymentMethodUiModel.kt$PaymentMethodUiModel.Companion$fun getByPaymentMethod(context: Context, paymentMethod: PaymentMethodResponse, account: BillingAccountResponse? = null): PaymentMethodUiModel?</ID>
    <ID>MaxLineLength:PaymentMethodsFragment.kt$PaymentMethodsFragment.Companion$fun newInstance(params: PaymentParams, paymentMethods: List&lt;PaymentMethodResponse&gt;, account: BillingAccountResponse?)</ID>
    <ID>MaxLineLength:PersonHolderResponseJsonAdapter.kt$PersonHolderResponseJsonAdapter$0 -&gt; element = personResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:PersonListResponseJsonAdapter.kt$PersonListResponseJsonAdapter$0 -&gt; items = listOfPersonHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:PersonListResponseJsonAdapter.kt$PersonListResponseJsonAdapter$moshi.adapter&lt;List&lt;PersonHolderResponse&gt;&gt;(Types.newParameterizedType(List::class.java, PersonHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:PhoneCodesModelJsonAdapter.kt$PhoneCodesModelJsonAdapter$0 -&gt; codes = listOfPhoneCodeModelAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'codes' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:PhoneCodesModelJsonAdapter.kt$PhoneCodesModelJsonAdapter$moshi.adapter&lt;List&lt;PhoneCodeModel&gt;&gt;(Types.newParameterizedType(List::class.java, PhoneCodeModel::class.java), kotlin.collections.emptySet(), "codes")</ID>
    <ID>MaxLineLength:PinResponseJsonAdapter.kt$PinResponseJsonAdapter$0 -&gt; pinInfo = pinInfoResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'pinInfo' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:PlayerControlView.kt$PlayerControlView.ComponentListener$repeatToggleButton === view -&gt; controlDispatcher?.dispatchSetRepeatMode(player, RepeatModeUtil.getNextRepeatMode(player.repeatMode, repeatToggleModes))</ID>
    <ID>MaxLineLength:PlayerManager.kt$PlayerManager.&lt;no name provided&gt;$playbackApi.sendPlaybackStatusEvent(videoId, videoType, licenceId, PLAYBACK_EVENT_PAUSE, TimeUnit.MILLISECONDS.toSeconds(position))</ID>
    <ID>MaxLineLength:PlayerManager.kt$PlayerManager.&lt;no name provided&gt;$playbackApi.sendPlaybackStatusEvent(videoId, videoType, licenceId, PLAYBACK_EVENT_START, TimeUnit.MILLISECONDS.toSeconds(position), true)</ID>
    <ID>MaxLineLength:PlayerManager.kt$PlayerManager.&lt;no name provided&gt;$playbackApi.sendPlaybackStatusEvent(videoId, videoType, licenceId, PLAYBACK_EVENT_TERMINATE, TimeUnit.MILLISECONDS.toSeconds(position))</ID>
    <ID>MaxLineLength:PlayerManager.kt$PlayerManager.&lt;no name provided&gt;$playbackApi.sendPlaybackStatusPosition(videoId, videoType, licenceId, TimeUnit.MILLISECONDS.toSeconds(position), config.playerPositionSaveTimeout)</ID>
    <ID>MaxLineLength:PlayerModule.kt$PlayerModule$@Provides @Singleton fun providePlayerManagerHolder(@Named(AuthScreenApi.CLIENT_TYPE_PATH) clientType: String, prefs: PersistencePreferences, config: ConfigModel, deviceInfo: DeviceInfo, analytics: Analytics): PlayerManagerHolder</ID>
    <ID>MaxLineLength:PreorderAboutActivity.kt$PreorderAboutActivity$recyclerView.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(this, androidx.recyclerview.widget.RecyclerView.HORIZONTAL, false)</ID>
    <ID>MaxLineLength:PresenterExtension.kt$fun PaymentMethodListPresenter.trackPurchaseComplete(video: VideoModel?, product: ProductModel?, payment: PaymentMethodResponse?, purchaseId: String)</ID>
    <ID>MaxLineLength:PresenterExtension.kt$fun PaymentMethodListPresenter.trackPurchaseError(video: VideoModel?, product: ProductModel?, payment: PaymentMethodResponse?, ex: Throwable? = null)</ID>
    <ID>MaxLineLength:PriceResponseJsonAdapter.kt$PriceResponseJsonAdapter$1 -&gt; currencyCode = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'currencyCode' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:PriceTag.kt$fun resolveUniversalMultiSubDescr(context: Context, product: Product, offer: Offer, hideAutoRenew: Boolean = false, allProducts: List&lt;Product&gt;? = null): CharSequence</ID>
    <ID>MaxLineLength:PriceTag.kt$if (!hideAutoRenew &amp;&amp; haveFree &amp;&amp; subscr?.isRenewable == true) it.append("\n").append(context.getString(R.string.subscription_um_auto_renewable))</ID>
    <ID>MaxLineLength:PriceTag.kt$private</ID>
    <ID>MaxLineLength:PriceTag.kt${ context.getString(R.string.first_day) }</ID>
    <ID>MaxLineLength:ProductListResponseJsonAdapter.kt$ProductListResponseJsonAdapter$moshi.adapter&lt;List&lt;ProductResponse&gt;?&gt;(Types.newParameterizedType(List::class.java, ProductResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$JsonReader.Options.of("id", "duration", "consumptionMode", "qualities", "price", "originalPrice", "priceCategory", "paymentMethods", "offer", "subscription")</ID>
    <ID>MaxLineLength:ProgramViewHolder.kt$ProgramViewHolder$com.squareup.picasso.Picasso.get() .load(ipUrl) .transform(jp.wasabeef.picasso.transformations.RoundedCornersTransformation(cornerRadius, 0, jp.wasabeef.picasso.transformations.RoundedCornersTransformation.CornerType.ALL))</ID>
    <ID>MaxLineLength:ProgramViewHolder.kt$ProgramViewHolder$val ipUrl = if (cover.isNotEmpty()) tv.okko.android.model.ImageParams(width = width, height = height, quality = 80).makeImageUrl(cover) else null</ID>
    <ID>MaxLineLength:PurchaseContainerFragment.kt$PurchaseContainerFragment$override</ID>
    <ID>MaxLineLength:PurchaseContainerFragment.kt$PurchaseContainerFragment$paymentInfoHolder.paymentInfoUi = PaymentInfoUiModel("", getString(R.string.currency_rubles), amount.toString(), "", getString(R.string.refill_amount_title))</ID>
    <ID>MaxLineLength:PurchaseContainerRouter.kt$PurchaseContainerRouter$override</ID>
    <ID>MaxLineLength:PurchaseInteractor.kt$PurchaseInteractor$private</ID>
    <ID>MaxLineLength:PurchaseResponseJsonAdapter.kt$PurchaseResponseJsonAdapter$0 -&gt; transactionInfo = transactionInfoResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'transactionInfo' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:RecommendationJobService.kt$RecommendationJobService$GetCollectionItemsCommand(ElementCollectionInfo(SpecialCollectionId.COLLECTION_ID_RECOMMENDED), null, 0, CommonData.HOME_LIST_PAGE_SIZE, true).call()</ID>
    <ID>MaxLineLength:ScreenApiReLoginInterceptor.kt$ScreenApiReLoginInterceptor$private val reloginErrorInterceptor: ((Throwable) -&gt; Unit)? = null</ID>
    <ID>MaxLineLength:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$JsonReader.Options.of("status", "authInfo", "tournament", "myMovies", "serviceInfo", "userInfo", "paymentStatus", "paymentInfo", "element", "elements", "uiScreenInfo", "availableOffers", "transactionInfo")</ID>
    <ID>MaxLineLength:ScreenApiStatusInterceptor.kt$ScreenApiStatusInterceptor$private val statusResponseListener: ScreenApiStatusResponseListener? = null</ID>
    <ID>MaxLineLength:ScreenApiStatusInterceptor.kt$ScreenApiStatusInterceptor$protected inline</ID>
    <ID>MaxLineLength:SearchFragment.kt$SearchFragment.&lt;no name provided&gt;$override</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity : MoxyActivitySettingsViewSendCodeListenerCheckCodeListenerListenerListener</ID>
    <ID>MaxLineLength:SettingsActivity.kt$SettingsActivity$val message = if (errorCode == null) getString(R.string.dialog_error_title_unknown) else getString(R.string.settings_link_card_error_message, errorCode)</ID>
    <ID>MaxLineLength:SettingsPresenter.kt$SettingsPresenter$val sportSub = userInteractor.userSubscriptions.find { it.sportSection == true &amp;&amp; it.subscriptionEndDate?.let { subEndTime -&gt; subEndTime &gt; serverTime } ?: false }</ID>
    <ID>MaxLineLength:SmoothGridLayoutManager.kt$SmoothGridLayoutManager$override</ID>
    <ID>MaxLineLength:SportAnalyticExtensions.kt$analytics.trackCollection(CollectionField.Actions.SELECT, element, KollectorUrls.buildUrl(game.type.value, game.alias), CollectionField.PageTypes.MOVIE_CARD)</ID>
    <ID>MaxLineLength:SportAnalyticExtensions.kt$analytics.trackCollection(CollectionField.Actions.SELECT, element, KollectorUrls.buildUrl(program.type.value, program.alias), CollectionField.PageTypes.MOVIE_CARD)</ID>
    <ID>MaxLineLength:SportCardFragment.kt$SportCardFragment$button.text = getString(R.string.sport_game_watch_from_start) + if (multiscreenDelegate.isMultiScreenConnected()) getString(R.string.sport_game_watch_on_tv) else ""</ID>
    <ID>MaxLineLength:SportCardFragment.kt$SportCardFragment$delegate.createNotification(game, game.name, getString(R.string.sport_game_notification_title), System.currentTimeMillis() + delay)</ID>
    <ID>MaxLineLength:SportCardFragment.kt$SportCardFragment$labelsContainer.fillWithGameLabels(LABEL_STYLE_MEDIUM, game, resources.getDimensionPixelSize(R.dimen.size_small), game.canDisplayScores() &amp;&amp; prefs.isShowScoreAllowed())</ID>
    <ID>MaxLineLength:SportCardFragment.kt$SportCardFragment$notifyButton.setCompoundDrawablesWithIntrinsicBounds(AppCompatResources.getDrawable(context!!, R.drawable.ic_notification_off), null, null, null)</ID>
    <ID>MaxLineLength:SportCardFragment.kt$SportCardFragment$notifyButton.setCompoundDrawablesWithIntrinsicBounds(AppCompatResources.getDrawable(context!!, R.drawable.ic_notification_on), null, null, null)</ID>
    <ID>MaxLineLength:SportCardFragment.kt$SportCardFragment$override</ID>
    <ID>MaxLineLength:SportCardPresenter.kt$SportCardPresenter$getWatchableLiveContentTypes(game.tournamentInfo.isPurchased &amp;&amp; game.tournamentInfo.isActivated, game.allLiveContentTypes)</ID>
    <ID>MaxLineLength:SportCardPresenter.kt$SportCardPresenter$private</ID>
    <ID>MaxLineLength:SportCollectionListHolderResponseJsonAdapter.kt$SportCollectionListHolderResponseJsonAdapter$5 -&gt; collectionItems = sportCollectionListResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'collectionItems' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SportCollectionListResponseJsonAdapter.kt$SportCollectionListResponseJsonAdapter$0 -&gt; items = listOfSubscriptionHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SportCollectionListResponseJsonAdapter.kt$SportCollectionListResponseJsonAdapter$moshi.adapter&lt;List&lt;SubscriptionHolderResponse&gt;&gt;(Types.newParameterizedType(List::class.java, SubscriptionHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:SportCollectionResponseJsonAdapter.kt$SportCollectionResponseJsonAdapter$1 -&gt; userInfo = userInfoResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'userInfo' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SportMultiscreenPresenter.kt$SportMultiscreenPresenter$private</ID>
    <ID>MaxLineLength:SportPlayerPresenter.kt$SportPlayerPresenter$val trailer = sportPlaybackUi?.trailers?.filter { trailer -&gt; trailer.liveContentType == liveContentType }?.map { trailer -&gt; TrailerModel.from(trailer) }?.getMaxQualityTrailer()</ID>
    <ID>MaxLineLength:StudioHolderResponseJsonAdapter.kt$StudioHolderResponseJsonAdapter$0 -&gt; element = studioResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:StudioListResponseJsonAdapter.kt$StudioListResponseJsonAdapter$0 -&gt; items = listOfStudioHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:StudioListResponseJsonAdapter.kt$StudioListResponseJsonAdapter$moshi.adapter&lt;List&lt;StudioHolderResponse&gt;&gt;(Types.newParameterizedType(List::class.java, StudioHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:SubscriptionAdapter.kt$SubscriptionAdapter$private val deviceExtras: DeviceExtrasModel</ID>
    <ID>MaxLineLength:SubscriptionHolderListResponseJsonAdapter.kt$SubscriptionHolderListResponseJsonAdapter$0 -&gt; items = listOfSubscriptionHolderResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SubscriptionHolderListResponseJsonAdapter.kt$SubscriptionHolderListResponseJsonAdapter$moshi.adapter&lt;List&lt;SubscriptionHolderResponse&gt;&gt;(Types.newParameterizedType(List::class.java, SubscriptionHolderResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:SubscriptionHolderResponseJsonAdapter.kt$SubscriptionHolderResponseJsonAdapter$0 -&gt; element = subscriptionResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'element' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SubscriptionListAdapter.kt$SubscriptionListAdapter.SubscriptionsDiffUtilCallback$return newItems[newItemPosition - headerCount].subscriptionWithProductList.subscription.id == oldItems[oldItemPosition - headerCount].subscriptionWithProductList.subscription.id</ID>
    <ID>MaxLineLength:SubscriptionListFragment.kt$SubscriptionListFragment.&lt;no name provided&gt;$override</ID>
    <ID>MaxLineLength:SubscriptionListHolderResponseJsonAdapter.kt$SubscriptionListHolderResponseJsonAdapter$1 -&gt; userInfo = userInfoResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'userInfo' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SubscriptionListResponseJsonAdapter.kt$SubscriptionListResponseJsonAdapter$0 -&gt; items = listOfElementResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SubscriptionListResponseJsonAdapter.kt$SubscriptionListResponseJsonAdapter$moshi.adapter&lt;List&lt;ElementResponse&gt;&gt;(Types.newParameterizedType(List::class.java, ElementResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:SubscriptionModel.kt$return VideoModel(id, alias, ElementType.SUBSCRIPTION.value, name, name, 0, image, image, basicCover, basicPortrait, "", false, 0f, 0f, countDescription, 0, 0, false, isPurchased(), false, 0, 0, 0, "", false, false, false, false, false, false, false, false, false, false, emptyList(), false, emptyList(), emptyList(), emptyList(), VideoCollectionModel(), emptyList(), emptyList(), emptyList(), emptyList())</ID>
    <ID>MaxLineLength:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$JsonReader.Options.of("id", "trailers", "title", "description", "type", "expireDate", "fullSeasonPriceText", "seasonSubscriptionEndDate", "renewable", "name", "alias", "storeType", "covers", "basicCovers", "duration", "subscriptionBoughtWithOffer", "subscriptionStartDate", "subscriptionEndDate", "subscriptionActivateDate", "autoRenewEnabled", "contentCountDescription", "subscriptionBundle", "products", "collectionItems")</ID>
    <ID>MaxLineLength:SubtitleListResponseJsonAdapter.kt$SubtitleListResponseJsonAdapter$0 -&gt; items = listOfSubtitleResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:SubtitleListResponseJsonAdapter.kt$SubtitleListResponseJsonAdapter$moshi.adapter&lt;List&lt;SubtitleResponse&gt;&gt;(Types.newParameterizedType(List::class.java, SubtitleResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:SubtitleResponseJsonAdapter.kt$SubtitleResponseJsonAdapter$2 -&gt; contentLanguage = stringAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'contentLanguage' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:ToolbarBackgroundBehavior.kt$ToolbarBackgroundBehavior$override</ID>
    <ID>MaxLineLength:TournamentAdapter.kt$TournamentAdapter$TYPE_CUSTOM_COLLECTION -&gt; return CustomCollectionViewHolder(inflater.inflateAs(R.layout.layout_sport_custom_collection_list_item, parent), collectionClickListener)</ID>
    <ID>MaxLineLength:TournamentAdapter.kt$TournamentAdapter$TYPE_GAME_OF_THE_DAY -&gt; return GameOfTheDayViewHolder(inflater.inflateAs(R.layout.layout_game_of_day_list_item, parent), gameOfDayClickListener)</ID>
    <ID>MaxLineLength:TournamentInfo.kt$TournamentInfo : Parcelable</ID>
    <ID>MaxLineLength:TrailerListResponseJsonAdapter.kt$TrailerListResponseJsonAdapter$0 -&gt; items = listOfTrailerResponseAdapter.fromJson(reader) ?: throw JsonDataException("Non-null value 'items' was null at ${reader.path}")</ID>
    <ID>MaxLineLength:TrailerListResponseJsonAdapter.kt$TrailerListResponseJsonAdapter$moshi.adapter&lt;List&lt;TrailerResponse&gt;&gt;(Types.newParameterizedType(List::class.java, TrailerResponse::class.java), kotlin.collections.emptySet(), "items")</ID>
    <ID>MaxLineLength:TvSportCardActivity.kt$TvSportCardActivity$labelsContainer.fillWithGameLabels(LABEL_STYLE_TV_LARGE, game, resources.getDimensionPixelSize(R.dimen.size_small), prefs.isShowScoreAllowed())</ID>
    <ID>MaxLineLength:TvSportCardActivity.kt$TvSportCardActivity$override</ID>
    <ID>MaxLineLength:TvSportPlayerActivity.kt$TvSportPlayerActivity$exo_prev.setVisibleOrInvisible(presenter.liveContentType == LiveContentType.LIVE_GAME || presenter.liveContentType == LiveContentType.FULL_GAME)</ID>
    <ID>MaxLineLength:TvSportPlayerActivity.kt$TvSportPlayerActivity$override</ID>
    <ID>MaxLineLength:TvSportTournamentAdapter.kt$TvSportTournamentAdapter.SportCollectionViewHolder$inner</ID>
    <ID>MaxLineLength:TvSportTournamentFragment.kt$TvSportTournamentFragment$connectAction.setOnClickListener { activity?.startActivityForResult(DeviceConnectionActivity.makeIntent(context!!), MainActivity.REQUEST_CODE_CONNECT_TV) }</ID>
    <ID>MaxLineLength:TvSportTournamentFragment.kt$TvSportTournamentFragment$override</ID>
    <ID>MaxLineLength:UiScreenInfoResponseJsonAdapter.kt$UiScreenInfoResponseJsonAdapter$moshi.adapter&lt;Map&lt;String, String&gt;?&gt;(Types.newParameterizedType(Map::class.java, String::class.java, String::class.java), kotlin.collections.emptySet(), "attributes")</ID>
    <ID>MaxLineLength:UiUserSubscription.kt$private</ID>
    <ID>MaxLineLength:UiUserSubscription.kt$val product = subscription.products?.items?.takeIf { it.isNotEmpty() }?.get(0)?.takeIf { it.consumptionMode == ConsumptionMode.SUBSCRIPTION.value }</ID>
    <ID>MaxLineLength:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$JsonReader.Options.of("id", "offers", "preferences", "billingAccounts", "paymentMethods", "multiSubscriptions", "devices", "logoutAvailable", "sportEplActivated", "phone", "phoneConfirmed")</ID>
    <ID>MaxLineLength:VideoAspectRatioFrameLayout.kt$VideoAspectRatioFrameLayout$resizeAvailableListener?.invoke(Math.abs(aspectDeformation) &gt; MAX_ASPECT_RATIO_DEFORMATION_FRACTION &amp;&amp; orientation == Configuration.ORIENTATION_LANDSCAPE)</ID>
    <ID>MaxLineLength:VideoCastCompoundView.kt$VideoCastCompoundView$recyclerView.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(context, androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL, false)</ID>
    <ID>MaxLineLength:VideoCollectionFragment.kt$VideoCollectionFragment.&lt;no name provided&gt;$override</ID>
    <ID>MaxLineLength:VideoCollectionModel.kt$fun VideoCollectionModel.Companion.from(id: String, title: String, alias: String?, item: ElementRelationListResponse?, serverTime: Long): VideoCollectionModel</ID>
    <ID>MaxLineLength:VideoCollectionModel.kt$fun VideoCollectionModel.Companion.getRelatedItemsCollection(alias: String?, item: ElementRelationListResponse?, serverTime: Long): VideoCollectionModel</ID>
    <ID>MaxLineLength:VideoCollectionsInteractor.kt$VideoCollectionsInteractor$private</ID>
    <ID>MaxLineLength:VideoOverviewCompoundView.kt$VideoOverviewCompoundView$detailsRecyclerView.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(context, androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL, false)</ID>
    <ID>MaxLineLength:VideoOverviewCompoundView.kt$VideoOverviewCompoundView$favouriteButtonView.changeText(if (item.isInBookmarks) R.string.video_overview_button_favourited else R.string.video_overview_button_favourite)</ID>
    <ID>MaxLineLength:VideoOverviewCompoundView.kt$VideoOverviewCompoundView$languageRecyclerView.layoutManager = androidx.recyclerview.widget.LinearLayoutManager(context, androidx.recyclerview.widget.LinearLayoutManager.HORIZONTAL, false)</ID>
    <ID>MaxLineLength:WebCreditCardPresenter.kt$WebCreditCardPresenter$purchaseInteractor</ID>
    <ID>MaxLineLength:XiaomiPatchWallUtils.kt$XiaomiPatchWallUtils$fun updateTransactionalSubscriptions(context: Context, remoteSubscriptions: List&lt;TransactionalSubscriptionModel&gt;, localSubscriptions: List&lt;PatchWallSubscriptionModel&gt;): List&lt;PatchWallSubscriptionModel&gt;</ID>
    <ID>MayBeConst:DateExtension.kt$val MILLISECONDS_IN_SECOND: Long = 1000</ID>
    <ID>MayBeConst:DateExtension.kt$val SECONDS_IN_MINUTE: Long = 60</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val ASPECT_RATIO_TAG = "aspectRatio"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val CENC_DASH_CAST_MIME_TYPE = "application/dash+xml"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val DEBUG_TAG = "debug"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val ELEMENT_COVER_TAG = "cover"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val ELEMENT_ID_TAG = "elementId"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val ELEMENT_TYPE_TAG = "elementType"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val FAIL_OVER_URLS_TAG = "failOverUrls"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val LICENSE_CUSTOM_DATA_TAG = "licenseCustomData"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val LICENSE_DRM_TYPE_TAG = "licenseDrmType"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val LICENSE_URL_TAG = "licenseUrl"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val LIVE_CONTENT_TYPE_TAG = "liveContentType"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val LONG_TITLE_TAG = "longTitle"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val MP4_CAST_MIME_TYPE = "video/mp4"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val SHORT_TITLE_TAG = "shortTitle"</ID>
    <ID>MayBeConst:Media.kt$MediaInfoFactory$val WIDEVINE_CAST_DRM_TYPE = "widevine"</ID>
    <ID>NestedBlockDepth:ChangeBackgroundColorTransition.kt$ChangeBackgroundColorTransition$override fun createAnimator(sceneRoot: ViewGroup, startValues: TransitionValues?, endValues: TransitionValues?): Animator?</ID>
    <ID>NestedBlockDepth:ChangeTextColorTransition.kt$ChangeTextColorTransition$override fun createAnimator(sceneRoot: ViewGroup, startValues: TransitionValues?, endValues: TransitionValues?): Animator?</ID>
    <ID>NestedBlockDepth:ChannelManager.kt$ChannelManager$@RequiresApi(Build.VERSION_CODES.O) fun handleMovieForWatchNext(context: Context, element: Element, playbackPosition: Int, duration: Int)</ID>
    <ID>NestedBlockDepth:ChannelManager.kt$ChannelManager$@RequiresApi(Build.VERSION_CODES.O) fun updateDefaultChannel(context: Context, isUserAuthorized: Boolean)</ID>
    <ID>NestedBlockDepth:ChannelManager.kt$ChannelManager$private fun inflateChildren(context: Context, parent: Element)</ID>
    <ID>NestedBlockDepth:CollectionsCarouselAdapter.kt$CollectionsCarouselAdapter.CollectionViewHolder$fun bindCardVideo(uiItem: T, position: Int)</ID>
    <ID>NestedBlockDepth:CollectionsCarouselLayoutManager.kt$CollectionsCarouselLayoutManager$override fun onInterceptFocusSearch(focused: View, direction: Int): View?</ID>
    <ID>NestedBlockDepth:ConfigApi.kt$ConfigApiProvider$override fun getConfig(): ConfigModel</ID>
    <ID>NestedBlockDepth:CustomPlayerView.kt$CustomPlayerView$fun showDoubleTap(direction: Int)</ID>
    <ID>NestedBlockDepth:CustomPlayerView.kt$CustomPlayerView$private fun updateForCurrentTrackSelections(isNewPlayer: Boolean)</ID>
    <ID>NestedBlockDepth:ElementDao.kt$ElementDao$private fun insertElementWithRelation(response: ElementResponse)</ID>
    <ID>NestedBlockDepth:ErrorInfo.kt$private fun resolvePromoCodeActivationFailedDescription(context: Context, list: OfferActivationListResponse?): String</ID>
    <ID>NestedBlockDepth:GameExtensions.kt$fun Game.getGameStatusText(context: Context, source: GameStatusSource, serverTime: Long): String</ID>
    <ID>NestedBlockDepth:HigherOrderFunction.kt$@Deprecated("use bundleOfKtx") fun bundleOf(vararg pairs: Pair&lt;String, Any?&gt;)</ID>
    <ID>NestedBlockDepth:KeyboardView.kt$KeyboardView$private fun findAndRequestKeyFocus(key: KeyModel): Boolean</ID>
    <ID>NestedBlockDepth:KeyboardView.kt$KeyboardView$private fun reloadKeys()</ID>
    <ID>NestedBlockDepth:KollectorErrors.kt$KollectorErrors$fun resolvePlaybackErrorCode(e: Throwable?): String?</ID>
    <ID>NestedBlockDepth:KollectorEventsJsonAdapter.kt$KollectorEventsJsonAdapter$override fun toJson(writer: JsonWriter, value: List&lt;KollectorEvent&gt;?)</ID>
    <ID>NestedBlockDepth:LoggerManager.kt$LoggerManager$private fun readSavedLogs(file: File): MutableList&lt;T&gt;</ID>
    <ID>NestedBlockDepth:Model.kt$fun List&lt;TournamentElementItem&gt;.toSportListItems(header: String?, gameOfDay: Boolean = false, gameOfDayHeader: String? = null): MutableList&lt;SportListItem&lt;*&gt;&gt;</ID>
    <ID>NestedBlockDepth:NotificationManager.kt$NotificationManager$fun updateNotifications(context: Context, isUserAuthorized: Boolean?)</ID>
    <ID>NestedBlockDepth:OfferActivatedDialog.kt$OfferActivatedDialog$private fun bindView()</ID>
    <ID>NestedBlockDepth:PlaybackException.kt$PlaybackException.Companion$//TODO add more ExoPlaybackExceptions fun from(ex: Throwable): PlaybackException</ID>
    <ID>NestedBlockDepth:PlayerControlView.kt$PlayerControlView$fun dispatchMediaKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>NestedBlockDepth:PlayerControlView.kt$PlayerControlView$private fun hideAllButOne(id: Int)</ID>
    <ID>NestedBlockDepth:PlayerControlView.kt$PlayerControlView$private fun seekToTimeBarPosition(positionMs: Long)</ID>
    <ID>NestedBlockDepth:PlayerControlView.kt$PlayerControlView$private fun updateProgress()</ID>
    <ID>NestedBlockDepth:ProductListPresenter.kt$ProductListPresenter$fun selectProduct(productPos: Int)</ID>
    <ID>NestedBlockDepth:RailLayoutManager.kt$RailLayoutManager$override fun onInterceptFocusSearch(focused: View, direction: Int): View?</ID>
    <ID>NestedBlockDepth:RecommendationBootReceiver.kt$RecommendationBootReceiver$override fun onReceive(context: Context?, intent: Intent?)</ID>
    <ID>NestedBlockDepth:SmallGameViewHolder.kt$private fun bindGame(game: Game?, itemView: ViewGroup)</ID>
    <ID>NestedBlockDepth:SportTrackSelectorView.kt$SportTrackSelectorView$override fun dispatchKeyEvent(event: KeyEvent?): Boolean</ID>
    <ID>NestedBlockDepth:TrackSelectorExtensions.kt$internal fun DefaultTrackSelector.setAudioTrack(audioTrack: PlaybackAudioTrackModel)</ID>
    <ID>NestedBlockDepth:TrackSelectorExtensions.kt$internal fun DefaultTrackSelector.setTextTrack(textTrack: PlaybackTextTrackModel)</ID>
    <ID>NestedBlockDepth:TrackSelectorExtensions.kt$internal fun DefaultTrackSelector.setVideoTrack(videoTrack: PlaybackVideoTrackModel)</ID>
    <ID>NestedBlockDepth:TrackSelectorExtensions.kt$internal fun DefaultTrackSelector.setVideoTracks(trackMap: TrackQualityMap)</ID>
    <ID>NestedBlockDepth:TvSportCollectionActivity.kt$TvSportCollectionActivity$override fun showCollection(name: String?, items: List&lt;SportListItem&lt;*&gt;&gt;, reset: Boolean, footer: String?)</ID>
    <ID>NestedBlockDepth:TvSportTournamentFragment.kt$TvSportTournamentFragment$override fun showShowCase(onAirHeader: String?, onAirItems: List&lt;SportListItem&lt;*&gt;&gt;?, seasonHeader: String?, seasonItems: List&lt;SportListItem&lt;*&gt;&gt;?)</ID>
    <ID>NestedBlockDepth:TvSportTournamentFragment.kt$TvSportTournamentFragment.RailFocusInterceptor$override fun interceptFocusSearch(focused: View, direction: Int): View?</ID>
    <ID>NestedBlockDepth:UiUserSubscription.kt$private fun createRowsWithOffer(context: Context, subscription: ElementResponse, offer: OfferResponse, insteadPrice: Int?, serverDate: Long): Triple&lt;String?, String?, String?&gt;</ID>
    <ID>NestedBlockDepth:UiUserSubscription.kt$private fun resolveOfferAndPrice(subscription: ElementResponse, userOffers: List&lt;OfferResponse&gt;?): Pair&lt;OfferResponse?, Int?&gt;?</ID>
    <ID>NestedBlockDepth:VideoCardItemDecorator.kt$VideoCardItemDecorator$override fun onDraw(c: Canvas, parent: RecyclerView, state: RecyclerView.State)</ID>
    <ID>PreferToOverPairSyntax:HttpExtensions.kt$Pair</ID>
    <ID>PreferToOverPairSyntax:ListExtension.kt$Pair</ID>
    <ID>PreferToOverPairSyntax:UiUserSubscription.kt$Pair</ID>
    <ID>PreferToOverPairSyntax:XiaomiIntentUtils.kt$XiaomiIntentUtils$Pair</ID>
    <ID>SpacingBetweenPackageAndImports:BasePagerIndicator.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:BootReceiver.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:CenteredImageSpan.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:CirclePagerIndicator.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:CollectionCoverTransformation.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:ContextExtension.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:CrosslinedTextView.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:FteFragment.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:FteSubscriptionFragment.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:Game.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:Media.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:MultiScreenButton.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:NotificationLandingActivity.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:OnPageChangeListener.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:PageIndicator.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:RecommendationBootReceiver.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:RecommendationNotificationBuilder.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:SearchBarCompoundView.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:SportActivationPhoneFragment.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:SportCalendarFragment.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:SportCardFragment.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:SportCardInteractor.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:SportMultiscreenInteractor.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:TextUtils.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:TrailerModel.kt$ </ID>
    <ID>SpacingBetweenPackageAndImports:TvSportPlayerActivity.kt$ </ID>
    <ID>StringLiteralDuplication:ActionResponseJsonAdapter.kt$ActionResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:ActivationActionJsonAdapter.kt$ActivationActionJsonAdapter$"activationActionType"</ID>
    <ID>StringLiteralDuplication:AssetListResponseJsonAdapter.kt$AssetListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$"audioTracks"</ID>
    <ID>StringLiteralDuplication:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$"failoverUrls"</ID>
    <ID>StringLiteralDuplication:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$"licenseId"</ID>
    <ID>StringLiteralDuplication:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$"liveContentType"</ID>
    <ID>StringLiteralDuplication:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$"media"</ID>
    <ID>StringLiteralDuplication:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$"subtitles"</ID>
    <ID>StringLiteralDuplication:AudioTrackListResponseJsonAdapter.kt$AudioTrackListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:AudioTrackResponseJsonAdapter.kt$AudioTrackResponseJsonAdapter$"contentLanguage"</ID>
    <ID>StringLiteralDuplication:AudioTrackResponseJsonAdapter.kt$AudioTrackResponseJsonAdapter$"langKey"</ID>
    <ID>StringLiteralDuplication:AuthInfoResponseJsonAdapter.kt$AuthInfoResponseJsonAdapter$"sessionToken"</ID>
    <ID>StringLiteralDuplication:BalanceResponseJsonAdapter.kt$BalanceResponseJsonAdapter$"currencyCode"</ID>
    <ID>StringLiteralDuplication:BalanceResponseJsonAdapter.kt$BalanceResponseJsonAdapter$"value"</ID>
    <ID>StringLiteralDuplication:BasicCoverElementHolderResponseJsonAdapter.kt$BasicCoverElementHolderResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:BasicCoverElementResponseJsonAdapter.kt$BasicCoverElementResponseJsonAdapter$"primaryColor"</ID>
    <ID>StringLiteralDuplication:BillingAccountListResponseJsonAdapter.kt$BillingAccountListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:BillingAccountResponseJsonAdapter.kt$BillingAccountResponseJsonAdapter$"balance"</ID>
    <ID>StringLiteralDuplication:BillingAccountResponseJsonAdapter.kt$BillingAccountResponseJsonAdapter$"description"</ID>
    <ID>StringLiteralDuplication:BillingAccountResponseJsonAdapter.kt$BillingAccountResponseJsonAdapter$"reserve"</ID>
    <ID>StringLiteralDuplication:CategoriesResponseJsonAdapter.kt$CategoriesResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:CollectionElementResponseJsonAdapter.kt$CollectionElementResponseJsonAdapter$"collectionItems"</ID>
    <ID>StringLiteralDuplication:CollectionListHolderResponseJsonAdapter.kt$CollectionListHolderResponseJsonAdapter$"collectionItems"</ID>
    <ID>StringLiteralDuplication:CollectionListResponseJsonAdapter.kt$CollectionListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:CollectionResponseJsonAdapter.kt$CollectionResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:CollectionResponseJsonAdapter.kt$CollectionResponseJsonAdapter$"serviceInfo"</ID>
    <ID>StringLiteralDuplication:CollectionResponseJsonAdapter.kt$CollectionResponseJsonAdapter$"userInfo"</ID>
    <ID>StringLiteralDuplication:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$"addMoneyMinValue"</ID>
    <ID>StringLiteralDuplication:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$"callCenterPhone"</ID>
    <ID>StringLiteralDuplication:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$"kinopoiskMinRate"</ID>
    <ID>StringLiteralDuplication:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$"playerPositionSaveTimeout"</ID>
    <ID>StringLiteralDuplication:ConfigModelJsonAdapter.kt$ConfigModelJsonAdapter$"screenApiServerUrl"</ID>
    <ID>StringLiteralDuplication:ConfigResponseJsonAdapter.kt$ConfigResponseJsonAdapter$"config"</ID>
    <ID>StringLiteralDuplication:CountryHolderResponseJsonAdapter.kt$CountryHolderResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:CountryListResponseJsonAdapter.kt$CountryListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:CoverElementHolderResponseJsonAdapter.kt$CoverElementHolderResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:CoverElementResponseJsonAdapter.kt$CoverElementResponseJsonAdapter$"imageType"</ID>
    <ID>StringLiteralDuplication:CoverElementResponseJsonAdapter.kt$CoverElementResponseJsonAdapter$"width"</ID>
    <ID>StringLiteralDuplication:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$"appVersion"</ID>
    <ID>StringLiteralDuplication:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$"sdkVersion"</ID>
    <ID>StringLiteralDuplication:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$"supportHd"</ID>
    <ID>StringLiteralDuplication:DeviceItemResponseJsonAdapter.kt$DeviceItemResponseJsonAdapter$"manufacturer"</ID>
    <ID>StringLiteralDuplication:DeviceItemsResponseJsonAdapter.kt$DeviceItemsResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:ElementListResponseJsonAdapter.kt$ElementListResponseJsonAdapter$"elements"</ID>
    <ID>StringLiteralDuplication:ElementRelationListResponseJsonAdapter.kt$ElementRelationListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:ElementRelationListResponseJsonAdapter.kt$ElementRelationListResponseJsonAdapter$"totalSize"</ID>
    <ID>StringLiteralDuplication:ElementRelationResponseJsonAdapter.kt$ElementRelationResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"activationRules"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"actors"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"allLiveContentTypes"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"assets"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"basicCovers"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"collectionItems"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"countries"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"covers"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"genres"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"licenses"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"liveContentType"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"needActivate"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"okkoRating"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"parent"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"products"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"seqNo"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"studios"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"subscriptionActivateDate"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"subscriptionBoughtWithOfferInfo"</ID>
    <ID>StringLiteralDuplication:ElementResponseJsonAdapter.kt$ElementResponseJsonAdapter$"trailers"</ID>
    <ID>StringLiteralDuplication:ElementsListResponseJsonAdapter.kt$ElementsListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:GameExtensions.kt$"$status $DOT_SYMBOL $liveStart"</ID>
    <ID>StringLiteralDuplication:GenreHolderResponseJsonAdapter.kt$GenreHolderResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:GenreListResponseJsonAdapter.kt$GenreListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:GenreResponseJsonAdapter.kt$GenreResponseJsonAdapter$"alias"</ID>
    <ID>StringLiteralDuplication:HomeResponseJsonAdapter.kt$HomeResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:ItemElementHolderResponseJsonAdapter.kt$ItemElementHolderResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:ItemElementHolderWithUserInfoResponseJsonAdapter.kt$ItemElementHolderWithUserInfoResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:ItemElementHolderWithUserInfoResponseJsonAdapter.kt$ItemElementHolderWithUserInfoResponseJsonAdapter$"userInfo"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"actors"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"assets"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"basicCovers"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"countries"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"covers"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"duration"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"genres"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"inNovelty"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"licenses"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"okkoRating"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"products"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"seqNo"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"similar"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"studios"</ID>
    <ID>StringLiteralDuplication:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$"trailers"</ID>
    <ID>StringLiteralDuplication:ItemListElementResponseJsonAdapter.kt$ItemListElementResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:ItemListElementResponseJsonAdapter.kt$ItemListElementResponseJsonAdapter$"totalSize"</ID>
    <ID>StringLiteralDuplication:ItemListHolderResponseJsonAdapter.kt$ItemListHolderResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:KeyModelJsonAdapter.kt$KeyModelJsonAdapter$"weight"</ID>
    <ID>StringLiteralDuplication:KeyboardModelJsonAdapter.kt$KeyboardModelJsonAdapter$"layout"</ID>
    <ID>StringLiteralDuplication:KeyboardModelJsonAdapter.kt$KeyboardModelJsonAdapter$"reload"</ID>
    <ID>StringLiteralDuplication:LicenseListResponseJsonAdapter.kt$LicenseListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:LicenseResponseJsonAdapter.kt$LicenseResponseJsonAdapter$"expireDate"</ID>
    <ID>StringLiteralDuplication:LicenseResponseJsonAdapter.kt$LicenseResponseJsonAdapter$"licenseServerUrls"</ID>
    <ID>StringLiteralDuplication:LocationResponseJsonAdapter.kt$LocationResponseJsonAdapter$"countryCode"</ID>
    <ID>StringLiteralDuplication:MainMenuResponseJsonAdapter.kt$MainMenuResponseJsonAdapter$"mainMenu"</ID>
    <ID>StringLiteralDuplication:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$"drmType"</ID>
    <ID>StringLiteralDuplication:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$"quality"</ID>
    <ID>StringLiteralDuplication:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$"width"</ID>
    <ID>StringLiteralDuplication:MyMoviesResponseJsonAdapter.kt$MyMoviesResponseJsonAdapter$"myMovies"</ID>
    <ID>StringLiteralDuplication:NotificationItemsHolderJsonAdapter.kt$NotificationItemsHolderJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:NotificationResponseJsonAdapter.kt$NotificationResponseJsonAdapter$"actions"</ID>
    <ID>StringLiteralDuplication:OfferActivationListResponseJsonAdapter.kt$OfferActivationListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$"activatedOffer"</ID>
    <ID>StringLiteralDuplication:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$"failedReason"</ID>
    <ID>StringLiteralDuplication:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$"offerId"</ID>
    <ID>StringLiteralDuplication:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$"startDate"</ID>
    <ID>StringLiteralDuplication:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$"status"</ID>
    <ID>StringLiteralDuplication:OfferListResponseJsonAdapter.kt$OfferListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"activationActions"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"discountPercentage"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"duration"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"needCard"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"purchasedSubscriptionId"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"renewalPrice"</ID>
    <ID>StringLiteralDuplication:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$"subscriptions"</ID>
    <ID>StringLiteralDuplication:PaymentInfoResponseJsonAdapter.kt$PaymentInfoResponseJsonAdapter$"token"</ID>
    <ID>StringLiteralDuplication:PaymentMethodListResponseJsonAdapter.kt$PaymentMethodListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:PaymentMethodResponseJsonAdapter.kt$PaymentMethodResponseJsonAdapter$"creditCard"</ID>
    <ID>StringLiteralDuplication:PaymentMethodResponseJsonAdapter.kt$PaymentMethodResponseJsonAdapter$"description"</ID>
    <ID>StringLiteralDuplication:PaymentMethodResponseJsonAdapter.kt$PaymentMethodResponseJsonAdapter$"qiwiWallet"</ID>
    <ID>StringLiteralDuplication:PaymentStatusResponseJsonAdapter.kt$PaymentStatusResponseJsonAdapter$"errorReasonCode"</ID>
    <ID>StringLiteralDuplication:PaymentStatusResponseJsonAdapter.kt$PaymentStatusResponseJsonAdapter$"transactionStatus"</ID>
    <ID>StringLiteralDuplication:PersonHolderResponseJsonAdapter.kt$PersonHolderResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:PersonListResponseJsonAdapter.kt$PersonListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:PhoneCodesModelJsonAdapter.kt$PhoneCodesModelJsonAdapter$"codes"</ID>
    <ID>StringLiteralDuplication:PinResponseJsonAdapter.kt$PinResponseJsonAdapter$"pinInfo"</ID>
    <ID>StringLiteralDuplication:PlaybackResponseJsonAdapter.kt$PlaybackResponseJsonAdapter$"callId"</ID>
    <ID>StringLiteralDuplication:PlaybackResponseJsonAdapter.kt$PlaybackResponseJsonAdapter$"playbackState"</ID>
    <ID>StringLiteralDuplication:PlaybackStateJsonAdapter.kt$PlaybackStateJsonAdapter$"errorCode"</ID>
    <ID>StringLiteralDuplication:PriceResponseJsonAdapter.kt$PriceResponseJsonAdapter$"currencyCode"</ID>
    <ID>StringLiteralDuplication:PriceResponseJsonAdapter.kt$PriceResponseJsonAdapter$"value"</ID>
    <ID>StringLiteralDuplication:ProductListResponseJsonAdapter.kt$ProductListResponseJsonAdapter$"emptyReason"</ID>
    <ID>StringLiteralDuplication:ProductListResponseJsonAdapter.kt$ProductListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$"duration"</ID>
    <ID>StringLiteralDuplication:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$"offer"</ID>
    <ID>StringLiteralDuplication:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$"paymentMethods"</ID>
    <ID>StringLiteralDuplication:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$"price"</ID>
    <ID>StringLiteralDuplication:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$"qualities"</ID>
    <ID>StringLiteralDuplication:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$"subscription"</ID>
    <ID>StringLiteralDuplication:PurchaseResponseJsonAdapter.kt$PurchaseResponseJsonAdapter$"transactionInfo"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"authInfo"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"availableOffers"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"elements"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"paymentInfo"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"paymentStatus"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"serviceInfo"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"status"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"tournament"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"transactionInfo"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"uiScreenInfo"</ID>
    <ID>StringLiteralDuplication:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$"userInfo"</ID>
    <ID>StringLiteralDuplication:ServiceInfoHolderResponseJsonAdapter.kt$ServiceInfoHolderResponseJsonAdapter$"serverTime"</ID>
    <ID>StringLiteralDuplication:ServiceInfoResponseJsonAdapter.kt$ServiceInfoResponseJsonAdapter$"clientLocation"</ID>
    <ID>StringLiteralDuplication:ServiceInfoResponseJsonAdapter.kt$ServiceInfoResponseJsonAdapter$"notifications"</ID>
    <ID>StringLiteralDuplication:ServiceInfoResponseJsonAdapter.kt$ServiceInfoResponseJsonAdapter$"serverTime"</ID>
    <ID>StringLiteralDuplication:SportCollectionListHolderResponseJsonAdapter.kt$SportCollectionListHolderResponseJsonAdapter$"collectionItems"</ID>
    <ID>StringLiteralDuplication:SportCollectionListResponseJsonAdapter.kt$SportCollectionListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:SportCollectionResponseJsonAdapter.kt$SportCollectionResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:SportCollectionResponseJsonAdapter.kt$SportCollectionResponseJsonAdapter$"serviceInfo"</ID>
    <ID>StringLiteralDuplication:SportCollectionResponseJsonAdapter.kt$SportCollectionResponseJsonAdapter$"userInfo"</ID>
    <ID>StringLiteralDuplication:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$"callId"</ID>
    <ID>StringLiteralDuplication:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$"offerActivations"</ID>
    <ID>StringLiteralDuplication:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$"serviceInfo"</ID>
    <ID>StringLiteralDuplication:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$"status"</ID>
    <ID>StringLiteralDuplication:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$"uiScreenInfo"</ID>
    <ID>StringLiteralDuplication:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$"userInfo"</ID>
    <ID>StringLiteralDuplication:StudioHolderResponseJsonAdapter.kt$StudioHolderResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:StudioListResponseJsonAdapter.kt$StudioListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:StudioResponseJsonAdapter.kt$StudioResponseJsonAdapter$"covers"</ID>
    <ID>StringLiteralDuplication:SubscriptionHolderListResponseJsonAdapter.kt$SubscriptionHolderListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:SubscriptionHolderResponseJsonAdapter.kt$SubscriptionHolderResponseJsonAdapter$"element"</ID>
    <ID>StringLiteralDuplication:SubscriptionListHolderResponseJsonAdapter.kt$SubscriptionListHolderResponseJsonAdapter$"elements"</ID>
    <ID>StringLiteralDuplication:SubscriptionListHolderResponseJsonAdapter.kt$SubscriptionListHolderResponseJsonAdapter$"serviceInfo"</ID>
    <ID>StringLiteralDuplication:SubscriptionListHolderResponseJsonAdapter.kt$SubscriptionListHolderResponseJsonAdapter$"userInfo"</ID>
    <ID>StringLiteralDuplication:SubscriptionListResponseJsonAdapter.kt$SubscriptionListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"basicCovers"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"collectionItems"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"covers"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"expireDate"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"products"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"renewable"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"title"</ID>
    <ID>StringLiteralDuplication:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$"trailers"</ID>
    <ID>StringLiteralDuplication:SubtitleListResponseJsonAdapter.kt$SubtitleListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:SubtitleResponseJsonAdapter.kt$SubtitleResponseJsonAdapter$"forced"</ID>
    <ID>StringLiteralDuplication:TrailerListResponseJsonAdapter.kt$TrailerListResponseJsonAdapter$"items"</ID>
    <ID>StringLiteralDuplication:TrailerResponseJsonAdapter.kt$TrailerResponseJsonAdapter$"liveContentType"</ID>
    <ID>StringLiteralDuplication:TrailerResponseJsonAdapter.kt$TrailerResponseJsonAdapter$"media"</ID>
    <ID>StringLiteralDuplication:UiScreenInfoResponseJsonAdapter.kt$UiScreenInfoResponseJsonAdapter$"attributes"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"billingAccounts"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"devices"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"logoutAvailable"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"multiSubscriptions"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"offers"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"paymentMethods"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"phone"</ID>
    <ID>StringLiteralDuplication:UserInfoResponseJsonAdapter.kt$UserInfoResponseJsonAdapter$"preferences"</ID>
    <ID>ThrowsCount:KeyboardProvider.kt$KeyboardProvider$fun readRusEngKeyboardKit()</ID>
    <ID>ThrowsCount:LoginProvider.kt$LoginProvider$@Throws(ScreenApiStatusException::class) private fun saveResponseAndGetResult(response: ScreenApiResponse?): LoginableResult</ID>
    <ID>ThrowsCount:LoginProvider.kt$LoginProvider$private fun requestLoginByDeviceId(): ApmResponse</ID>
    <ID>TooManyFunctions:Analytics.kt$Analytics</ID>
    <ID>TooManyFunctions:AnalyticsCompat.kt$AnalyticsCompat : Analytics</ID>
    <ID>TooManyFunctions:AuthScreenApi.kt$AuthScreenApi</ID>
    <ID>TooManyFunctions:BindingModule.kt$BindingModule</ID>
    <ID>TooManyFunctions:CustomPlayerView.kt$CustomPlayerView : FrameLayout</ID>
    <ID>TooManyFunctions:DataConverter.kt$DataConverter : Serializable</ID>
    <ID>TooManyFunctions:DeviceInfoProvider.kt$DeviceInfoProvider : DeviceInfo</ID>
    <ID>TooManyFunctions:ElementDao.kt$ElementDao</ID>
    <ID>TooManyFunctions:FteActivity.kt$FteActivity : BaseActivityFteOfferDelegateFteLoginDelegateFteSubscriptionDelegateFteStaticImageDelegate</ID>
    <ID>TooManyFunctions:KollectorAnalytics.kt$KollectorAnalytics : Analytics</ID>
    <ID>TooManyFunctions:MainApplication.kt$MainApplication&lt;T : AppComponent&lt;*&gt;&gt; : ApplicationHasActivityInjectorHasSupportFragmentInjectorHasBroadcastReceiverInjectorInjectorAppInstanceMainApplicationView</ID>
    <ID>TooManyFunctions:MobileSportTournamentFragment.kt$MobileSportTournamentFragment : SportNetworkErrorFragmentMobileSportTournamentViewSportMultiscreenView</ID>
    <ID>TooManyFunctions:PaymentMethodListFragment.kt$PaymentMethodListFragment : MvpAppCompatFragmentPaymentMethodListView</ID>
    <ID>TooManyFunctions:PaymentMethodListPresenter.kt$PaymentMethodListPresenter : MvpPresenter</ID>
    <ID>TooManyFunctions:PlayerControlView.kt$PlayerControlView : FrameLayout</ID>
    <ID>TooManyFunctions:PlayerFragment.kt$PlayerFragment : MvpAppCompatFragmentPlayerViewKeyDownHandlerAnalyticsPlayer</ID>
    <ID>TooManyFunctions:PlayerPresenter.kt$PlayerPresenter : MvpPresenter</ID>
    <ID>TooManyFunctions:SettingsActivity.kt$SettingsActivity : MoxyActivitySettingsViewSendCodeListenerCheckCodeListenerListenerListener</ID>
    <ID>TooManyFunctions:SportCardFragment.kt$SportCardFragment : MvpAppCompatFragmentMobileSportCardViewSportMultiscreenView</ID>
    <ID>TooManyFunctions:SportPlayerActivity.kt$SportPlayerActivity : MvpAppCompatActivitySportPlayerViewAnalyticsPlayer</ID>
    <ID>TooManyFunctions:TvSportCardActivity.kt$TvSportCardActivity : MoxyActivityTvSportCardViewSendCodeListenerCheckCodeListener</ID>
    <ID>TooManyFunctions:TvSportPlayerActivity.kt$TvSportPlayerActivity : MoxyActivitySportPlayerViewAnalyticsPlayerErrorDialogCallback</ID>
    <ID>TooManyFunctions:TvSportTournamentFragment.kt$TvSportTournamentFragment : MoxyFragmentTvSportTournamentViewKeyDownHandlerKeyUpHandler</ID>
    <ID>TooManyFunctions:VideoInfoFragment.kt$VideoInfoFragment : MvpAppCompatFragmentVideoInfoViewIResumableAfterAddingFragment</ID>
    <ID>TooManyFunctions:VideoInfoFragment.kt$VideoInfoFragment : MvpAppCompatFragmentVideoInfoViewIResumableAfterAddingFragmentIReloadableAfterResumeFragment</ID>
    <ID>TooManyFunctions:VideoInfoPresenter.kt$VideoInfoPresenter : MvpPresenter</ID>
    <ID>TooManyFunctions:VideoInfoView.kt$VideoInfoView : MvpViewShowingErrorView</ID>
    <ID>TooManyFunctions:ViewExtensions.kt$tv.okko.androidtv.common.ui.extensions.ViewExtensions.kt</ID>
    <ID>TrailingWhitespace:CategoryPresenter.kt$tv.okko.androidtv.collections.presenters.CategoryPresenter.kt</ID>
    <ID>TrailingWhitespace:TvSportPlayerActivity.kt$tv.okko.androidtv.v2.ui.activities.TvSportPlayerActivity.kt</ID>
    <ID>UnnecessaryApply:AddPhoneActivity.kt$AddPhoneActivity$apply { showAllowingStateLoss(supportFragmentManager) }</ID>
    <ID>UnnecessaryApply:ContextExtension.kt$apply { show(supportFragmentManager, COMMON_ERROR_DIALOG_TAG) }</ID>
    <ID>UnnecessaryApply:ContextExtension.kt$apply { show(supportFragmentManager, tag) }</ID>
    <ID>UnnecessaryApply:CustomLoadControl.kt$CustomLoadControl$apply { remove(LOADING_PRIORITY) }</ID>
    <ID>UnnecessaryApply:CustomPlayerView.kt$CustomPlayerView$apply { setCues(null) }</ID>
    <ID>UnnecessaryApply:DoubleTapSeekView.kt$apply { stop() }</ID>
    <ID>UnnecessaryApply:PaymentMethodsPresenter.kt$PaymentMethodsPresenter$apply { removeAll { it.type == PaymentMethodType.CHRONOPAY_CARD_AND_LINK.value } }</ID>
    <ID>UnnecessaryApply:TvSportPlayerActivity.kt$TvSportPlayerActivity$apply { addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON) }</ID>
    <ID>UnnecessaryApply:VideoAboutScrollView.kt$VideoAboutScrollView$apply { setPadding(paddingLeft, 0, paddingRight, paddingBottom) }</ID>
    <ID>UnnecessaryApply:VideoCollectionCompoundView.kt$VideoCollectionCompoundView$apply { clone(context, R.layout.compound_view_video_collection) }</ID>
    <ID>UnnecessaryApply:VideoCollectionCompoundView.kt$VideoCollectionCompoundView$apply { clone(context, R.layout.compound_view_video_collection_focused) }</ID>
    <ID>UnnecessaryParentheses:BasePagerIndicator.kt$BasePageIndicator.&lt;no name provided&gt;$(row * mPageColumn)</ID>
    <ID>UnnecessaryParentheses:CalendarView.kt$CalendarView$(maxDate != null &amp;&amp; date &gt; maxDate.monthEnd())</ID>
    <ID>UnnecessaryParentheses:CalendarView.kt$CalendarView$(minDate != null &amp;&amp; date &lt; minDate.monthBeginning())</ID>
    <ID>UnnecessaryParentheses:CategoryPresenter.kt$CategoryPresenter$(selectedCategory == null &amp;&amp; category == lastSelectedCategory)</ID>
    <ID>UnnecessaryParentheses:ChannelManager.kt$ChannelManager$(element.ratingTimeMark != null &amp;&amp; playbackPosition &gt; element.ratingTimeMark)</ID>
    <ID>UnnecessaryParentheses:ChannelManager.kt$ChannelManager$(element.ratingTimeMark == null &amp;&amp; duration &gt; 1 &amp;&amp; playbackPosition.toFloat() / duration &gt; IS_WATCHED_PERCENT)</ID>
    <ID>UnnecessaryParentheses:CheckCodeFragment.kt$CheckCodeFragment$(targetFragment as? CheckCodeListener)</ID>
    <ID>UnnecessaryParentheses:ContextExtension.kt$(supportFragmentManager.findFragmentByTag(COMMON_ERROR_DIALOG_TAG) as? CommonErrorDialogFragment)</ID>
    <ID>UnnecessaryParentheses:ContextExtension.kt$(supportFragmentManager.findFragmentByTag(tag) as? ProgressDialogFragment)</ID>
    <ID>UnnecessaryParentheses:CustomLoadControl.kt$CustomLoadControl$(bufferTimeState == BETWEEN_WATERMARKS &amp;&amp; !targetBufferSizeReached)</ID>
    <ID>UnnecessaryParentheses:CustomPlayerView.kt$CustomPlayerView$(TimeUnit.MILLISECONDS.toSeconds(delayedSeekDuration.absoluteValue))</ID>
    <ID>UnnecessaryParentheses:CustomPlayerView.kt$CustomPlayerView$(window.isDynamic &amp;&amp; isOnLiveEdge(currentPosition, window.defaultPositionMs))</ID>
    <ID>UnnecessaryParentheses:CustomPlayerView.kt$CustomPlayerView.&lt;no name provided&gt;$(detector?.currentSpan ?: 0f)</ID>
    <ID>UnnecessaryParentheses:CustomPlayerView.kt$CustomPlayerView.ComponentListener$(videoSurfaceView as TextureView)</ID>
    <ID>UnnecessaryParentheses:ElementDao.kt$ElementDao$(mapEntry.value is ArrayList&lt;*&gt;)</ID>
    <ID>UnnecessaryParentheses:ElementDao.kt$ElementDao$(mapEntry.value is Map&lt;*, *&gt;)</ID>
    <ID>UnnecessaryParentheses:ElementExtension.kt$(renewable != true)</ID>
    <ID>UnnecessaryParentheses:EmptyErrorView.kt$EmptyErrorView.&lt;no name provided&gt;$((millisUntilFinished / MS_IN_SECOND) + 1)</ID>
    <ID>UnnecessaryParentheses:EmptyErrorView.kt$EmptyErrorView.&lt;no name provided&gt;$(millisUntilFinished / MS_IN_SECOND)</ID>
    <ID>UnnecessaryParentheses:FteActivity.kt$FteActivity$(deeplinkInfo != null &amp;&amp; deeplinkInfo!!.element != null)</ID>
    <ID>UnnecessaryParentheses:FteActivity.kt$FteActivity$(getString(R.string.fte_subscription_watch_for, bestProduct?.subscription?.target?.name?.decapitalize(), originalPrice.toString()))</ID>
    <ID>UnnecessaryParentheses:IconPlayView.kt$IconPlayView$(data.playbackTimeMark.toFloat() / data.duration.toFloat())</ID>
    <ID>UnnecessaryParentheses:LauncherActivity.kt$LauncherActivity$(isBackStackFragment(supportFragmentManager.fragments.getOrNull(supportFragmentManager.fragments.lastIndex - 1)) &amp;&amp; currentFragment is PurchaseContainerFragment)</ID>
    <ID>UnnecessaryParentheses:MaskedPhoneTextWatcher.kt$MaskedPhoneTextWatcher$(s?.let { RUS_MASK.contains(it.last()) } ?: false)</ID>
    <ID>UnnecessaryParentheses:NotificationLandingActivity.kt$NotificationLandingActivity$(IntentFactory.createIntentSport(SpecialCollectionId.COLLECTION_ID_SPORT.fakeId))</ID>
    <ID>UnnecessaryParentheses:NullableDatesRange.kt$NullableDatesRange$(dateFrom != null &amp;&amp; date &lt; dateFrom)</ID>
    <ID>UnnecessaryParentheses:NullableDatesRange.kt$NullableDatesRange$(dateTo != null &amp;&amp; date &gt; dateTo)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(((this &gt;= 360 - THRESHOLD) &amp;&amp; (this &lt;= 360)) || ((this &gt;= 0) &amp;&amp; (this &lt;= THRESHOLD)))</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(((this &gt;= 90 - THRESHOLD) &amp;&amp; (this &lt;= 90 + THRESHOLD)) || ((this &gt;= 270 - THRESHOLD) &amp;&amp; (this &lt;= 270 + THRESHOLD)))</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$((this &gt;= 0) &amp;&amp; (this &lt;= THRESHOLD))</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$((this &gt;= 270 - THRESHOLD) &amp;&amp; (this &lt;= 270 + THRESHOLD))</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$((this &gt;= 360 - THRESHOLD) &amp;&amp; (this &lt;= 360))</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$((this &gt;= 90 - THRESHOLD) &amp;&amp; (this &lt;= 90 + THRESHOLD))</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &lt;= 270 + THRESHOLD)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &lt;= 360)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &lt;= 90 + THRESHOLD)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &lt;= THRESHOLD)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &gt;= 0)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &gt;= 270 - THRESHOLD)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &gt;= 360 - THRESHOLD)</ID>
    <ID>UnnecessaryParentheses:OrientationExtension.kt$(this &gt;= 90 - THRESHOLD)</ID>
    <ID>UnnecessaryParentheses:PaymentMethodListPresenter.kt$PaymentMethodListPresenter$(paymentInfoHolder.product?.price ?: paymentInfoHolder.amount ?: 0)</ID>
    <ID>UnnecessaryParentheses:PhoneParserUtils.kt$PhoneParserUtils$((phoneNumber.length &lt;= PHONE_NUMBER_INTERNATIONAL_MAX_SIZE &amp;&amp; !phoneNumber.contains(PHONE_NUMBER_DEFAULT) || (phoneNumber.length &lt;= PHONE_NUMBER_DEFAULT_MAX_SIZE &amp;&amp; phoneNumber.contains(PHONE_NUMBER_DEFAULT))))</ID>
    <ID>UnnecessaryParentheses:PhoneParserUtils.kt$PhoneParserUtils$(phoneNumber.length &lt;= PHONE_NUMBER_DEFAULT_MAX_SIZE &amp;&amp; phoneNumber.contains(PHONE_NUMBER_DEFAULT))</ID>
    <ID>UnnecessaryParentheses:PhoneParserUtils.kt$PhoneParserUtils$(phoneNumber.length &lt;= PHONE_NUMBER_INTERNATIONAL_MAX_SIZE &amp;&amp; !phoneNumber.contains(PHONE_NUMBER_DEFAULT) || (phoneNumber.length &lt;= PHONE_NUMBER_DEFAULT_MAX_SIZE &amp;&amp; phoneNumber.contains(PHONE_NUMBER_DEFAULT)))</ID>
    <ID>UnnecessaryParentheses:PlaybackModel.kt$(id == PlaybackTextTrackModel.EMPTY_TEXT_TRACK_ID)</ID>
    <ID>UnnecessaryParentheses:PlayerFragment.kt$PlayerFragment$(rentWarningView.visibility == View.VISIBLE)</ID>
    <ID>UnnecessaryParentheses:PurchaseActivity.kt$PurchaseActivity$(supportFragmentManager?.findFragmentByTag(TAG_PURCHASE_ERROR) as? PurchaseErrorFragment)</ID>
    <ID>UnnecessaryParentheses:SeasonsSeriesFragment.kt$SeasonsSeriesFragment$(activity as Activity)</ID>
    <ID>UnnecessaryParentheses:SportPlayerPresenter.kt$SportPlayerPresenter$(delaySec != null &amp;&amp; delaySec &lt;= 0)</ID>
    <ID>UnnecessaryParentheses:SportTournamentPresenter.kt$SportTournamentPresenter$(newOnAir.items)</ID>
    <ID>UnnecessaryParentheses:StaticPrerollView.kt$StaticPrerollView$(ImageView.ScaleType.FIT_CENTER)</ID>
    <ID>UnnecessaryParentheses:TrackSelectorExtensions.kt$(get(groupIndex))</ID>
    <ID>UnnecessaryParentheses:VideoCardItemDecorator.kt$VideoCardItemDecorator$(MIN_CARD_SCALE * view.height)</ID>
    <ID>UnnecessaryParentheses:VideoCardItemDecorator.kt$VideoCardItemDecorator$(recycler.parent as? View)</ID>
    <ID>UnnecessaryParentheses:VideoCollectionCompoundView.kt$VideoCollectionCompoundView$(value == FOOTER_STATE_IDLE)</ID>
    <ID>UnnecessaryParentheses:VideoInfoFragment.kt$VideoInfoFragment$(itemCurrent.item.id == VideoInfoNavigationItemModel.ID_VIDEO_INFORMATION &amp;&amp; itemPrevious.item.isVideoAboutType())</ID>
    <ID>UnnecessaryParentheses:VideoInfoFragment.kt$VideoInfoFragment$(itemCurrent.item.id == VideoInfoNavigationItemModel.ID_VIDEO_SIMILAR &amp;&amp; itemPrevious.item.id == VideoInfoNavigationItemModel.ID_VIDEO_INFORMATION)</ID>
    <ID>UnnecessaryParentheses:VideoInfoFragment.kt$VideoInfoFragment$(itemPrevious)</ID>
    <ID>UnnecessaryParentheses:VideoInfoPresenter.kt$VideoInfoPresenter$(selectedItem == null &amp;&amp; lastSelectedItem?.id in overlayItems)</ID>
    <ID>UnnecessaryParentheses:VideoInfoPresenter.kt$VideoInfoPresenter$(video.isMultiPart() &amp;&amp; multipartSeries?.episodes?.isNotEmpty() == true)</ID>
    <ID>UnnecessaryParentheses:VideoInfoPresenter.kt$VideoInfoPresenter$(video.isSerial() &amp;&amp; seasons.isNotEmpty())</ID>
    <ID>UnusedImports:BillingAccountView.kt$import tv.okko.androidtv.common.ui.views.LoadDataView</ID>
    <ID>UnusedImports:BufferListenLoadControl.kt$import com.google.android.exoplayer2.DefaultLoadControl</ID>
    <ID>UnusedImports:DateInfoProvider.kt$import tv.okko.androidtv.common.ui.widgets.calendar.CalendarView</ID>
    <ID>UnusedImports:DaysBarView.kt$import tv.okko.androidtv.common.ui.widgets.calendar.style.CalendarStyleAttributes</ID>
    <ID>UnusedImports:DeviceInfoProvider.kt$import tv.okko.util.SystemUtils.sPackageName</ID>
    <ID>UnusedImports:KeyboardModule.kt$import javax.inject.Singleton</ID>
    <ID>UnusedImports:LiveContentTypeExtensions.kt$import kotlin.collections.ArrayList</ID>
    <ID>UnusedImports:LiveContentTypeExtensions.kt$import tv.okko.android.model.sport.Game</ID>
    <ID>UnusedImports:LiveContentTypeExtensions.kt$import tv.okko.models.GameStatus</ID>
    <ID>UnusedImports:LiveContentTypeExtensions.kt$import tv.okko.util.L</ID>
    <ID>UnusedImports:MobileMainApplication.kt$import tv.okko.androidtv.network.api.AuthScreenApi</ID>
    <ID>UnusedImports:MobileSportCardView.kt$import tv.okko.android.model.sport.PlayableItem</ID>
    <ID>UnusedImports:MobileSportCardView.kt$import tv.okko.android.model.sport.Team</ID>
    <ID>UnusedImports:MobileSportCardView.kt$import tv.okko.models.LiveContentType</ID>
    <ID>UnusedImports:MultiScreenListener.kt$import tv.okko.android.model.sport.TournamentElementItem</ID>
    <ID>UnusedImports:ReservationListAdapter.kt$import tv.okko.data.CoverImageType</ID>
    <ID>UnusedImports:SportMultiscreenView.kt$import tv.okko.data.Element</ID>
    <ID>UnusedImports:SubscriptionManagementFragment.kt$import android.app.Activity</ID>
    <ID>UnusedImports:VideoInformationScrollView.kt$import tv.okko.androidtv.common.ui.adapters.SectionedRecyclerViewAdapter</ID>
    <ID>UnusedImports:WebCreditCardFragment.kt$import android.net.http.SslError</ID>
    <ID>UnusedImports:WebCreditCardFragment.kt$import android.webkit.SslErrorHandler</ID>
    <ID>UnusedPrivateMember:AnalyticsLoginListener.kt$AnalyticsLoginListener$private val prefs: PersistencePreferences</ID>
    <ID>UnusedPrivateMember:CalendarAdapter.kt$CalendarAdapter$daysBarItem: DaysBarItem</ID>
    <ID>UnusedPrivateMember:CirclePagerIndicator.kt$CirclePageIndicator.SavedState$`in`: Parcel</ID>
    <ID>UnusedPrivateMember:CustomPlayerView.kt$CustomPlayerView.Companion$private const val SURFACE_TYPE_NONE = 0</ID>
    <ID>UnusedPrivateMember:ElementDao.kt$ElementDao$i</ID>
    <ID>UnusedPrivateMember:ElementDao.kt$ElementDao$private fun getRootFieldsFromResponse(response: Map&lt;*, *&gt;): List&lt;String&gt;?</ID>
    <ID>UnusedPrivateMember:FragmentExtension.kt$videoId: String</ID>
    <ID>UnusedPrivateMember:GameExtensions.kt$private fun getLiveAndFullGameString(res: Resources): String</ID>
    <ID>UnusedPrivateMember:GameExtensions.kt$private fun getLiveGameString(res: Resources): String</ID>
    <ID>UnusedPrivateMember:GameExtensions.kt$private fun getSubscriptionText(res: Resources, isSubscriptionPurchased: Boolean, isSubscriptionActivated: Boolean, subscriptionName: String, liveContentType: String, purchasedAndActivated: String = ""): String</ID>
    <ID>UnusedPrivateMember:KeyboardView.kt$KeyboardView$keyCode: Int</ID>
    <ID>UnusedPrivateMember:MainApplication.kt$MainApplication$private var loggingScreenCallback: LoggingScreenCallback? = null</ID>
    <ID>UnusedPrivateMember:MoviePromoCodeActivatedDialogFragment.kt$MoviePromoCodeActivatedDialogFragment.Companion$private const val REQUEST_CODE_CONFIRM_PHONE = 4125</ID>
    <ID>UnusedPrivateMember:PaymentMethodListPresenter.kt$PaymentMethodListPresenter$private fun tryToOpenPhone(user: UserModel): Boolean</ID>
    <ID>UnusedPrivateMember:PlayerControlView.kt$PlayerControlView$private fun hideAllButOne(id: Int)</ID>
    <ID>UnusedPrivateMember:PlayerControlView.kt$PlayerControlView.Companion$private const val DEFAULT_CHAUNK_SIZE = 3000</ID>
    <ID>UnusedPrivateMember:PlayerControlView.kt$PlayerControlView.Companion$private const val MAX_POSITION_FOR_SEEK_TO_PREVIOUS: Long = 3000</ID>
    <ID>UnusedPrivateMember:PresenterExtension.kt$val offerId = product?.offer?.id</ID>
    <ID>UnusedPrivateMember:PriceTag.kt$serverDate: Long</ID>
    <ID>UnusedPrivateMember:ProgramViewHolder.kt$ProgramViewHolder$position: Int</ID>
    <ID>UnusedPrivateMember:PurchaseInteractor.kt$PurchaseInteractor$private fun getBillingAccounts(elementHolder: ScreenApiResponse): List&lt;BillingAccountModel&gt;</ID>
    <ID>UnusedPrivateMember:RatingStarView.kt$RatingStarView$private fun drawDrawable(canvas: Canvas?, drawable: Drawable?, rect: Rect)</ID>
    <ID>UnusedPrivateMember:RatingStarView.kt$RatingStarView$private val starEmptyDrawable by lazy { ContextCompat.getDrawable(context, R.drawable.ic_rating_star_empty)?.apply { backgroundEmpty.takeIf { it != 0 }?.let { setColorFilter(it, PorterDuff.Mode.MULTIPLY) } } }</ID>
    <ID>UnusedPrivateMember:RatingStarView.kt$RatingStarView$private val starHalfDrawable by lazy { ContextCompat.getDrawable(context, R.drawable.ic_rating_star_full_half)?.apply { backgroundFull.takeIf { it != 0 }?.let { setColorFilter(it, PorterDuff.Mode.MULTIPLY) } } }</ID>
    <ID>UnusedPrivateMember:SeasonListFragment.kt$SeasonListFragment.Companion$defaultSeasonId: String = ""</ID>
    <ID>UnusedPrivateMember:SeasonListFragment.kt$SeasonListFragment.Companion$videoId: String</ID>
    <ID>UnusedPrivateMember:SendCodePresenter.kt$SendCodePresenter.Companion$private const val MIN_PHONE_LENGTH = 11</ID>
    <ID>UnusedPrivateMember:SportPlayerActivity.kt$SportPlayerActivity$private var orientationListener: OrientationEventListener? = null</ID>
    <ID>UnusedPrivateMember:SportTournamentPresenter.kt$SportTournamentPresenter$private val isTv = clientType == AuthScreenApi.CLIENT_TYPE_ANDROID_TV</ID>
    <ID>UnusedPrivateMember:SubscriptionInteractor.kt$SubscriptionInteractor$private val videoRepository: VideoRepository</ID>
    <ID>UnusedPrivateMember:SubscriptionInteractor.kt$SubscriptionInteractor$val subscriptions = response.userInfo?.multiSubscriptions?.items.orEmpty().map { it.element }.map { subscriptionResponse -&gt; SubscriptionModel.from(subscriptionResponse, sharedPreferences.getServerTime()) }</ID>
    <ID>UnusedPrivateMember:SubscriptionRepository.kt$SubscriptionRepository$subscription: ScreenApiResponse</ID>
    <ID>UnusedPrivateMember:UiUserSubscription.kt$i</ID>
    <ID>UnusedPrivateMember:UserLogTree.kt$UserLogTree$priority: Int</ID>
    <ID>UnusedPrivateMember:UserLoggerManager.kt$UserLoggerManager.Companion$private const val HYPHEN = "-"</ID>
    <ID>UnusedPrivateMember:UserLoggerManager.kt$UserLoggerManager.Companion$private const val MESSAGE_SEPARATOR = "~br~"</ID>
    <ID>UnusedPrivateMember:UserLoggerManager.kt$UserLoggerManager.Companion$private const val SESSION_TOKEN_SEPARATOR = "~id~"</ID>
    <ID>UnusedPrivateMember:VerticalDividerDecorator.kt$VerticalDividerDecorator$private val context: Context?</ID>
    <ID>UnusedPrivateMember:VideoCollectionRepository.kt$VideoCollectionRepository$element: ScreenApiResponse</ID>
    <ID>UnusedPrivateMember:VideoRepository.kt$VideoRepository$product: ScreenApiResponse</ID>
    <ID>UnusedPrivateMember:VideoRepository.kt$VideoRepository$video: ScreenApiResponse</ID>
    <ID>UnusedPrivateMember:WebCreditCardPresenter.kt$WebCreditCardPresenter.Companion$private const val JS_MESSAGE_RELOAD = "reload"</ID>
    <ID>UnusedPrivateMember:XiaomiIntentUtils.kt$XiaomiIntentUtils$private const val APPLICATION_ID = "tv.okko.androidtv"</ID>
    <ID>UseCheckOrError:BasePagerIndicator.kt$BasePageIndicator$throw IllegalStateException("RecyclerView does not have adapter instance.")</ID>
    <ID>UseCheckOrError:BasePagerIndicator.kt$BasePageIndicator$throw IllegalStateException("RecyclerView has not been bound.")</ID>
    <ID>UseCheckOrError:CalendarAdapter.kt$CalendarAdapter$throw IllegalStateException("Unknown item at position $position")</ID>
    <ID>UseCheckOrError:CalendarAdapter.kt$CalendarAdapter$throw IllegalStateException("Unknown view type: $viewType")</ID>
    <ID>UseCheckOrError:DialogWithContext.kt$DialogFragmentWithContext$throw IllegalStateException("DialogFragmentWithContext $this doesn't have context")</ID>
    <ID>UseCheckOrError:DisplayedDatesRangeFactory.kt$DisplayedDatesRangeFactory$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:LoginProvider.kt$LoginProvider$throw IllegalStateException("null user response")</ID>
    <ID>UseCheckOrError:SportActivationCodeFragment.kt$SportActivationCodeFragment$throw IllegalStateException("phone can't be empty")</ID>
    <ID>UseCheckOrError:TournamentAdapter.kt$TournamentAdapter$throw IllegalStateException("unknown list type : $type")</ID>
    <ID>UseCheckOrError:TvSportCardAdapter.kt$TvSportCardAdapter$throw IllegalStateException("unknown list type : $viewType")</ID>
    <ID>UseCheckOrError:TvSportCardAdapter.kt$TvSportCardAdapter$throw IllegalStateException("unknown type for position: $position")</ID>
    <ID>UseDataClass:CalendarStyleAttributes.kt$CalendarStyleAttributes</ID>
    <ID>UseDataClass:ElementsListResponse.kt$ElementsListResponse</ID>
    <ID>UseDataClass:ImageParams.kt$ImageParams$Crop</ID>
    <ID>UseDataClass:KollectorEventModels.kt$KollectorEventField</ID>
    <ID>UseDataClass:LoggerMode.kt$LoggerParams</ID>
    <ID>UseDataClass:MakeRequestResult.kt$MakeRequestResult</ID>
    <ID>UseDataClass:PriceTag.kt$PriceTag</ID>
    <ID>UseDataClass:PriceTag.kt$PriceTag$OuterParams</ID>
    <ID>UseDataClass:PriceTag.kt$PriceTagDetail</ID>
    <ID>UseDataClass:PriceTag.kt$PriceTagDetail$Feature</ID>
    <ID>UseDataClass:PriceTag.kt$UiProduct</ID>
    <ID>UseDataClass:PurchaseConfirmUiModel.kt$PurchaseConfirmUiModel</ID>
    <ID>UseDataClass:SportRow.kt$SportRow</ID>
    <ID>UseDataClass:UiUserSubscription.kt$UiUserSubscription</ID>
    <ID>UseRequire:BasePagerIndicator.kt$BasePageIndicator$throw IllegalArgumentException("column must be not null")</ID>
    <ID>VarCouldBeVal:ActionResponseJsonAdapter.kt$ActionResponseJsonAdapter$var result = ActionResponse( type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"), name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"), element = element)</ID>
    <ID>VarCouldBeVal:ActivationActionJsonAdapter.kt$ActivationActionJsonAdapter$var result = ActivationAction( activationActionType = activationActionType)</ID>
    <ID>VarCouldBeVal:ApmResponseJsonAdapter.kt$ApmResponseJsonAdapter$var result = ApmResponse( code = code ?: throw JsonDataException("Required property 'code' missing at ${reader.path}"), error = error ?: throw JsonDataException("Required property 'error' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:AssetListResponseJsonAdapter.kt$AssetListResponseJsonAdapter$var result = AssetListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:AssetResponseJsonAdapter.kt$AssetResponseJsonAdapter$var result = AssetResponse( liveContentType = liveContentType, url = url ?: throw JsonDataException("Required property 'url' missing at ${reader.path}"), licenseId = licenseId, media = media ?: throw JsonDataException("Required property 'media' missing at ${reader.path}"), audioTracks = audioTracks, subtitles = subtitles, failoverUrls = failoverUrls, wmData = wmData)</ID>
    <ID>VarCouldBeVal:AudioTrackListResponseJsonAdapter.kt$AudioTrackListResponseJsonAdapter$var result = AudioTrackListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:AudioTrackResponseJsonAdapter.kt$AudioTrackResponseJsonAdapter$var result = AudioTrackResponse( contentLanguage = contentLanguage ?: throw JsonDataException("Required property 'contentLanguage' missing at ${reader.path}"), langKey = langKey, name = name, channels = channels ?: throw JsonDataException("Required property 'channels' missing at ${reader.path}"), mimeType = mimeType ?: throw JsonDataException("Required property 'mimeType' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:AuthInfoResponseJsonAdapter.kt$AuthInfoResponseJsonAdapter$var result = AuthInfoResponse( sessionToken = sessionToken ?: throw JsonDataException("Required property 'sessionToken' missing at ${reader.path}"), accessKey = accessKey ?: throw JsonDataException("Required property 'accessKey' missing at ${reader.path}"), persistentToken = persistentToken ?: throw JsonDataException("Required property 'persistentToken' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:BalanceResponseJsonAdapter.kt$BalanceResponseJsonAdapter$var result = BalanceResponse( value = value_ ?: throw JsonDataException("Required property 'value_' missing at ${reader.path}"), currencyCode = currencyCode ?: throw JsonDataException("Required property 'currencyCode' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:BasicCoverElementHolderResponseJsonAdapter.kt$BasicCoverElementHolderResponseJsonAdapter$var result = BasicCoverElementHolderResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:BasicCoverElementResponseJsonAdapter.kt$BasicCoverElementResponseJsonAdapter$var result = BasicCoverElementResponse( url = url ?: throw JsonDataException("Required property 'url' missing at ${reader.path}"), imageType = imageType ?: throw JsonDataException("Required property 'imageType' missing at ${reader.path}"), primaryColor = primaryColor)</ID>
    <ID>VarCouldBeVal:BillingAccountListResponseJsonAdapter.kt$BillingAccountListResponseJsonAdapter$var result = BillingAccountListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:BillingAccountResponseJsonAdapter.kt$BillingAccountResponseJsonAdapter$var result = BillingAccountResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), balance = balance ?: throw JsonDataException("Required property 'balance' missing at ${reader.path}"), reserve = reserve, description = description)</ID>
    <ID>VarCouldBeVal:CategoriesResponseJsonAdapter.kt$CategoriesResponseJsonAdapter$var result = CategoriesResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CollectionElementResponseJsonAdapter.kt$CollectionElementResponseJsonAdapter$var result = CollectionElementResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), name = name, alias = alias, type = type, collectionItems = collectionItems)</ID>
    <ID>VarCouldBeVal:CollectionListHolderResponseJsonAdapter.kt$CollectionListHolderResponseJsonAdapter$var result = CollectionListHolderResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), collectionItems = collectionItems ?: throw JsonDataException("Required property 'collectionItems' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CollectionListResponseJsonAdapter.kt$CollectionListResponseJsonAdapter$var result = CollectionListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CollectionResponseJsonAdapter.kt$CollectionResponseJsonAdapter$var result = CollectionResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"), userInfo = userInfo, serviceInfo = serviceInfo)</ID>
    <ID>VarCouldBeVal:ConfigResponseJsonAdapter.kt$ConfigResponseJsonAdapter$var result = ConfigResponse( config = config ?: throw JsonDataException("Required property 'config' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CountryHolderResponseJsonAdapter.kt$CountryHolderResponseJsonAdapter$var result = CountryHolderResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CountryListResponseJsonAdapter.kt$CountryListResponseJsonAdapter$var result = CountryListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CountryResponseJsonAdapter.kt$CountryResponseJsonAdapter$var result = CountryResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CoverElementHolderResponseJsonAdapter.kt$CoverElementHolderResponseJsonAdapter$var result = CoverElementHolderResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:CoverElementResponseJsonAdapter.kt$CoverElementResponseJsonAdapter$var result = CoverElementResponse( url = url ?: throw JsonDataException("Required property 'url' missing at ${reader.path}"), imageType = imageType, width = width, height = height)</ID>
    <ID>VarCouldBeVal:CreditCardResponseJsonAdapter.kt$CreditCardResponseJsonAdapter$var result = CreditCardResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type, number = number ?: throw JsonDataException("Required property 'number' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:DeviceExtrasModelJsonAdapter.kt$DeviceExtrasModelJsonAdapter$var result = DeviceExtrasModel( appVersion = appVersion ?: throw JsonDataException("Required property 'appVersion' missing at ${reader.path}"), sdkVersion = sdkVersion ?: throw JsonDataException("Required property 'sdkVersion' missing at ${reader.path}"), supportedDrm = supportedDrm ?: throw JsonDataException("Required property 'supportedDrm' missing at ${reader.path}"), drmSoftware = drmSoftware ?: throw JsonDataException("Required property 'drmSoftware' missing at ${reader.path}"), supportHd = supportHd ?: throw JsonDataException("Required property 'supportHd' missing at ${reader.path}"), supportFullHd = supportFullHd ?: throw JsonDataException("Required property 'supportFullHd' missing at ${reader.path}"), supportUltraHd = supportUltraHd ?: throw JsonDataException("Required property 'supportUltraHd' missing at ${reader.path}"), supportHdr = supportHdr ?: throw JsonDataException("Required property 'supportHdr' missing at ${reader.path}"), support3d = support3d ?: throw JsonDataException("Required property 'support3d' missing at ${reader.path}"), supportDolby = supportDolby ?: throw JsonDataException("Required property 'supportDolby' missing at ${reader.path}"), supportDolbyAtmos = supportDolbyAtmos ?: throw JsonDataException("Required property 'supportDolbyAtmos' missing at ${reader.path}"), supportMultiAudio = supportMultiAudio ?: throw JsonDataException("Required property 'supportMultiAudio' missing at ${reader.path}"), supportSubtitles = supportSubtitles ?: throw JsonDataException("Required property 'supportSubtitles' missing at ${reader.path}"), supportFeaturedSubscriptions = supportFeaturedSubscriptions ?: throw JsonDataException("Required property 'supportFeaturedSubscriptions' missing at ${reader.path}"), supportMultiSubscriptions = supportMultiSubscriptions ?: throw JsonDataException("Required property 'supportMultiSubscriptions' missing at ${reader.path}"), notSupportMultiresolution = notSupportMultiresolution ?: throw JsonDataException("Required property 'notSupportMultiresolution' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:DeviceItemResponseJsonAdapter.kt$DeviceItemResponseJsonAdapter$var result = DeviceItemResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), manufacturer = manufacturer, model = model)</ID>
    <ID>VarCouldBeVal:DeviceItemsResponseJsonAdapter.kt$DeviceItemsResponseJsonAdapter$var result = DeviceItemsResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ElementListResponseJsonAdapter.kt$ElementListResponseJsonAdapter$var result = ElementListResponse( elements = elements ?: throw JsonDataException("Required property 'elements' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ElementRelationListResponseJsonAdapter.kt$ElementRelationListResponseJsonAdapter$var result = ElementRelationListResponse( items = items, totalSize = totalSize)</ID>
    <ID>VarCouldBeVal:ElementRelationResponseJsonAdapter.kt$ElementRelationResponseJsonAdapter$var result = ElementRelationResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ElementsListResponseJsonAdapter.kt$ElementsListResponseJsonAdapter$var result = ElementsListResponse( items = items)</ID>
    <ID>VarCouldBeVal:GameExtensions.kt$var liveContentTypesStrings = ArrayList&lt;String&gt;()</ID>
    <ID>VarCouldBeVal:GenreHolderResponseJsonAdapter.kt$GenreHolderResponseJsonAdapter$var result = GenreHolderResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:GenreListResponseJsonAdapter.kt$GenreListResponseJsonAdapter$var result = GenreListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:GenreResponseJsonAdapter.kt$GenreResponseJsonAdapter$var result = GenreResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"), alias = alias)</ID>
    <ID>VarCouldBeVal:HomeResponseJsonAdapter.kt$HomeResponseJsonAdapter$var result = HomeResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ItemElementHolderResponseJsonAdapter.kt$ItemElementHolderResponseJsonAdapter$var result = ItemElementHolderResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ItemElementHolderWithUserInfoResponseJsonAdapter.kt$ItemElementHolderWithUserInfoResponseJsonAdapter$var result = ItemElementHolderWithUserInfoResponse( userInfo = userInfo ?: throw JsonDataException("Required property 'userInfo' missing at ${reader.path}"), element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ItemElementResponseJsonAdapter.kt$ItemElementResponseJsonAdapter$var result = ItemElementResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"), name = name, alias = alias, title = title, duration = duration, seqNo = seqNo, originalName = originalName, worldReleaseDate = worldReleaseDate, ageAccessType = ageAccessType, okkoRating = okkoRating, inNovelty = inNovelty, description = description, bookmarkDate = bookmarkDate, expireDate = expireDate, playbackTimeMark = playbackTimeMark, lastStartingDate = lastStartingDate, covers = covers, basicCovers = basicCovers, assets = assets, inSubscription = inSubscription, licenses = licenses, genres = genres, countries = countries, similar = similar, actors = actors, directors = directors, studios = studios, children = children, products = products, trailers = trailers, kinopoiskRating = kinopoiskRating, lastWatchedChildId = lastWatchedChildId, subscriptionBundle = subscriptionBundle, hasHdr = hasHdr, hasHd = hasHd, hasFullHd = hasFullHd, hasUltraHd = hasUltraHd, has3d = has3d, hasDolby = hasDolby, hasDolbyAtmos = hasDolbyAtmos, hasSound51 = hasSound51)</ID>
    <ID>VarCouldBeVal:ItemListElementResponseJsonAdapter.kt$ItemListElementResponseJsonAdapter$var result = ItemListElementResponse( items = items, totalSize = totalSize)</ID>
    <ID>VarCouldBeVal:ItemListHolderResponseJsonAdapter.kt$ItemListHolderResponseJsonAdapter$var result = ItemListHolderResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:KeyModelJsonAdapter.kt$KeyModelJsonAdapter$var result = KeyModel( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), value = value_ ?: throw JsonDataException("Required property 'value_' missing at ${reader.path}"), icon = icon, weight = weight ?: throw JsonDataException("Required property 'weight' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:LicenseListResponseJsonAdapter.kt$LicenseListResponseJsonAdapter$var result = LicenseListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:LicenseResponseJsonAdapter.kt$LicenseResponseJsonAdapter$var result = LicenseResponse( id = id, consumptionMode = consumptionMode, expireDate = expireDate, subscriptionId = subscriptionId, licenseServerUrls = licenseServerUrls)</ID>
    <ID>VarCouldBeVal:LocationResponseJsonAdapter.kt$LocationResponseJsonAdapter$var result = LocationResponse( countryCode = countryCode ?: throw JsonDataException("Required property 'countryCode' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:MainMenuResponseJsonAdapter.kt$MainMenuResponseJsonAdapter$var result = MainMenuResponse( mainMenu = mainMenu ?: throw JsonDataException("Required property 'mainMenu' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:Media.kt$Media.Factory$var assetLicenseUrl = element.licenses.items?.firstOrNull { it.id == asset.licenseId }?.licenseUrls?.get(DrmUtils.CENC_WIDEVINE_NAME)</ID>
    <ID>VarCouldBeVal:MediaResponseJsonAdapter.kt$MediaResponseJsonAdapter$var result = MediaResponse( quality = quality ?: throw JsonDataException("Required property 'quality' missing at ${reader.path}"), mimeType = mimeType ?: throw JsonDataException("Required property 'mimeType' missing at ${reader.path}"), drmType = drmType, width = width, height = height, size = size)</ID>
    <ID>VarCouldBeVal:MobileSportTournamentFragment.kt$MobileSportTournamentFragment$var onPlay = fun(liveContentType: LiveContentType) { if (multiscreenDelegate.isMultiScreenConnected()) { multiscreenPresenter.playWithMultiscreen(game, liveContentType) } else { collectionDelegate.play(game, liveContentType, game.homeTeam, game.awayTeam, game.tourNumber) } }</ID>
    <ID>VarCouldBeVal:MyMoviesResponseJsonAdapter.kt$MyMoviesResponseJsonAdapter$var result = MyMoviesResponse( myMovies = myMovies ?: throw JsonDataException("Required property 'myMovies' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:NotificationItemsHolderJsonAdapter.kt$NotificationItemsHolderJsonAdapter$var result = NotificationItemsHolder( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:NotificationResponseJsonAdapter.kt$NotificationResponseJsonAdapter$var result = NotificationResponse( id = id, type = type, layoutUrl = layoutUrl, layoutUrl1280 = layoutUrl1280, actions = actions)</ID>
    <ID>VarCouldBeVal:OfferActivatedDialog.kt$OfferActivatedDialog$var subsDuration = if (product?.subscription?.target?.duration == null) 30 else TimeUtils.getDays(product?.subscription?.target?.duration!!)</ID>
    <ID>VarCouldBeVal:OfferActivationListResponseJsonAdapter.kt$OfferActivationListResponseJsonAdapter$var result = OfferActivationListResponse( items = items)</ID>
    <ID>VarCouldBeVal:OfferActivationResponseJsonAdapter.kt$OfferActivationResponseJsonAdapter$var result = OfferActivationResponse( offerId = offerId ?: throw JsonDataException("Required property 'offerId' missing at ${reader.path}"), statusCode = statusCode ?: throw JsonDataException("Required property 'statusCode' missing at ${reader.path}"), status = status ?: throw JsonDataException("Required property 'status' missing at ${reader.path}"), startDate = startDate, endDate = endDate, failedReason = failedReason, activatedOffer = activatedOffer)</ID>
    <ID>VarCouldBeVal:OfferListResponseJsonAdapter.kt$OfferListResponseJsonAdapter$var result = OfferListResponse( items = items)</ID>
    <ID>VarCouldBeVal:OfferResponseJsonAdapter.kt$OfferResponseJsonAdapter$var result = OfferResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), activationActions = activationActions, purchasedSubscriptionId = purchasedSubscriptionId, type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"), duration = duration, subscriptions = subscriptions, discountPercentage = discountPercentage, purchasesNum = purchasesNum, renewalDurationDays = renewalDurationDays, renewalCount = renewalCount, renewalPrice = renewalPrice, discountRenewalPricePercentage = discountRenewalPricePercentage, needCard = needCard)</ID>
    <ID>VarCouldBeVal:PaymentInfoResponseJsonAdapter.kt$PaymentInfoResponseJsonAdapter$var result = PaymentInfoResponse( url = url, token = token ?: throw JsonDataException("Required property 'token' missing at ${reader.path}"), qiwiWalletAuthRequestCode = qiwiWalletAuthRequestCode)</ID>
    <ID>VarCouldBeVal:PaymentMethodListResponseJsonAdapter.kt$PaymentMethodListResponseJsonAdapter$var result = PaymentMethodListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PaymentMethodResponseJsonAdapter.kt$PaymentMethodResponseJsonAdapter$var result = PaymentMethodResponse( type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"), creditCard = creditCard, qiwiWallet = qiwiWallet, description = description)</ID>
    <ID>VarCouldBeVal:PaymentStatusResponseJsonAdapter.kt$PaymentStatusResponseJsonAdapter$var result = PaymentStatusResponse( transactionStatus = transactionStatus, errorReasonCode = errorReasonCode)</ID>
    <ID>VarCouldBeVal:PersonHolderResponseJsonAdapter.kt$PersonHolderResponseJsonAdapter$var result = PersonHolderResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PersonListResponseJsonAdapter.kt$PersonListResponseJsonAdapter$var result = PersonListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PersonResponseJsonAdapter.kt$PersonResponseJsonAdapter$var result = PersonResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PhoneCodeModelJsonAdapter.kt$PhoneCodeModelJsonAdapter$var result = PhoneCodeModel( name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"), dialCode = dialCode ?: throw JsonDataException("Required property 'dialCode' missing at ${reader.path}"), code = code ?: throw JsonDataException("Required property 'code' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PhoneCodesModelJsonAdapter.kt$PhoneCodesModelJsonAdapter$var result = PhoneCodesModel( codes = codes ?: throw JsonDataException("Required property 'codes' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PinResponseJsonAdapter.kt$PinResponseJsonAdapter$var result = PinResponse( pinInfo = pinInfo ?: throw JsonDataException("Required property 'pinInfo' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:PlaybackResponseJsonAdapter.kt$PlaybackResponseJsonAdapter$var result = PlaybackResponse( callId = callId ?: throw JsonDataException("Required property 'callId' missing at ${reader.path}"), playbackState = playbackState)</ID>
    <ID>VarCouldBeVal:PlaybackStateJsonAdapter.kt$PlaybackStateJsonAdapter$var result = PlaybackState( errorCode = errorCode ?: throw JsonDataException("Required property 'errorCode' missing at ${reader.path}"), type = type)</ID>
    <ID>VarCouldBeVal:PriceResponseJsonAdapter.kt$PriceResponseJsonAdapter$var result = PriceResponse( value = value_ ?: throw JsonDataException("Required property 'value_' missing at ${reader.path}"), currencyCode = currencyCode ?: throw JsonDataException("Required property 'currencyCode' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ProductListResponseJsonAdapter.kt$ProductListResponseJsonAdapter$var result = ProductListResponse( items = items, emptyReason = emptyReason)</ID>
    <ID>VarCouldBeVal:ProductResponseJsonAdapter.kt$ProductResponseJsonAdapter$var result = ProductResponse( id = id, duration = duration, consumptionMode = consumptionMode, qualities = qualities, price = price, originalPrice = originalPrice, priceCategory = priceCategory, paymentMethods = paymentMethods, offer = offer, subscription = subscription)</ID>
    <ID>VarCouldBeVal:PurchaseResponseJsonAdapter.kt$PurchaseResponseJsonAdapter$var result = PurchaseResponse( transactionInfo = transactionInfo ?: throw JsonDataException("Required property 'transactionInfo' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:QiwiWalletResponseJsonAdapter.kt$QiwiWalletResponseJsonAdapter$var result = QiwiWalletResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), phone = phone ?: throw JsonDataException("Required property 'phone' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:ScreenApiResponseJsonAdapter.kt$ScreenApiResponseJsonAdapter$var result = ScreenApiResponse( status = status, authInfo = authInfo, tournament = tournament, myMovies = myMovies, serviceInfo = serviceInfo, userInfo = userInfo, paymentStatus = paymentStatus, paymentInfo = paymentInfo, element = element, elements = elements, uiScreenInfo = uiScreenInfo, availableOffers = availableOffers, transactionInfo = transactionInfo)</ID>
    <ID>VarCouldBeVal:ServiceInfoHolderResponseJsonAdapter.kt$ServiceInfoHolderResponseJsonAdapter$var result = ServiceInfoHolderResponse( serverTime = serverTime)</ID>
    <ID>VarCouldBeVal:ServiceInfoResponseJsonAdapter.kt$ServiceInfoResponseJsonAdapter$var result = ServiceInfoResponse( notifications = notifications, serverTime = serverTime, clientLocation = clientLocation)</ID>
    <ID>VarCouldBeVal:SportCardFragment.kt$SportCardFragment$var watch = fun(fromStart: Boolean) { if (multiscreenDelegate.isMultiScreenConnected()) { multiscreenPresenter.playWithMultiscreen(item, liveContentType, fromStart) } else { presenter.play(item, liveContentType, fromStart) } }</ID>
    <ID>VarCouldBeVal:SportCardInteractor_ElementsQueryJsonAdapter.kt$SportCardInteractor_ElementsQueryJsonAdapter$var result = SportCardInteractor.ElementsQuery( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SportCollectionListHolderResponseJsonAdapter.kt$SportCollectionListHolderResponseJsonAdapter$var result = SportCollectionListHolderResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type, name = name, description = description, alias = alias, collectionItems = collectionItems ?: throw JsonDataException("Required property 'collectionItems' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SportCollectionListResponseJsonAdapter.kt$SportCollectionListResponseJsonAdapter$var result = SportCollectionListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SportCollectionResponseJsonAdapter.kt$SportCollectionResponseJsonAdapter$var result = SportCollectionResponse( serviceInfo = serviceInfo, userInfo = userInfo ?: throw JsonDataException("Required property 'userInfo' missing at ${reader.path}"), element = element)</ID>
    <ID>VarCouldBeVal:SportMultiscreenInteractor_ElementsQueryJsonAdapter.kt$SportMultiscreenInteractor_ElementsQueryJsonAdapter$var result = SportMultiscreenInteractor.ElementsQuery( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SportPlaybackInteractor_ElementsQueryJsonAdapter.kt$SportPlaybackInteractor_ElementsQueryJsonAdapter$var result = SportPlaybackInteractor.ElementsQuery( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:StatusResponseJsonAdapter.kt$StatusResponseJsonAdapter$var result = StatusResponse( callId = callId, status = status ?: throw JsonDataException("Required property 'status' missing at ${reader.path}"), serviceInfo = serviceInfo, userInfo = userInfo, uiScreenInfo = uiScreenInfo, offerActivations = offerActivations)</ID>
    <ID>VarCouldBeVal:StudioHolderResponseJsonAdapter.kt$StudioHolderResponseJsonAdapter$var result = StudioHolderResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:StudioListResponseJsonAdapter.kt$StudioListResponseJsonAdapter$var result = StudioListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:StudioResponseJsonAdapter.kt$StudioResponseJsonAdapter$var result = StudioResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"), covers = covers)</ID>
    <ID>VarCouldBeVal:SubscriptionHolderListResponseJsonAdapter.kt$SubscriptionHolderListResponseJsonAdapter$var result = SubscriptionHolderListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SubscriptionHolderResponseJsonAdapter.kt$SubscriptionHolderResponseJsonAdapter$var result = SubscriptionHolderResponse( element = element ?: throw JsonDataException("Required property 'element' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SubscriptionListHolderResponseJsonAdapter.kt$SubscriptionListHolderResponseJsonAdapter$var result = SubscriptionListHolderResponse( serviceInfo = serviceInfo, userInfo = userInfo ?: throw JsonDataException("Required property 'userInfo' missing at ${reader.path}"), elements = elements)</ID>
    <ID>VarCouldBeVal:SubscriptionListResponseJsonAdapter.kt$SubscriptionListResponseJsonAdapter$var result = SubscriptionListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SubscriptionResponseJsonAdapter.kt$SubscriptionResponseJsonAdapter$var result = SubscriptionResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), trailers = trailers, title = title, description = description, type = type, expireDate = expireDate, fullSeasonPriceText = fullSeasonPriceText, seasonSubscriptionEndDate = seasonSubscriptionEndDate, renewable = renewable, name = name, alias = alias, storeType = storeType, covers = covers, basicCovers = basicCovers, duration = duration, subscriptionBoughtWithOffer = subscriptionBoughtWithOffer, subscriptionStartDate = subscriptionStartDate, subscriptionEndDate = subscriptionEndDate, subscriptionActivateDate = subscriptionActivateDate, autoRenewEnabled = autoRenewEnabled, contentCountDescription = contentCountDescription, subscriptionBundle = subscriptionBundle, products = products, collectionItems = collectionItems)</ID>
    <ID>VarCouldBeVal:SubtitleListResponseJsonAdapter.kt$SubtitleListResponseJsonAdapter$var result = SubtitleListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:SubtitleResponseJsonAdapter.kt$SubtitleResponseJsonAdapter$var result = SubtitleResponse( url = url ?: throw JsonDataException("Required property 'url' missing at ${reader.path}"), name = name ?: throw JsonDataException("Required property 'name' missing at ${reader.path}"), contentLanguage = contentLanguage ?: throw JsonDataException("Required property 'contentLanguage' missing at ${reader.path}"), forced = forced ?: throw JsonDataException("Required property 'forced' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:TrailerListResponseJsonAdapter.kt$TrailerListResponseJsonAdapter$var result = TrailerListResponse( items = items ?: throw JsonDataException("Required property 'items' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:TrailerResponseJsonAdapter.kt$TrailerResponseJsonAdapter$var result = TrailerResponse( liveContentType = liveContentType, url = url ?: throw JsonDataException("Required property 'url' missing at ${reader.path}"), media = media ?: throw JsonDataException("Required property 'media' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:TransactionInfoResponseJsonAdapter.kt$TransactionInfoResponseJsonAdapter$var result = TransactionInfoResponse( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"))</ID>
    <ID>VarCouldBeVal:UiScreenInfoResponseJsonAdapter.kt$UiScreenInfoResponseJsonAdapter$var result = UiScreenInfoResponse( attributes = attributes)</ID>
    <ID>VarCouldBeVal:UserPreferencesResponseJsonAdapter.kt$UserPreferencesResponseJsonAdapter$var result = UserPreferencesResponse( isShowScoreAllowed = isShowScoreAllowed, isEplNotifyRequested = isEplNotifyRequested, lastPhone = lastPhone)</ID>
    <ID>VarCouldBeVal:VideoInteractor_ElementsQueryJsonAdapter.kt$VideoInteractor_ElementsQueryJsonAdapter$var result = VideoInteractor.ElementsQuery( id = id ?: throw JsonDataException("Required property 'id' missing at ${reader.path}"), type = type ?: throw JsonDataException("Required property 'type' missing at ${reader.path}"))</ID>
    <ID>VariableNaming:BalanceResponseJsonAdapter.kt$BalanceResponseJsonAdapter$var value_: Int? = null</ID>
    <ID>VariableNaming:FteActivity.kt$FteActivity.FtePagerAdapter$var COUNT_OF_PAGES = if (isOnlyLanding) 1 else 2</ID>
    <ID>VariableNaming:KeyModelJsonAdapter.kt$KeyModelJsonAdapter$var value_: String? = null</ID>
    <ID>VariableNaming:PriceResponseJsonAdapter.kt$PriceResponseJsonAdapter$var value_: Int? = null</ID>
    <ID>WildcardImport:ActivityExtension.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:AddPhoneFragment.kt$import android.text.*</ID>
    <ID>WildcardImport:Analytics.kt$import tv.okko.androidtv.analytics.models.*</ID>
    <ID>WildcardImport:AnalyticsCompat.kt$import tv.okko.androidtv.analytics.models.*</ID>
    <ID>WildcardImport:AnalyticsCompat.kt$import tv.okko.data.*</ID>
    <ID>WildcardImport:AnimatorFactory.kt$import android.animation.*</ID>
    <ID>WildcardImport:AppComponent.kt$import tv.okko.androidtv.common.utils.di.modules.*</ID>
    <ID>WildcardImport:AuthScreenApi.kt$import retrofit2.http.*</ID>
    <ID>WildcardImport:AuthScreenApi.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:BindingModule.kt$import tv.okko.androidtv.v2.ui.activities.*</ID>
    <ID>WildcardImport:BindingModule.kt$import tv.okko.androidtv.v2.ui.fragments.*</ID>
    <ID>WildcardImport:BundleSubscriptionFragment.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:ButtonCompoundView.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:CalendarAdapter.kt$import tv.okko.androidtv.common.ui.widgets.calendar.adapter.item.*</ID>
    <ID>WildcardImport:CategoryFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:ChannelManager.kt$import androidx.tvprovider.media.tv.*</ID>
    <ID>WildcardImport:CollectionCoverTransformation.kt$import android.graphics.*</ID>
    <ID>WildcardImport:CollectionsBindingModule.kt$import tv.okko.androidtv.collections.ui.fragments.*</ID>
    <ID>WildcardImport:CommandJobService.kt$import android.os.*</ID>
    <ID>WildcardImport:ContextExtension.kt$import androidx.annotation.*</ID>
    <ID>WildcardImport:CustomPlayerView.kt$import android.view.*</ID>
    <ID>WildcardImport:CustomPlayerView.kt$import com.google.android.exoplayer2.*</ID>
    <ID>WildcardImport:DataConverter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:DataConverter.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:DrmExtension.kt$import com.google.android.exoplayer2.drm.*</ID>
    <ID>WildcardImport:ElementResponse.kt$import tv.okko.android.table.ElementTable.RelationColumns.*</ID>
    <ID>WildcardImport:EnterDeviceCodeFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:ErrorInfo.kt$import tv.okko.server.screenapi.ScreenApiErrorCodes.*</ID>
    <ID>WildcardImport:FragmentExtension.kt$import tv.okko.androidtv.purchase.ui.fragments.*</ID>
    <ID>WildcardImport:FteActivity.kt$import ru.more.play.views.*</ID>
    <ID>WildcardImport:FteActivity.kt$import tv.okko.data.*</ID>
    <ID>WildcardImport:FteSubscriptionFragment.kt$import android.view.*</ID>
    <ID>WildcardImport:Game.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:GameExtensions.kt$import tv.okko.android.sport.extensions.GameStatusSource.*</ID>
    <ID>WildcardImport:GameExtensions.kt$import tv.okko.androidtv.common.utils.extensions.*</ID>
    <ID>WildcardImport:KeyboardExtension.kt$import android.view.KeyEvent.*</ID>
    <ID>WildcardImport:KeyboardView.kt$import tv.okko.androidtv.keyboard.models.*</ID>
    <ID>WildcardImport:KollectorAnalytics.kt$import tv.okko.androidtv.analytics.models.*</ID>
    <ID>WildcardImport:KollectorLoggerManager.kt$import okhttp3.*</ID>
    <ID>WildcardImport:LauncherActivity.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:LauncherActivity.kt$import tv.okko.androidtv.common.ui.views.*</ID>
    <ID>WildcardImport:LiveContentTypeExtensions.kt$import tv.okko.androidtv.common.utils.extensions.*</ID>
    <ID>WildcardImport:LoggerManager.kt$import java.io.*</ID>
    <ID>WildcardImport:LoginProvider.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:LoginProvider.kt$import tv.okko.androidtv.network.utils.*</ID>
    <ID>WildcardImport:MainActivity.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:MainApplication.kt$import tv.okko.androidtv.common.utils.app.*</ID>
    <ID>WildcardImport:Media.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:Media.kt$import tv.okko.data.*</ID>
    <ID>WildcardImport:MediaSourceExtensions.kt$import com.google.android.exoplayer2.source.*</ID>
    <ID>WildcardImport:Model.kt$import tv.okko.android.model.sport.*</ID>
    <ID>WildcardImport:Model.kt$import tv.okko.android.sport.models.*</ID>
    <ID>WildcardImport:ModelExtension.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:ModelExtension.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:ModelExtensions.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:ModelExtensions.kt$import tv.okko.androidtv.analytics.models.*</ID>
    <ID>WildcardImport:NotificationLandingActivity.kt$import tv.okko.androidtv.analytics.models.NotificationFields.ACTIONS.*</ID>
    <ID>WildcardImport:PatchWallSubscriptionDao.kt$import android.arch.persistence.room.*</ID>
    <ID>WildcardImport:PaymentMethodListFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:PaymentMethodListPresenter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:PhoneCodeFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:PhoneFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:PlayableHolder.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:PlaybackExtension.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:PlayerControlView.kt$import com.google.android.exoplayer2.*</ID>
    <ID>WildcardImport:PlayerFragment.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:PlayerFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:PlayerFragment.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:PlayerHolder.kt$import com.google.android.exoplayer2.*</ID>
    <ID>WildcardImport:PlayerHolder.kt$import tv.okko.androidtv.playercore.extensions.*</ID>
    <ID>WildcardImport:PlayerHolder.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:PlayerPresenter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:PlayerPresenter.kt$import tv.okko.androidtv.analytics.models.PlaybackFields.Actions.*</ID>
    <ID>WildcardImport:PlayerView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:PlayerView.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:PosterCompoundView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:PresenterExtension.kt$import tv.okko.androidtv.analytics.models.PurchaseFields.Actions.*</ID>
    <ID>WildcardImport:PriceTag.kt$import tv.okko.data.*</ID>
    <ID>WildcardImport:PriceTag.kt$import tv.okko.data.OfferType.*</ID>
    <ID>WildcardImport:ProductCompoundView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:ProductCompoundView.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:ProductListPresenter.kt$import tv.okko.data.PaymentMethodType.*</ID>
    <ID>WildcardImport:Program.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:PurchaseBindingModule.kt$import tv.okko.androidtv.purchase.ui.fragments.*</ID>
    <ID>WildcardImport:PurchaseContainerRouter.kt$import tv.okko.androidtv.purchase.extensions.*</ID>
    <ID>WildcardImport:PurchaseInteractor.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:PurchaseInteractor.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:QualityIconsUtils.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:RefillAmountFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:RegisterPhoneCodeActivity.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:RegistrationCheckCodeFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:RoutingModule.kt$import tv.okko.androidtv.v2.utils.*</ID>
    <ID>WildcardImport:RusEngKeyboardView.kt$import tv.okko.androidtv.keyboard.models.*</ID>
    <ID>WildcardImport:SeasonsRecyclerView.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:SeasonsSeriesFragment.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:SeasonsSeriesPresenter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:SeasonsSeriesView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:SettingsActivity.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:SportCardPresenter.kt$import tv.okko.android.sport.extensions.*</ID>
    <ID>WildcardImport:SportPlayerActivity.kt$import android.view.*</ID>
    <ID>WildcardImport:SportPlayerPresenter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:SportPlayerPresenter.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:SportTournamentPresenter.kt$import tv.okko.android.sport.models.SportSubState.*</ID>
    <ID>WildcardImport:StartActivity.kt$import tv.okko.androidtv.common.utils.app.*</ID>
    <ID>WildcardImport:SubscriptionModel.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:SubscriptionPresenter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:Tournament.kt$import tv.okko.data.ElementType.*</ID>
    <ID>WildcardImport:TournamentAdapter.kt$import tv.okko.android.sport.models.*</ID>
    <ID>WildcardImport:TournamentAdapter.kt$import tv.okko.android.sport.ui.viewholder.*</ID>
    <ID>WildcardImport:TrackSelectorExtensions.kt$import tv.okko.androidtv.playercore.models.*</ID>
    <ID>WildcardImport:TrailerPlayerPresenter.kt$import tv.okko.androidtv.analytics.models.PlaybackFields.Actions.*</ID>
    <ID>WildcardImport:TvAppComponent.kt$import tv.okko.androidtv.v2.di.modules.*</ID>
    <ID>WildcardImport:TvSportCardAdapter.kt$import tv.okko.android.sport.models.*</ID>
    <ID>WildcardImport:TvSportTournamentFragment.kt$import tv.okko.androidtv.v2.ui.activities.*</ID>
    <ID>WildcardImport:UserInteractor.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:UserLoggerManager.kt$import okhttp3.*</ID>
    <ID>WildcardImport:UserModel.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:VideoAboutScrollView.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:VideoAboutScrollView.kt$import tv.okko.androidtv.network.models.*</ID>
    <ID>WildcardImport:VideoCardCompoundView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoCardCompoundView.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:VideoCardFullScreenCompoundView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoCollectionCompoundView.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:VideoCollectionFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:VideoCollectionsInteractor.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoInfoFragment.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoInfoFragment.kt$import tv.okko.androidtv.common.ui.extensions.*</ID>
    <ID>WildcardImport:VideoInfoFragment.kt$import tv.okko.androidtv.network.models.*</ID>
    <ID>WildcardImport:VideoInfoPresenter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoInfoPresenter.kt$import tv.okko.androidtv.network.models.*</ID>
    <ID>WildcardImport:VideoInfoPresenter.kt$import tv.okko.androidtv.videoInfo.v2.extensions.*</ID>
    <ID>WildcardImport:VideoInfoRouter.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoInfoRouter.kt$import tv.okko.androidtv.v2.extensions.*</ID>
    <ID>WildcardImport:VideoInfoRouter.kt$import tv.okko.androidtv.xiaomi.extensions.*</ID>
    <ID>WildcardImport:VideoInfoView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoInfoView.kt$import tv.okko.androidtv.network.models.*</ID>
    <ID>WildcardImport:VideoInteractor.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoModel.kt$import tv.okko.android.response.*</ID>
    <ID>WildcardImport:VideoOverviewCompoundView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoRepository.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:VideoSynopsisCompoundView.kt$import tv.okko.android.model.*</ID>
    <ID>WildcardImport:View.kt$import tv.okko.android.sport.ui.widget.*</ID>
    <ID>WildcardImport:View.kt$import tv.okko.models.LiveContentType.*</ID>
    <ID>WildcardImport:XiaomiIntentUtils.kt$import tv.okko.androidtv.network.models.*</ID>
  </Whitelist>
</SmellBaseline>
